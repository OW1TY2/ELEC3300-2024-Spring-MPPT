
Blue pill solar tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003070  08003070  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003070  08003070  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003070  08003070  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003084  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003084  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097b0  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ba0  00000000  00000000  00029828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000873  00000000  00000000  0002beb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171dc  00000000  00000000  0002c72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c43f  00000000  00000000  00043907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000892ca  00000000  00000000  0004fd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cf8  00000000  00000000  000d9010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000dbd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003034 	.word	0x08003034

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003034 	.word	0x08003034

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb9e 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f858 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa00 	bl	800055c <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9e0 	bl	8000520 <MX_DMA_Init>
  MX_TIM1_Init();
 8000160:	f000 f918 	bl	8000394 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000164:	f000 f8ac 	bl	80002c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000168:	2100      	movs	r1, #0
 800016a:	4822      	ldr	r0, [pc, #136]	; (80001f4 <main+0xa8>)
 800016c:	f002 f9b6 	bl	80024dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000170:	2104      	movs	r1, #4
 8000172:	4820      	ldr	r0, [pc, #128]	; (80001f4 <main+0xa8>)
 8000174:	f002 f9b2 	bl	80024dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000178:	2108      	movs	r1, #8
 800017a:	481e      	ldr	r0, [pc, #120]	; (80001f4 <main+0xa8>)
 800017c:	f002 f9ae 	bl	80024dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000180:	210c      	movs	r1, #12
 8000182:	481c      	ldr	r0, [pc, #112]	; (80001f4 <main+0xa8>)
 8000184:	f002 f9aa 	bl	80024dc <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 25;
 8000188:	4b1b      	ldr	r3, [pc, #108]	; (80001f8 <main+0xac>)
 800018a:	2219      	movs	r2, #25
 800018c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 50;
 800018e:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <main+0xac>)
 8000190:	2232      	movs	r2, #50	; 0x32
 8000192:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 75;
 8000194:	4b18      	ldr	r3, [pc, #96]	; (80001f8 <main+0xac>)
 8000196:	224b      	movs	r2, #75	; 0x4b
 8000198:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 100;
 800019a:	4b17      	ldr	r3, [pc, #92]	; (80001f8 <main+0xac>)
 800019c:	2264      	movs	r2, #100	; 0x64
 800019e:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	2101      	movs	r1, #1
 80001a4:	4815      	ldr	r0, [pc, #84]	; (80001fc <main+0xb0>)
 80001a6:	f001 fc45 	bl	8001a34 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80001aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ae:	f000 fbd1 	bl	8000954 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	2101      	movs	r1, #1
 80001b6:	4811      	ldr	r0, [pc, #68]	; (80001fc <main+0xb0>)
 80001b8:	f001 fc3c 	bl	8001a34 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80001bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c0:	f000 fbc8 	bl	8000954 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2101      	movs	r1, #1
 80001c8:	480c      	ldr	r0, [pc, #48]	; (80001fc <main+0xb0>)
 80001ca:	f001 fc33 	bl	8001a34 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80001ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d2:	f000 fbbf 	bl	8000954 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2101      	movs	r1, #1
 80001da:	4808      	ldr	r0, [pc, #32]	; (80001fc <main+0xb0>)
 80001dc:	f001 fc2a 	bl	8001a34 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)LDR_val, 4);
 80001e0:	2204      	movs	r2, #4
 80001e2:	4907      	ldr	r1, [pc, #28]	; (8000200 <main+0xb4>)
 80001e4:	4807      	ldr	r0, [pc, #28]	; (8000204 <main+0xb8>)
 80001e6:	f000 fcb1 	bl	8000b4c <HAL_ADC_Start_DMA>
    HAL_Delay(1);
 80001ea:	2001      	movs	r0, #1
 80001ec:	f000 fbb2 	bl	8000954 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)LDR_val, 4);
 80001f0:	e7f6      	b.n	80001e0 <main+0x94>
 80001f2:	bf00      	nop
 80001f4:	2000009c 	.word	0x2000009c
 80001f8:	40012c00 	.word	0x40012c00
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	200000e4 	.word	0x200000e4
 8000204:	20000028 	.word	0x20000028

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b094      	sub	sp, #80	; 0x50
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fedf 	bl	8002fda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fc00 	bl	8001a64 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026a:	f000 f9c1 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fe6c 	bl	8001f68 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000296:	f000 f9ab 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800029a:	2302      	movs	r3, #2
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800029e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 ffba 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002b2:	f000 f99d 	bl	80005f0 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3750      	adds	r7, #80	; 0x50
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d0:	4b2e      	ldr	r3, [pc, #184]	; (800038c <MX_ADC1_Init+0xcc>)
 80002d2:	4a2f      	ldr	r2, [pc, #188]	; (8000390 <MX_ADC1_Init+0xd0>)
 80002d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002d6:	4b2d      	ldr	r3, [pc, #180]	; (800038c <MX_ADC1_Init+0xcc>)
 80002d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002de:	4b2b      	ldr	r3, [pc, #172]	; (800038c <MX_ADC1_Init+0xcc>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e4:	4b29      	ldr	r3, [pc, #164]	; (800038c <MX_ADC1_Init+0xcc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ea:	4b28      	ldr	r3, [pc, #160]	; (800038c <MX_ADC1_Init+0xcc>)
 80002ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b26      	ldr	r3, [pc, #152]	; (800038c <MX_ADC1_Init+0xcc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80002f8:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_ADC1_Init+0xcc>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fe:	4823      	ldr	r0, [pc, #140]	; (800038c <MX_ADC1_Init+0xcc>)
 8000300:	f000 fb4c 	bl	800099c <HAL_ADC_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800030a:	f000 f971 	bl	80005f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000312:	2301      	movs	r3, #1
 8000314:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4619      	mov	r1, r3
 800031e:	481b      	ldr	r0, [pc, #108]	; (800038c <MX_ADC1_Init+0xcc>)
 8000320:	f000 fd0e 	bl	8000d40 <HAL_ADC_ConfigChannel>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800032a:	f000 f961 	bl	80005f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800032e:	2301      	movs	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000332:	2302      	movs	r3, #2
 8000334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	4814      	ldr	r0, [pc, #80]	; (800038c <MX_ADC1_Init+0xcc>)
 800033c:	f000 fd00 	bl	8000d40 <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000346:	f000 f953 	bl	80005f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800034a:	2302      	movs	r3, #2
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800034e:	2303      	movs	r3, #3
 8000350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	480d      	ldr	r0, [pc, #52]	; (800038c <MX_ADC1_Init+0xcc>)
 8000358:	f000 fcf2 	bl	8000d40 <HAL_ADC_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000362:	f000 f945 	bl	80005f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000366:	2303      	movs	r3, #3
 8000368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800036a:	2304      	movs	r3, #4
 800036c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4619      	mov	r1, r3
 8000372:	4806      	ldr	r0, [pc, #24]	; (800038c <MX_ADC1_Init+0xcc>)
 8000374:	f000 fce4 	bl	8000d40 <HAL_ADC_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800037e:	f000 f937 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000028 	.word	0x20000028
 8000390:	40012400 	.word	0x40012400

08000394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b096      	sub	sp, #88	; 0x58
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
 80003c2:	615a      	str	r2, [r3, #20]
 80003c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2220      	movs	r2, #32
 80003ca:	2100      	movs	r1, #0
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 fe04 	bl	8002fda <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d2:	4b51      	ldr	r3, [pc, #324]	; (8000518 <MX_TIM1_Init+0x184>)
 80003d4:	4a51      	ldr	r2, [pc, #324]	; (800051c <MX_TIM1_Init+0x188>)
 80003d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80003d8:	4b4f      	ldr	r3, [pc, #316]	; (8000518 <MX_TIM1_Init+0x184>)
 80003da:	2247      	movs	r2, #71	; 0x47
 80003dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003de:	4b4e      	ldr	r3, [pc, #312]	; (8000518 <MX_TIM1_Init+0x184>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80003e4:	4b4c      	ldr	r3, [pc, #304]	; (8000518 <MX_TIM1_Init+0x184>)
 80003e6:	2263      	movs	r2, #99	; 0x63
 80003e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ea:	4b4b      	ldr	r3, [pc, #300]	; (8000518 <MX_TIM1_Init+0x184>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f0:	4b49      	ldr	r3, [pc, #292]	; (8000518 <MX_TIM1_Init+0x184>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f6:	4b48      	ldr	r3, [pc, #288]	; (8000518 <MX_TIM1_Init+0x184>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003fc:	4846      	ldr	r0, [pc, #280]	; (8000518 <MX_TIM1_Init+0x184>)
 80003fe:	f001 ffc5 	bl	800238c <HAL_TIM_Base_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000408:	f000 f8f2 	bl	80005f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000410:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000412:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000416:	4619      	mov	r1, r3
 8000418:	483f      	ldr	r0, [pc, #252]	; (8000518 <MX_TIM1_Init+0x184>)
 800041a:	f002 f9c3 	bl	80027a4 <HAL_TIM_ConfigClockSource>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000424:	f000 f8e4 	bl	80005f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000428:	483b      	ldr	r0, [pc, #236]	; (8000518 <MX_TIM1_Init+0x184>)
 800042a:	f001 fffe 	bl	800242a <HAL_TIM_PWM_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000434:	f000 f8dc 	bl	80005f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000438:	2300      	movs	r3, #0
 800043a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000440:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000444:	4619      	mov	r1, r3
 8000446:	4834      	ldr	r0, [pc, #208]	; (8000518 <MX_TIM1_Init+0x184>)
 8000448:	f002 fd18 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000452:	f000 f8cd 	bl	80005f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000456:	2360      	movs	r3, #96	; 0x60
 8000458:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 9;
 800045a:	2309      	movs	r3, #9
 800045c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045e:	2300      	movs	r3, #0
 8000460:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000462:	2300      	movs	r3, #0
 8000464:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800046a:	2300      	movs	r3, #0
 800046c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800046e:	2300      	movs	r3, #0
 8000470:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000476:	2200      	movs	r2, #0
 8000478:	4619      	mov	r1, r3
 800047a:	4827      	ldr	r0, [pc, #156]	; (8000518 <MX_TIM1_Init+0x184>)
 800047c:	f002 f8d0 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000486:	f000 f8b3 	bl	80005f0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800048e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000492:	2204      	movs	r2, #4
 8000494:	4619      	mov	r1, r3
 8000496:	4820      	ldr	r0, [pc, #128]	; (8000518 <MX_TIM1_Init+0x184>)
 8000498:	f002 f8c2 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80004a2:	f000 f8a5 	bl	80005f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004aa:	2208      	movs	r2, #8
 80004ac:	4619      	mov	r1, r3
 80004ae:	481a      	ldr	r0, [pc, #104]	; (8000518 <MX_TIM1_Init+0x184>)
 80004b0:	f002 f8b6 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80004ba:	f000 f899 	bl	80005f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	220c      	movs	r2, #12
 80004c4:	4619      	mov	r1, r3
 80004c6:	4814      	ldr	r0, [pc, #80]	; (8000518 <MX_TIM1_Init+0x184>)
 80004c8:	f002 f8aa 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80004d2:	f000 f88d 	bl	80005f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <MX_TIM1_Init+0x184>)
 80004fa:	f002 fd1d 	bl	8002f38 <HAL_TIMEx_ConfigBreakDeadTime>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000504:	f000 f874 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <MX_TIM1_Init+0x184>)
 800050a:	f000 f92f 	bl	800076c <HAL_TIM_MspPostInit>

}
 800050e:	bf00      	nop
 8000510:	3758      	adds	r7, #88	; 0x58
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000009c 	.word	0x2000009c
 800051c:	40012c00 	.word	0x40012c00

08000520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_DMA_Init+0x38>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <MX_DMA_Init+0x38>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_DMA_Init+0x38>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f000 fecd 	bl	80012e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f000 fee6 	bl	800131a <HAL_NVIC_EnableIRQ>

}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <MX_GPIO_Init+0x8c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <MX_GPIO_Init+0x8c>)
 8000576:	f043 0320 	orr.w	r3, r3, #32
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_GPIO_Init+0x8c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0320 	and.w	r3, r3, #32
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_GPIO_Init+0x8c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <MX_GPIO_Init+0x8c>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_GPIO_Init+0x8c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_GPIO_Init+0x8c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <MX_GPIO_Init+0x8c>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_GPIO_Init+0x8c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <MX_GPIO_Init+0x90>)
 80005be:	f001 fa39 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0x90>)
 80005da:	f001 f8a7 	bl	800172c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_MspInit+0x5c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_MspInit+0x5c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_MspInit+0x5c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x5c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <HAL_MspInit+0x5c>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x5c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_MspInit+0x60>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_MspInit+0x60>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000
 800065c:	40010000 	.word	0x40010000

08000660 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a28      	ldr	r2, [pc, #160]	; (800071c <HAL_ADC_MspInit+0xbc>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d149      	bne.n	8000714 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <HAL_ADC_MspInit+0xc0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <HAL_ADC_MspInit+0xc0>)
 8000686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <HAL_ADC_MspInit+0xc0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_ADC_MspInit+0xc0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <HAL_ADC_MspInit+0xc0>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <HAL_ADC_MspInit+0xc0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006b0:	230f      	movs	r3, #15
 80006b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b4:	2303      	movs	r3, #3
 80006b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4819      	ldr	r0, [pc, #100]	; (8000724 <HAL_ADC_MspInit+0xc4>)
 80006c0:	f001 f834 	bl	800172c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006c6:	4a19      	ldr	r2, [pc, #100]	; (800072c <HAL_ADC_MspInit+0xcc>)
 80006c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006ee:	2220      	movs	r2, #32
 80006f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 80006fa:	f000 fe29 	bl	8001350 <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000704:	f7ff ff74 	bl	80005f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 800070c:	621a      	str	r2, [r3, #32]
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_ADC_MspInit+0xc8>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40012400 	.word	0x40012400
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800
 8000728:	20000058 	.word	0x20000058
 800072c:	40020008 	.word	0x40020008

08000730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <HAL_TIM_Base_MspInit+0x34>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d10b      	bne.n	800075a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_TIM_Base_MspInit+0x38>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_TIM_Base_MspInit+0x38>)
 8000748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_TIM_Base_MspInit+0x38>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40012c00 	.word	0x40012c00
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <HAL_TIM_MspPostInit+0x5c>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d118      	bne.n	80007be <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_TIM_MspPostInit+0x60>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_TIM_MspPostInit+0x60>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_TIM_MspPostInit+0x60>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80007a4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80007a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <HAL_TIM_MspPostInit+0x64>)
 80007ba:	f000 ffb7 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010800 	.word	0x40010800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 f87f 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <DMA1_Channel1_IRQHandler+0x10>)
 800082a:	f000 fe4b 	bl	80014c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000058 	.word	0x20000058

08000838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000844:	f7ff fff8 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800084a:	490c      	ldr	r1, [pc, #48]	; (800087c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <LoopFillZerobss+0x16>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000860:	4c09      	ldr	r4, [pc, #36]	; (8000888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086e:	f002 fbbd 	bl	8002fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f7ff fc6b 	bl	800014c <main>
  bx lr
 8000876:	4770      	bx	lr
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000880:	08003078 	.word	0x08003078
  ldr r2, =_sbss
 8000884:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000888:	200000f8 	.word	0x200000f8

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_Init+0x28>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_Init+0x28>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 fd13 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f808 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff fea6 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fd2b 	bl	8001336 <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f000 fcf3 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000000 	.word	0x20000000
 8000914:	20000008 	.word	0x20000008
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_IncTick+0x20>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000008 	.word	0x20000008
 800093c:	200000f4 	.word	0x200000f4

08000940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	200000f4 	.word	0x200000f4

08000954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff fff0 	bl	8000940 <HAL_GetTick>
 8000960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096c:	d005      	beq.n	800097a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_Delay+0x44>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097a:	bf00      	nop
 800097c:	f7ff ffe0 	bl	8000940 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d8f7      	bhi.n	800097c <HAL_Delay+0x28>
  {
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e0be      	b.n	8000b3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d109      	bne.n	80009e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fe40 	bl	8000660 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 faff 	bl	8000fe4 <ADC_ConversionStop_Disable>
 80009e6:	4603      	mov	r3, r0
 80009e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f040 8099 	bne.w	8000b2a <HAL_ADC_Init+0x18e>
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f040 8095 	bne.w	8000b2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a08:	f023 0302 	bic.w	r3, r3, #2
 8000a0c:	f043 0202 	orr.w	r2, r3, #2
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7b1b      	ldrb	r3, [r3, #12]
 8000a22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a34:	d003      	beq.n	8000a3e <HAL_ADC_Init+0xa2>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d102      	bne.n	8000a44 <HAL_ADC_Init+0xa8>
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	e000      	b.n	8000a46 <HAL_ADC_Init+0xaa>
 8000a44:	2300      	movs	r3, #0
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7d1b      	ldrb	r3, [r3, #20]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d119      	bne.n	8000a88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7b1b      	ldrb	r3, [r3, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d109      	bne.n	8000a70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	035a      	lsls	r2, r3, #13
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	e00b      	b.n	8000a88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	f043 0220 	orr.w	r2, r3, #32
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	f043 0201 	orr.w	r2, r3, #1
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <HAL_ADC_Init+0x1a8>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab8:	d003      	beq.n	8000ac2 <HAL_ADC_Init+0x126>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d104      	bne.n	8000acc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	051b      	lsls	r3, r3, #20
 8000aca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_ADC_Init+0x1ac>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d10b      	bne.n	8000b08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afa:	f023 0303 	bic.w	r3, r3, #3
 8000afe:	f043 0201 	orr.w	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b06:	e018      	b.n	8000b3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0c:	f023 0312 	bic.w	r3, r3, #18
 8000b10:	f043 0210 	orr.w	r2, r3, #16
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	f043 0201 	orr.w	r2, r3, #1
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b28:	e007      	b.n	8000b3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	f043 0210 	orr.w	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	ffe1f7fd 	.word	0xffe1f7fd
 8000b48:	ff1f0efe 	.word	0xff1f0efe

08000b4c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a64      	ldr	r2, [pc, #400]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d004      	beq.n	8000b70 <HAL_ADC_Start_DMA+0x24>
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a63      	ldr	r2, [pc, #396]	; (8000cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d106      	bne.n	8000b7e <HAL_ADC_Start_DMA+0x32>
 8000b70:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f040 80b3 	bne.w	8000ce4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d101      	bne.n	8000b8c <HAL_ADC_Start_DMA+0x40>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	e0ae      	b.n	8000cea <HAL_ADC_Start_DMA+0x19e>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f000 f9cb 	bl	8000f30 <ADC_Enable>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f040 809a 	bne.w	8000cda <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a4e      	ldr	r2, [pc, #312]	; (8000cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d105      	bne.n	8000bd0 <HAL_ADC_Start_DMA+0x84>
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d115      	bne.n	8000bfc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d026      	beq.n	8000c38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bfa:	e01d      	b.n	8000c38 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d004      	beq.n	8000c1c <HAL_ADC_Start_DMA+0xd0>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a38      	ldr	r2, [pc, #224]	; (8000cf8 <HAL_ADC_Start_DMA+0x1ac>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d10d      	bne.n	8000c38 <HAL_ADC_Start_DMA+0xec>
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <HAL_ADC_Start_DMA+0x1a8>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d007      	beq.n	8000c38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	f023 0206 	bic.w	r2, r3, #6
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c50:	e002      	b.n	8000c58 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2200      	movs	r2, #0
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_ADC_Start_DMA+0x1b0>)
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <HAL_ADC_Start_DMA+0x1b4>)
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <HAL_ADC_Start_DMA+0x1b8>)
 8000c76:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f06f 0202 	mvn.w	r2, #2
 8000c80:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c90:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a18      	ldr	r0, [r3, #32]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	334c      	adds	r3, #76	; 0x4c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f000 fbaf 	bl	8001404 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cb0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cb4:	d108      	bne.n	8000cc8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cc4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cc6:	e00f      	b.n	8000ce8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cd6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cd8:	e006      	b.n	8000ce8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000ce2:	e001      	b.n	8000ce8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012400 	.word	0x40012400
 8000cf8:	40012800 	.word	0x40012800
 8000cfc:	08001067 	.word	0x08001067
 8000d00:	080010e3 	.word	0x080010e3
 8000d04:	080010ff 	.word	0x080010ff

08000d08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
	...

08000d40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x20>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e0dc      	b.n	8000f1a <HAL_ADC_ConfigChannel+0x1da>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d81c      	bhi.n	8000daa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	3b05      	subs	r3, #5
 8000d82:	221f      	movs	r2, #31
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4019      	ands	r1, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	3b05      	subs	r3, #5
 8000d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
 8000da8:	e03c      	b.n	8000e24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b0c      	cmp	r3, #12
 8000db0:	d81c      	bhi.n	8000dec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3b23      	subs	r3, #35	; 0x23
 8000dc4:	221f      	movs	r2, #31
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4019      	ands	r1, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	3b23      	subs	r3, #35	; 0x23
 8000dde:	fa00 f203 	lsl.w	r2, r0, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dea:	e01b      	b.n	8000e24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b41      	subs	r3, #65	; 0x41
 8000dfe:	221f      	movs	r2, #31
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4019      	ands	r1, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	3b41      	subs	r3, #65	; 0x41
 8000e18:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	d91c      	bls.n	8000e66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68d9      	ldr	r1, [r3, #12]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3b1e      	subs	r3, #30
 8000e3e:	2207      	movs	r2, #7
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4019      	ands	r1, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	6898      	ldr	r0, [r3, #8]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	3b1e      	subs	r3, #30
 8000e58:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	e019      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6919      	ldr	r1, [r3, #16]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	2207      	movs	r2, #7
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4019      	ands	r1, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6898      	ldr	r0, [r3, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	d003      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ea6:	2b11      	cmp	r3, #17
 8000ea8:	d132      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_ADC_ConfigChannel+0x1e4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d125      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d126      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ed0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b10      	cmp	r3, #16
 8000ed8:	d11a      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_ADC_ConfigChannel+0x1e8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <HAL_ADC_ConfigChannel+0x1ec>)
 8000ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee4:	0c9a      	lsrs	r2, r3, #18
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef0:	e002      	b.n	8000ef8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f9      	bne.n	8000ef2 <HAL_ADC_ConfigChannel+0x1b2>
 8000efe:	e007      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f043 0220 	orr.w	r2, r3, #32
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40012400 	.word	0x40012400
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	431bde83 	.word	0x431bde83

08000f30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d040      	beq.n	8000fd0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0201 	orr.w	r2, r2, #1
 8000f5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <ADC_Enable+0xac>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <ADC_Enable+0xb0>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	0c9b      	lsrs	r3, r3, #18
 8000f6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f6c:	e002      	b.n	8000f74 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f7a:	f7ff fce1 	bl	8000940 <HAL_GetTick>
 8000f7e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f80:	e01f      	b.n	8000fc2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f82:	f7ff fcdd 	bl	8000940 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d918      	bls.n	8000fc2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d011      	beq.n	8000fc2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	f043 0210 	orr.w	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	f043 0201 	orr.w	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e007      	b.n	8000fd2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d1d8      	bne.n	8000f82 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	431bde83 	.word	0x431bde83

08000fe4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12e      	bne.n	800105c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0201 	bic.w	r2, r2, #1
 800100c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800100e:	f7ff fc97 	bl	8000940 <HAL_GetTick>
 8001012:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001014:	e01b      	b.n	800104e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001016:	f7ff fc93 	bl	8000940 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d914      	bls.n	800104e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b01      	cmp	r3, #1
 8001030:	d10d      	bne.n	800104e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f043 0210 	orr.w	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	f043 0201 	orr.w	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e007      	b.n	800105e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d0dc      	beq.n	8001016 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800107c:	2b00      	cmp	r3, #0
 800107e:	d127      	bne.n	80010d0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001096:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800109a:	d115      	bne.n	80010c8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d111      	bne.n	80010c8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d105      	bne.n	80010c8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	f043 0201 	orr.w	r2, r3, #1
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff fe1d 	bl	8000d08 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80010ce:	e004      	b.n	80010da <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fe12 	bl	8000d1a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	f043 0204 	orr.w	r2, r3, #4
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff fe01 	bl	8000d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4906      	ldr	r1, [pc, #24]	; (80011cc <__NVIC_EnableIRQ+0x34>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff90 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff2d 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff42 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff90 	bl	8001224 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5f 	bl	80011d0 <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff35 	bl	8001198 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa2 	bl	8001288 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e043      	b.n	80013ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_DMA_Init+0xa8>)
 800136e:	4413      	add	r3, r2
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <HAL_DMA_Init+0xac>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	009a      	lsls	r2, r3, #2
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_DMA_Init+0xb0>)
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800139a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800139e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	bffdfff8 	.word	0xbffdfff8
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	40020000 	.word	0x40020000

08001404 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_DMA_Start_IT+0x20>
 8001420:	2302      	movs	r3, #2
 8001422:	e04b      	b.n	80014bc <HAL_DMA_Start_IT+0xb8>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d13a      	bne.n	80014ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f937 	bl	80016d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	2b00      	cmp	r3, #0
 8001468:	d008      	beq.n	800147c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 020e 	orr.w	r2, r2, #14
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e00f      	b.n	800149c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0204 	bic.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 020a 	orr.w	r2, r2, #10
 800149a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e005      	b.n	80014ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014b6:	2302      	movs	r3, #2
 80014b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	2204      	movs	r2, #4
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d04f      	beq.n	800158c <HAL_DMA_IRQHandler+0xc8>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d04a      	beq.n	800158c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	2b00      	cmp	r3, #0
 8001502:	d107      	bne.n	8001514 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0204 	bic.w	r2, r2, #4
 8001512:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a66      	ldr	r2, [pc, #408]	; (80016b4 <HAL_DMA_IRQHandler+0x1f0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d029      	beq.n	8001572 <HAL_DMA_IRQHandler+0xae>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a65      	ldr	r2, [pc, #404]	; (80016b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d022      	beq.n	800156e <HAL_DMA_IRQHandler+0xaa>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a63      	ldr	r2, [pc, #396]	; (80016bc <HAL_DMA_IRQHandler+0x1f8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d01a      	beq.n	8001568 <HAL_DMA_IRQHandler+0xa4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a62      	ldr	r2, [pc, #392]	; (80016c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d012      	beq.n	8001562 <HAL_DMA_IRQHandler+0x9e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a60      	ldr	r2, [pc, #384]	; (80016c4 <HAL_DMA_IRQHandler+0x200>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00a      	beq.n	800155c <HAL_DMA_IRQHandler+0x98>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a5f      	ldr	r2, [pc, #380]	; (80016c8 <HAL_DMA_IRQHandler+0x204>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d102      	bne.n	8001556 <HAL_DMA_IRQHandler+0x92>
 8001550:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001554:	e00e      	b.n	8001574 <HAL_DMA_IRQHandler+0xb0>
 8001556:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800155a:	e00b      	b.n	8001574 <HAL_DMA_IRQHandler+0xb0>
 800155c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001560:	e008      	b.n	8001574 <HAL_DMA_IRQHandler+0xb0>
 8001562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001566:	e005      	b.n	8001574 <HAL_DMA_IRQHandler+0xb0>
 8001568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156c:	e002      	b.n	8001574 <HAL_DMA_IRQHandler+0xb0>
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	e000      	b.n	8001574 <HAL_DMA_IRQHandler+0xb0>
 8001572:	2304      	movs	r3, #4
 8001574:	4a55      	ldr	r2, [pc, #340]	; (80016cc <HAL_DMA_IRQHandler+0x208>)
 8001576:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 8094 	beq.w	80016aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800158a:	e08e      	b.n	80016aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2202      	movs	r2, #2
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d056      	beq.n	800164a <HAL_DMA_IRQHandler+0x186>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d051      	beq.n	800164a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10b      	bne.n	80015cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020a 	bic.w	r2, r2, #10
 80015c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <HAL_DMA_IRQHandler+0x1f0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d029      	beq.n	800162a <HAL_DMA_IRQHandler+0x166>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a37      	ldr	r2, [pc, #220]	; (80016b8 <HAL_DMA_IRQHandler+0x1f4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d022      	beq.n	8001626 <HAL_DMA_IRQHandler+0x162>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a35      	ldr	r2, [pc, #212]	; (80016bc <HAL_DMA_IRQHandler+0x1f8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01a      	beq.n	8001620 <HAL_DMA_IRQHandler+0x15c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a34      	ldr	r2, [pc, #208]	; (80016c0 <HAL_DMA_IRQHandler+0x1fc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d012      	beq.n	800161a <HAL_DMA_IRQHandler+0x156>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a32      	ldr	r2, [pc, #200]	; (80016c4 <HAL_DMA_IRQHandler+0x200>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x150>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <HAL_DMA_IRQHandler+0x204>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d102      	bne.n	800160e <HAL_DMA_IRQHandler+0x14a>
 8001608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800160c:	e00e      	b.n	800162c <HAL_DMA_IRQHandler+0x168>
 800160e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001612:	e00b      	b.n	800162c <HAL_DMA_IRQHandler+0x168>
 8001614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001618:	e008      	b.n	800162c <HAL_DMA_IRQHandler+0x168>
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	e005      	b.n	800162c <HAL_DMA_IRQHandler+0x168>
 8001620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001624:	e002      	b.n	800162c <HAL_DMA_IRQHandler+0x168>
 8001626:	2320      	movs	r3, #32
 8001628:	e000      	b.n	800162c <HAL_DMA_IRQHandler+0x168>
 800162a:	2302      	movs	r3, #2
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_DMA_IRQHandler+0x208>)
 800162e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	d034      	beq.n	80016aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001648:	e02f      	b.n	80016aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2208      	movs	r2, #8
 8001650:	409a      	lsls	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d028      	beq.n	80016ac <HAL_DMA_IRQHandler+0x1e8>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d023      	beq.n	80016ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 020e 	bic.w	r2, r2, #14
 8001672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167c:	2101      	movs	r1, #1
 800167e:	fa01 f202 	lsl.w	r2, r1, r2
 8001682:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d004      	beq.n	80016ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
    }
  }
  return;
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
}
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40020008 	.word	0x40020008
 80016b8:	4002001c 	.word	0x4002001c
 80016bc:	40020030 	.word	0x40020030
 80016c0:	40020044 	.word	0x40020044
 80016c4:	40020058 	.word	0x40020058
 80016c8:	4002006c 	.word	0x4002006c
 80016cc:	40020000 	.word	0x40020000

080016d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d108      	bne.n	8001710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800170e:	e007      	b.n	8001720 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e169      	b.n	8001a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001740:	2201      	movs	r2, #1
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8158 	bne.w	8001a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a9a      	ldr	r2, [pc, #616]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d05e      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001768:	4a98      	ldr	r2, [pc, #608]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d875      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800176e:	4a98      	ldr	r2, [pc, #608]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d058      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001774:	4a96      	ldr	r2, [pc, #600]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d86f      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800177a:	4a96      	ldr	r2, [pc, #600]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d052      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001780:	4a94      	ldr	r2, [pc, #592]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d869      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001786:	4a94      	ldr	r2, [pc, #592]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04c      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 800178c:	4a92      	ldr	r2, [pc, #584]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d863      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001792:	4a92      	ldr	r2, [pc, #584]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d046      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001798:	4a90      	ldr	r2, [pc, #576]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d85d      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d82a      	bhi.n	80017f8 <HAL_GPIO_Init+0xcc>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d859      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <HAL_GPIO_Init+0x80>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001801 	.word	0x08001801
 80017b4:	08001813 	.word	0x08001813
 80017b8:	08001855 	.word	0x08001855
 80017bc:	0800185b 	.word	0x0800185b
 80017c0:	0800185b 	.word	0x0800185b
 80017c4:	0800185b 	.word	0x0800185b
 80017c8:	0800185b 	.word	0x0800185b
 80017cc:	0800185b 	.word	0x0800185b
 80017d0:	0800185b 	.word	0x0800185b
 80017d4:	0800185b 	.word	0x0800185b
 80017d8:	0800185b 	.word	0x0800185b
 80017dc:	0800185b 	.word	0x0800185b
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	0800185b 	.word	0x0800185b
 80017e8:	0800185b 	.word	0x0800185b
 80017ec:	0800185b 	.word	0x0800185b
 80017f0:	08001809 	.word	0x08001809
 80017f4:	0800181d 	.word	0x0800181d
 80017f8:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_GPIO_Init+0x2b4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fe:	e02c      	b.n	800185a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e029      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e024      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	3308      	adds	r3, #8
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e01f      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	330c      	adds	r3, #12
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e01a      	b.n	800185c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182e:	2304      	movs	r3, #4
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e013      	b.n	800185c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800183c:	2308      	movs	r3, #8
 800183e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	611a      	str	r2, [r3, #16]
          break;
 8001846:	e009      	b.n	800185c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001848:	2308      	movs	r3, #8
 800184a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	615a      	str	r2, [r3, #20]
          break;
 8001852:	e003      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x130>
          break;
 800185a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d801      	bhi.n	8001866 <HAL_GPIO_Init+0x13a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e001      	b.n	800186a <HAL_GPIO_Init+0x13e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3304      	adds	r3, #4
 800186a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2bff      	cmp	r3, #255	; 0xff
 8001870:	d802      	bhi.n	8001878 <HAL_GPIO_Init+0x14c>
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x152>
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	3b08      	subs	r3, #8
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	210f      	movs	r1, #15
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	401a      	ands	r2, r3
 8001890:	6a39      	ldr	r1, [r7, #32]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80b1 	beq.w	8001a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c4:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_GPIO_Init+0x1ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <HAL_GPIO_Init+0x2c4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00d      	beq.n	8001914 <HAL_GPIO_Init+0x1e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3e      	ldr	r2, [pc, #248]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x1e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a3d      	ldr	r2, [pc, #244]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_GPIO_Init+0x1e0>
 8001908:	2303      	movs	r3, #3
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 800190c:	2304      	movs	r3, #4
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001918:	2300      	movs	r3, #0
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192a:	492f      	ldr	r1, [pc, #188]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	492c      	ldr	r1, [pc, #176]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4928      	ldr	r1, [pc, #160]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	491e      	ldr	r1, [pc, #120]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4918      	ldr	r1, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4914      	ldr	r1, [pc, #80]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d021      	beq.n	8001a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e021      	b.n	8001a0e <HAL_GPIO_Init+0x2e2>
 80019ca:	bf00      	nop
 80019cc:	10320000 	.word	0x10320000
 80019d0:	10310000 	.word	0x10310000
 80019d4:	10220000 	.word	0x10220000
 80019d8:	10210000 	.word	0x10210000
 80019dc:	10120000 	.word	0x10120000
 80019e0:	10110000 	.word	0x10110000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40011400 	.word	0x40011400
 80019fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4909      	ldr	r1, [pc, #36]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f ae8e 	bne.w	8001740 <HAL_GPIO_Init+0x14>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	372c      	adds	r7, #44	; 0x2c
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e272      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e24c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7fe fefe 	bl	8000940 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7fe fefa 	bl	8000940 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e200      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7fe feea 	bl	8000940 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7fe fee6 	bl	8000940 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ec      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1c0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fe9f 	bl	8000940 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7fe fe9b 	bl	8000940 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1a1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe fe7e 	bl	8000940 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7fe fe7a 	bl	8000940 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e180      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7fe fe5e 	bl	8000940 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7fe fe5a 	bl	8000940 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e160      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 fa9c 	bl	80021e4 <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7fe fe44 	bl	8000940 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7fe fe40 	bl	8000940 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e146      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b88      	ldr	r3, [pc, #544]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a87      	ldr	r2, [pc, #540]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b85      	ldr	r3, [pc, #532]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7fe fe01 	bl	8000940 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7fe fdfd 	bl	8000940 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e103      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a69      	ldr	r2, [pc, #420]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a60      	ldr	r2, [pc, #384]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe fdb1 	bl	8000940 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe fdad 	bl	8000940 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0b1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe fd9b 	bl	8000940 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe fd97 	bl	8000940 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e09b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe fd6b 	bl	8000940 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe fd67 	bl	8000940 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e06d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4921      	ldr	r1, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	491b      	ldr	r1, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fd3b 	bl	8000940 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fd37 	bl	8000940 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e03d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e035      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fd24 	bl	8000940 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe fd20 	bl	8000940 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e026      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e01e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e019      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x500>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d0      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4965      	ldr	r1, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d040      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e073      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4936      	ldr	r1, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7fe fc72 	bl	8000940 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7fe fc6e 	bl	8000940 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e053      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d210      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4922      	ldr	r1, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1cc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fbd0 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	0800304c 	.word	0x0800304c
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x30>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x36>
 800216a:	e027      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800216e:	613b      	str	r3, [r7, #16]
      break;
 8002170:	e027      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0c5b      	lsrs	r3, r3, #17
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219e:	fb03 f202 	mul.w	r2, r3, r2
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e004      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	613b      	str	r3, [r7, #16]
      break;
 80021ba:	e002      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c2:	693b      	ldr	r3, [r7, #16]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	0800305c 	.word	0x0800305c
 80021dc:	0800306c 	.word	0x0800306c
 80021e0:	003d0900 	.word	0x003d0900

080021e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <RCC_Delay+0x34>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <RCC_Delay+0x38>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002200:	bf00      	nop
  }
  while (Delay --);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <RCC_Delay+0x1c>
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000000 	.word	0x20000000
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d07d      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	61d3      	str	r3, [r2, #28]
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d118      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002280:	f7fe fb5e 	bl	8000940 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	e008      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7fe fb5a 	bl	8000940 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e06d      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02e      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d027      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe fb29 	bl	8000940 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fb25 	bl	8000940 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e036      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	4313      	orrs	r3, r2
 8002324:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	490b      	ldr	r1, [pc, #44]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	42420440 	.word	0x42420440

0800238c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e041      	b.n	8002422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe f9bc 	bl	8000730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f000 fab2 	bl	8002934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e041      	b.n	80024c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f839 	bl	80024c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f000 fa63 	bl	8002934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_TIM_PWM_Start+0x24>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e022      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d109      	bne.n	800251a <HAL_TIM_PWM_Start+0x3e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e015      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d109      	bne.n	8002534 <HAL_TIM_PWM_Start+0x58>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e008      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e05e      	b.n	800260c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_TIM_PWM_Start+0x82>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800255c:	e013      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Start+0x92>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256c:	e00b      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0xa2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257c:	e003      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fc50 	bl	8002e34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <HAL_TIM_PWM_Start+0x138>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d107      	bne.n	80025ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a18      	ldr	r2, [pc, #96]	; (8002614 <HAL_TIM_PWM_Start+0x138>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00e      	beq.n	80025d6 <HAL_TIM_PWM_Start+0xfa>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d009      	beq.n	80025d6 <HAL_TIM_PWM_Start+0xfa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a14      	ldr	r2, [pc, #80]	; (8002618 <HAL_TIM_PWM_Start+0x13c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d004      	beq.n	80025d6 <HAL_TIM_PWM_Start+0xfa>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_TIM_PWM_Start+0x140>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d111      	bne.n	80025fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b06      	cmp	r3, #6
 80025e6:	d010      	beq.n	800260a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f8:	e007      	b.n	800260a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400
 800261c:	40000800 	.word	0x40000800

08002620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800263a:	2302      	movs	r3, #2
 800263c:	e0ae      	b.n	800279c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	f200 809f 	bhi.w	800278c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002689 	.word	0x08002689
 8002658:	0800278d 	.word	0x0800278d
 800265c:	0800278d 	.word	0x0800278d
 8002660:	0800278d 	.word	0x0800278d
 8002664:	080026c9 	.word	0x080026c9
 8002668:	0800278d 	.word	0x0800278d
 800266c:	0800278d 	.word	0x0800278d
 8002670:	0800278d 	.word	0x0800278d
 8002674:	0800270b 	.word	0x0800270b
 8002678:	0800278d 	.word	0x0800278d
 800267c:	0800278d 	.word	0x0800278d
 8002680:	0800278d 	.word	0x0800278d
 8002684:	0800274b 	.word	0x0800274b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f9b2 	bl	80029f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0204 	bic.w	r2, r2, #4
 80026b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6999      	ldr	r1, [r3, #24]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	619a      	str	r2, [r3, #24]
      break;
 80026c6:	e064      	b.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f9f8 	bl	8002ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6999      	ldr	r1, [r3, #24]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	021a      	lsls	r2, r3, #8
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]
      break;
 8002708:	e043      	b.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fa41 	bl	8002b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0208 	orr.w	r2, r2, #8
 8002724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0204 	bic.w	r2, r2, #4
 8002734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69d9      	ldr	r1, [r3, #28]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	61da      	str	r2, [r3, #28]
      break;
 8002748:	e023      	b.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fa8b 	bl	8002c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69d9      	ldr	r1, [r3, #28]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	021a      	lsls	r2, r3, #8
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	61da      	str	r2, [r3, #28]
      break;
 800278a:	e002      	b.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	75fb      	strb	r3, [r7, #23]
      break;
 8002790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800279a:	7dfb      	ldrb	r3, [r7, #23]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_TIM_ConfigClockSource+0x1c>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0b4      	b.n	800292a <HAL_TIM_ConfigClockSource+0x186>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f8:	d03e      	beq.n	8002878 <HAL_TIM_ConfigClockSource+0xd4>
 80027fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fe:	f200 8087 	bhi.w	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002806:	f000 8086 	beq.w	8002916 <HAL_TIM_ConfigClockSource+0x172>
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d87f      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b70      	cmp	r3, #112	; 0x70
 8002812:	d01a      	beq.n	800284a <HAL_TIM_ConfigClockSource+0xa6>
 8002814:	2b70      	cmp	r3, #112	; 0x70
 8002816:	d87b      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b60      	cmp	r3, #96	; 0x60
 800281a:	d050      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x11a>
 800281c:	2b60      	cmp	r3, #96	; 0x60
 800281e:	d877      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b50      	cmp	r3, #80	; 0x50
 8002822:	d03c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0xfa>
 8002824:	2b50      	cmp	r3, #80	; 0x50
 8002826:	d873      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d058      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x13a>
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d86f      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b30      	cmp	r3, #48	; 0x30
 8002832:	d064      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x15a>
 8002834:	2b30      	cmp	r3, #48	; 0x30
 8002836:	d86b      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b20      	cmp	r3, #32
 800283a:	d060      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x15a>
 800283c:	2b20      	cmp	r3, #32
 800283e:	d867      	bhi.n	8002910 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05c      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x15a>
 8002844:	2b10      	cmp	r3, #16
 8002846:	d05a      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x15a>
 8002848:	e062      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800285a:	f000 facc 	bl	8002df6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800286c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	609a      	str	r2, [r3, #8]
      break;
 8002876:	e04f      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002888:	f000 fab5 	bl	8002df6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800289a:	609a      	str	r2, [r3, #8]
      break;
 800289c:	e03c      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028aa:	461a      	mov	r2, r3
 80028ac:	f000 fa2c 	bl	8002d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2150      	movs	r1, #80	; 0x50
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fa83 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 80028bc:	e02c      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 fa4a 	bl	8002d64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2160      	movs	r1, #96	; 0x60
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fa73 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 80028dc:	e01c      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 fa0c 	bl	8002d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fa63 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 80028fc:	e00c      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4619      	mov	r1, r3
 8002908:	4610      	mov	r0, r2
 800290a:	f000 fa5a 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 800290e:	e003      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      break;
 8002914:	e000      	b.n	8002918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a29      	ldr	r2, [pc, #164]	; (80029ec <TIM_Base_SetConfig+0xb8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00b      	beq.n	8002964 <TIM_Base_SetConfig+0x30>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d007      	beq.n	8002964 <TIM_Base_SetConfig+0x30>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <TIM_Base_SetConfig+0xbc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_Base_SetConfig+0x30>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a25      	ldr	r2, [pc, #148]	; (80029f4 <TIM_Base_SetConfig+0xc0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <TIM_Base_SetConfig+0xb8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00b      	beq.n	8002996 <TIM_Base_SetConfig+0x62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d007      	beq.n	8002996 <TIM_Base_SetConfig+0x62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <TIM_Base_SetConfig+0xbc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <TIM_Base_SetConfig+0x62>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <TIM_Base_SetConfig+0xc0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d108      	bne.n	80029a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <TIM_Base_SetConfig+0xb8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	615a      	str	r2, [r3, #20]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40012c00 	.word	0x40012c00
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40000800 	.word	0x40000800

080029f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f023 0201 	bic.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f023 0302 	bic.w	r3, r3, #2
 8002a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <TIM_OC1_SetConfig+0xc8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10c      	bne.n	8002a6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0308 	bic.w	r3, r3, #8
 8002a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <TIM_OC1_SetConfig+0xc8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d111      	bne.n	8002a9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	621a      	str	r2, [r3, #32]
}
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40012c00 	.word	0x40012c00

08002ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f023 0210 	bic.w	r2, r3, #16
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0320 	bic.w	r3, r3, #32
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <TIM_OC2_SetConfig+0xd0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d10d      	bne.n	8002b40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <TIM_OC2_SetConfig+0xd0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d113      	bne.n	8002b70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	40012c00 	.word	0x40012c00

08002b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <TIM_OC3_SetConfig+0xd0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10d      	bne.n	8002c12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <TIM_OC3_SetConfig+0xd0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d113      	bne.n	8002c42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00

08002c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	031b      	lsls	r3, r3, #12
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <TIM_OC4_SetConfig+0x98>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d109      	bne.n	8002ce0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	019b      	lsls	r3, r3, #6
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	621a      	str	r2, [r3, #32]
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	40012c00 	.word	0x40012c00

08002d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f023 0201 	bic.w	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f023 030a 	bic.w	r3, r3, #10
 8002d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	621a      	str	r2, [r3, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0210 	bic.w	r2, r3, #16
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	031b      	lsls	r3, r3, #12
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002da0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	621a      	str	r2, [r3, #32]
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f043 0307 	orr.w	r3, r3, #7
 8002de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2201      	movs	r2, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	401a      	ands	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e046      	b.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10c      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	40012c00 	.word	0x40012c00
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800

08002f38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e03d      	b.n	8002fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <memset>:
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4402      	add	r2, r0
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d100      	bne.n	8002fe4 <memset+0xa>
 8002fe2:	4770      	bx	lr
 8002fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe8:	e7f9      	b.n	8002fde <memset+0x4>
	...

08002fec <__libc_init_array>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	2600      	movs	r6, #0
 8002ff0:	4d0c      	ldr	r5, [pc, #48]	; (8003024 <__libc_init_array+0x38>)
 8002ff2:	4c0d      	ldr	r4, [pc, #52]	; (8003028 <__libc_init_array+0x3c>)
 8002ff4:	1b64      	subs	r4, r4, r5
 8002ff6:	10a4      	asrs	r4, r4, #2
 8002ff8:	42a6      	cmp	r6, r4
 8002ffa:	d109      	bne.n	8003010 <__libc_init_array+0x24>
 8002ffc:	f000 f81a 	bl	8003034 <_init>
 8003000:	2600      	movs	r6, #0
 8003002:	4d0a      	ldr	r5, [pc, #40]	; (800302c <__libc_init_array+0x40>)
 8003004:	4c0a      	ldr	r4, [pc, #40]	; (8003030 <__libc_init_array+0x44>)
 8003006:	1b64      	subs	r4, r4, r5
 8003008:	10a4      	asrs	r4, r4, #2
 800300a:	42a6      	cmp	r6, r4
 800300c:	d105      	bne.n	800301a <__libc_init_array+0x2e>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	f855 3b04 	ldr.w	r3, [r5], #4
 8003014:	4798      	blx	r3
 8003016:	3601      	adds	r6, #1
 8003018:	e7ee      	b.n	8002ff8 <__libc_init_array+0xc>
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	4798      	blx	r3
 8003020:	3601      	adds	r6, #1
 8003022:	e7f2      	b.n	800300a <__libc_init_array+0x1e>
 8003024:	08003070 	.word	0x08003070
 8003028:	08003070 	.word	0x08003070
 800302c:	08003070 	.word	0x08003070
 8003030:	08003074 	.word	0x08003074

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
