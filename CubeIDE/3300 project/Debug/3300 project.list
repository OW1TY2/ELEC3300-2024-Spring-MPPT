
3300 project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006354  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006538  08006538  00016538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006578  08006578  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006578  08006578  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006578  08006578  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800657c  0800657c  0001657c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000000c  0800658c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800658c  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001952d  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003240  00000000  00000000  000395a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a0  00000000  00000000  0003c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001424  00000000  00000000  0003e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003353  00000000  00000000  0003f5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dab6  00000000  00000000  000428ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abf87  00000000  00000000  000603b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ebc  00000000  00000000  0010c33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001131f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08006520 	.word	0x08006520

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08006520 	.word	0x08006520

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f001 faba 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f825 	bl	800027a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 fd4e 	bl	8000cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000234:	f000 fd12 	bl	8000c5c <MX_DMA_Init>
  MX_FSMC_Init();
 8000238:	f000 fdac 	bl	8000d94 <MX_FSMC_Init>
  MX_I2C1_Init();
 800023c:	f000 f930 	bl	80004a0 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8000240:	f000 f9c0 	bl	80005c4 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000244:	f000 f9ee 	bl	8000624 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000248:	f000 faa6 	bl	8000798 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800024c:	f000 fcb2 	bl	8000bb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000250:	f000 fcda 	bl	8000c08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000254:	f000 f874 	bl	8000340 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000258:	f000 f8b0 	bl	80003bc <MX_ADC2_Init>
  MX_RTC_Init();
 800025c:	f000 f94e 	bl	80004fc <MX_RTC_Init>
  MX_TIM1_Init();
 8000260:	f000 fa16 	bl	8000690 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000264:	f000 fbac 	bl	80009c0 <MX_TIM5_Init>
  MX_CAN_Init();
 8000268:	f000 f8e6 	bl	8000438 <MX_CAN_Init>
  MX_TIM3_Init();
 800026c:	f000 fae0 	bl	8000830 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000270:	f000 fb42 	bl	80008f8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000274:	f000 fc1a 	bl	8000aac <MX_TIM8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x54>

0800027a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	b096      	sub	sp, #88	; 0x58
 800027e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000280:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000284:	2228      	movs	r2, #40	; 0x28
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f006 f91d 	bl	80064c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	f107 031c 	add.w	r3, r7, #28
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
 80002ac:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002ae:	2305      	movs	r3, #5
 80002b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002bc:	2301      	movs	r3, #1
 80002be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	2302      	movs	r3, #2
 80002c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 fa5b 	bl	8002794 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e4:	f000 fdba 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fe:	f107 031c 	add.w	r3, r7, #28
 8000302:	2102      	movs	r1, #2
 8000304:	4618      	mov	r0, r3
 8000306:	f002 fcc7 	bl	8002c98 <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000310:	f000 fda4 	bl	8000e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000314:	2303      	movs	r3, #3
 8000316:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800031e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000322:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fe44 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000332:	f000 fd93 	bl	8000e5c <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3758      	adds	r7, #88	; 0x58
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_ADC1_Init+0x74>)
 8000352:	4a19      	ldr	r2, [pc, #100]	; (80003b8 <MX_ADC1_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <MX_ADC1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_ADC1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_ADC1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_ADC1_Init+0x74>)
 800036a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800036e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <MX_ADC1_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_ADC1_Init+0x74>)
 8000378:	2201      	movs	r2, #1
 800037a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <MX_ADC1_Init+0x74>)
 800037e:	f001 fa95 	bl	80018ac <HAL_ADC_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000388:	f000 fd68 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800038c:	230e      	movs	r3, #14
 800038e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000390:	2301      	movs	r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_ADC1_Init+0x74>)
 800039e:	f001 fb6f 	bl	8001a80 <HAL_ADC_ConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003a8:	f000 fd58 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000028 	.word	0x20000028
 80003b8:	40012400 	.word	0x40012400

080003bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_ADC2_Init+0x74>)
 80003ce:	4a19      	ldr	r2, [pc, #100]	; (8000434 <MX_ADC2_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <MX_ADC2_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <MX_ADC2_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_ADC2_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <MX_ADC2_Init+0x74>)
 80003e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ec:	4b10      	ldr	r3, [pc, #64]	; (8000430 <MX_ADC2_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_ADC2_Init+0x74>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <MX_ADC2_Init+0x74>)
 80003fa:	f001 fa57 	bl	80018ac <HAL_ADC_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000404:	f000 fd2a 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000408:	230b      	movs	r3, #11
 800040a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800040c:	2301      	movs	r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4619      	mov	r1, r3
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_ADC2_Init+0x74>)
 800041a:	f001 fb31 	bl	8001a80 <HAL_ADC_ConfigChannel>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000424:	f000 fd1a 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000058 	.word	0x20000058
 8000434:	40012800 	.word	0x40012800

08000438 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_CAN_Init+0x60>)
 800043e:	4a17      	ldr	r2, [pc, #92]	; (800049c <MX_CAN_Init+0x64>)
 8000440:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_CAN_Init+0x60>)
 8000444:	2210      	movs	r2, #16
 8000446:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <MX_CAN_Init+0x60>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_CAN_Init+0x60>)
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_CAN_Init+0x60>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_CAN_Init+0x60>)
 800045c:	2200      	movs	r2, #0
 800045e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <MX_CAN_Init+0x60>)
 8000462:	2200      	movs	r2, #0
 8000464:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_CAN_Init+0x60>)
 8000468:	2200      	movs	r2, #0
 800046a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <MX_CAN_Init+0x60>)
 800046e:	2200      	movs	r2, #0
 8000470:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_CAN_Init+0x60>)
 8000474:	2200      	movs	r2, #0
 8000476:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <MX_CAN_Init+0x60>)
 800047a:	2200      	movs	r2, #0
 800047c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_CAN_Init+0x60>)
 8000480:	2200      	movs	r2, #0
 8000482:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <MX_CAN_Init+0x60>)
 8000486:	f001 fc34 	bl	8001cf2 <HAL_CAN_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000490:	f000 fce4 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000088 	.word	0x20000088
 800049c:	40006400 	.word	0x40006400

080004a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <MX_I2C1_Init+0x54>)
 80004a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004ac:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <MX_I2C1_Init+0x58>)
 80004ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004de:	f002 f809 	bl	80024f4 <HAL_I2C_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004e8:	f000 fcb8 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000b0 	.word	0x200000b0
 80004f4:	40005400 	.word	0x40005400
 80004f8:	000186a0 	.word	0x000186a0

080004fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	2100      	movs	r1, #0
 8000508:	460a      	mov	r2, r1
 800050a:	801a      	strh	r2, [r3, #0]
 800050c:	460a      	mov	r2, r1
 800050e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800051c:	4b27      	ldr	r3, [pc, #156]	; (80005bc <MX_RTC_Init+0xc0>)
 800051e:	4a28      	ldr	r2, [pc, #160]	; (80005c0 <MX_RTC_Init+0xc4>)
 8000520:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000522:	4b26      	ldr	r3, [pc, #152]	; (80005bc <MX_RTC_Init+0xc0>)
 8000524:	f04f 32ff 	mov.w	r2, #4294967295
 8000528:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <MX_RTC_Init+0xc0>)
 800052c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000530:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000532:	4822      	ldr	r0, [pc, #136]	; (80005bc <MX_RTC_Init+0xc0>)
 8000534:	f002 fecc 	bl	80032d0 <HAL_RTC_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800053e:	f000 fc8d 	bl	8000e5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000542:	2300      	movs	r3, #0
 8000544:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000546:	2300      	movs	r3, #0
 8000548:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800054a:	2300      	movs	r3, #0
 800054c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	4819      	ldr	r0, [pc, #100]	; (80005bc <MX_RTC_Init+0xc0>)
 8000558:	f002 ff46 	bl	80033e8 <HAL_RTC_SetTime>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000562:	f000 fc7b 	bl	8000e5c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000566:	2301      	movs	r3, #1
 8000568:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800056a:	2301      	movs	r3, #1
 800056c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800056e:	2301      	movs	r3, #1
 8000570:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000572:	2300      	movs	r3, #0
 8000574:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2201      	movs	r2, #1
 800057c:	4619      	mov	r1, r3
 800057e:	480f      	ldr	r0, [pc, #60]	; (80005bc <MX_RTC_Init+0xc0>)
 8000580:	f003 f8a2 	bl	80036c8 <HAL_RTC_SetDate>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800058a:	f000 fc67 	bl	8000e5c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800058e:	2300      	movs	r3, #0
 8000590:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000592:	2300      	movs	r3, #0
 8000594:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000596:	2300      	movs	r3, #0
 8000598:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_RTC_Init+0xc0>)
 80005a6:	f003 f945 	bl	8003834 <HAL_RTC_SetAlarm>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80005b0:	f000 fc54 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000104 	.word	0x20000104
 80005c0:	40002800 	.word	0x40002800

080005c4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_SDIO_SD_Init+0x58>)
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <MX_SDIO_SD_Init+0x5c>)
 80005cc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <MX_SDIO_SD_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_SDIO_SD_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_SDIO_SD_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_SDIO_SD_Init+0x58>)
 80005e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e6:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_SDIO_SD_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_SDIO_SD_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <MX_SDIO_SD_Init+0x58>)
 80005f6:	f003 fc57 	bl	8003ea8 <HAL_SD_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 8000600:	f000 fc2c 	bl	8000e5c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_SDIO_SD_Init+0x58>)
 800060a:	f003 fea1 	bl	8004350 <HAL_SD_ConfigWideBusOperation>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_SDIO_SD_Init+0x54>
  {
    Error_Handler();
 8000614:	f000 fc22 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000118 	.word	0x20000118
 8000620:	40018000 	.word	0x40018000

08000624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_SPI1_Init+0x64>)
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <MX_SPI1_Init+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_SPI1_Init+0x64>)
 8000630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_SPI1_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_SPI1_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_SPI1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_SPI1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_SPI1_Init+0x64>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_SPI1_Init+0x64>)
 8000658:	2208      	movs	r2, #8
 800065a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_SPI1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_SPI1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_SPI1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_SPI1_Init+0x64>)
 8000670:	220a      	movs	r2, #10
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_SPI1_Init+0x64>)
 8000676:	f004 f9ca 	bl	8004a0e <HAL_SPI_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000680:	f000 fbec 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000019c 	.word	0x2000019c
 800068c:	40013000 	.word	0x40013000

08000690 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b092      	sub	sp, #72	; 0x48
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]
 80006b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2220      	movs	r2, #32
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 ff04 	bl	80064c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c0:	4b33      	ldr	r3, [pc, #204]	; (8000790 <MX_TIM1_Init+0x100>)
 80006c2:	4a34      	ldr	r2, [pc, #208]	; (8000794 <MX_TIM1_Init+0x104>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <MX_TIM1_Init+0x100>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b30      	ldr	r3, [pc, #192]	; (8000790 <MX_TIM1_Init+0x100>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <MX_TIM1_Init+0x100>)
 80006d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_TIM1_Init+0x100>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_TIM1_Init+0x100>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_TIM1_Init+0x100>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ec:	4828      	ldr	r0, [pc, #160]	; (8000790 <MX_TIM1_Init+0x100>)
 80006ee:	f004 fafd 	bl	8004cec <HAL_TIM_PWM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006f8:	f000 fbb0 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000708:	4619      	mov	r1, r3
 800070a:	4821      	ldr	r0, [pc, #132]	; (8000790 <MX_TIM1_Init+0x100>)
 800070c:	f004 ffe0 	bl	80056d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000716:	f000 fba1 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071a:	2360      	movs	r3, #96	; 0x60
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000726:	2300      	movs	r3, #0
 8000728:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800072a:	2304      	movs	r3, #4
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	4814      	ldr	r0, [pc, #80]	; (8000790 <MX_TIM1_Init+0x100>)
 8000740:	f004 fb80 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800074a:	f000 fb87 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <MX_TIM1_Init+0x100>)
 8000772:	f005 f819 	bl	80057a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800077c:	f000 fb6e 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <MX_TIM1_Init+0x100>)
 8000782:	f000 fe2f 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8000786:	bf00      	nop
 8000788:	3748      	adds	r7, #72	; 0x48
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001f4 	.word	0x200001f4
 8000794:	40012c00 	.word	0x40012c00

08000798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_TIM2_Init+0x94>)
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_TIM2_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_TIM2_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_TIM2_Init+0x94>)
 80007ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_TIM2_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_TIM2_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_TIM2_Init+0x94>)
 80007de:	f004 f9e7 	bl	8004bb0 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007e8:	f000 fb38 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_TIM2_Init+0x94>)
 80007fa:	f004 fbe5 	bl	8004fc8 <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 fb2a 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_TIM2_Init+0x94>)
 8000816:	f004 ff5b 	bl	80056d0 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 fb1c 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000023c 	.word	0x2000023c

08000830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000852:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <MX_TIM3_Init+0xc0>)
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <MX_TIM3_Init+0xc4>)
 8000856:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <MX_TIM3_Init+0xc0>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <MX_TIM3_Init+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_TIM3_Init+0xc0>)
 8000866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_TIM3_Init+0xc0>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_TIM3_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000878:	481d      	ldr	r0, [pc, #116]	; (80008f0 <MX_TIM3_Init+0xc0>)
 800087a:	f004 fa37 	bl	8004cec <HAL_TIM_PWM_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000884:	f000 faea 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4619      	mov	r1, r3
 8000896:	4816      	ldr	r0, [pc, #88]	; (80008f0 <MX_TIM3_Init+0xc0>)
 8000898:	f004 ff1a 	bl	80056d0 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008a2:	f000 fadb 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a6:	2360      	movs	r3, #96	; 0x60
 80008a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_TIM3_Init+0xc0>)
 80008be:	f004 fac1 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80008c8:	f000 fac8 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2204      	movs	r2, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM3_Init+0xc0>)
 80008d4:	f004 fab6 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008de:	f000 fabd 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM3_Init+0xc0>)
 80008e4:	f000 fd7e 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000284 	.word	0x20000284
 80008f4:	40000400 	.word	0x40000400

080008f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_TIM4_Init+0xc0>)
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <MX_TIM4_Init+0xc4>)
 800091e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_TIM4_Init+0xc0>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MX_TIM4_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_TIM4_Init+0xc0>)
 800092e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000932:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_TIM4_Init+0xc0>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_TIM4_Init+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000940:	481d      	ldr	r0, [pc, #116]	; (80009b8 <MX_TIM4_Init+0xc0>)
 8000942:	f004 f9d3 	bl	8004cec <HAL_TIM_PWM_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800094c:	f000 fa86 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4619      	mov	r1, r3
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <MX_TIM4_Init+0xc0>)
 8000960:	f004 feb6 	bl	80056d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800096a:	f000 fa77 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	; 0x60
 8000970:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2208      	movs	r2, #8
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_TIM4_Init+0xc0>)
 8000986:	f004 fa5d 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000990:	f000 fa64 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	220c      	movs	r2, #12
 8000998:	4619      	mov	r1, r3
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <MX_TIM4_Init+0xc0>)
 800099c:	f004 fa52 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80009a6:	f000 fa59 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <MX_TIM4_Init+0xc0>)
 80009ac:	f000 fd1a 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200002cc 	.word	0x200002cc
 80009bc:	40000800 	.word	0x40000800

080009c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009f0:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 80009f2:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <MX_TIM5_Init+0xe8>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a16:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a18:	f004 f8ca 	bl	8004bb0 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000a22:	f000 fa1b 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a34:	f004 fac8 	bl	8004fc8 <HAL_TIM_ConfigClockSource>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000a3e:	f000 fa0d 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a42:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a44:	f004 f952 	bl	8004cec <HAL_TIM_PWM_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000a4e:	f000 fa05 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a62:	f004 fe35 	bl	80056d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000a6c:	f000 f9f6 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a70:	2360      	movs	r3, #96	; 0x60
 8000a72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2204      	movs	r2, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a88:	f004 f9dc 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000a92:	f000 f9e3 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MX_TIM5_Init+0xe4>)
 8000a98:	f000 fca4 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8000a9c:	bf00      	nop
 8000a9e:	3738      	adds	r7, #56	; 0x38
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000314 	.word	0x20000314
 8000aa8:	40000c00 	.word	0x40000c00

08000aac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b092      	sub	sp, #72	; 0x48
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 fcf6 	bl	80064c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000adc:	4b33      	ldr	r3, [pc, #204]	; (8000bac <MX_TIM8_Init+0x100>)
 8000ade:	4a34      	ldr	r2, [pc, #208]	; (8000bb0 <MX_TIM8_Init+0x104>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ae2:	4b32      	ldr	r3, [pc, #200]	; (8000bac <MX_TIM8_Init+0x100>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <MX_TIM8_Init+0x100>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <MX_TIM8_Init+0x100>)
 8000af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <MX_TIM8_Init+0x100>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <MX_TIM8_Init+0x100>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <MX_TIM8_Init+0x100>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000b08:	4828      	ldr	r0, [pc, #160]	; (8000bac <MX_TIM8_Init+0x100>)
 8000b0a:	f004 f8a0 	bl	8004c4e <HAL_TIM_OC_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000b14:	f000 f9a2 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b24:	4619      	mov	r1, r3
 8000b26:	4821      	ldr	r0, [pc, #132]	; (8000bac <MX_TIM8_Init+0x100>)
 8000b28:	f004 fdd2 	bl	80056d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000b32:	f000 f993 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4814      	ldr	r0, [pc, #80]	; (8000bac <MX_TIM8_Init+0x100>)
 8000b5c:	f004 f916 	bl	8004d8c <HAL_TIM_OC_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000b66:	f000 f979 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM8_Init+0x100>)
 8000b8e:	f004 fe0b 	bl	80057a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000b98:	f000 f960 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM8_Init+0x100>)
 8000b9e:	f000 fc21 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3748      	adds	r7, #72	; 0x48
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000035c 	.word	0x2000035c
 8000bb0:	40013400 	.word	0x40013400

08000bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART1_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bec:	f004 fe2d 	bl	800584a <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bf6:	f000 f931 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200003a4 	.word	0x200003a4
 8000c04:	40013800 	.word	0x40013800

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_USART2_UART_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f004 fe03 	bl	800584a <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f000 f907 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200003ec 	.word	0x200003ec
 8000c58:	40004400 	.word	0x40004400

08000c5c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_DMA_Init+0x68>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <MX_DMA_Init+0x68>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_DMA_Init+0x68>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_DMA_Init+0x70>)
 8000c7e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c86:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000c8a:	2240      	movs	r2, #64	; 0x40
 8000c8c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MX_DMA_Init+0x6c>)
 8000cae:	f001 f9ff 	bl	80020b0 <HAL_DMA_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_DMA_Init+0x60>
  {
    Error_Handler( );
 8000cb8:	f000 f8d0 	bl	8000e5c <Error_Handler>
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	20000434 	.word	0x20000434
 8000ccc:	40020008 	.word	0x40020008

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_GPIO_Init+0xbc>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2110      	movs	r1, #16
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <MX_GPIO_Init+0xc0>)
 8000d62:	f001 fbaf 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000d66:	2310      	movs	r3, #16
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2302      	movs	r3, #2
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_GPIO_Init+0xc0>)
 8000d7e:	f001 fa0d 	bl	800219c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010800 	.word	0x40010800

08000d94 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000db2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <MX_FSMC_Init+0xc0>)
 8000db8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000e12:	23ff      	movs	r3, #255	; 0xff
 8000e14:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e1e:	2311      	movs	r3, #17
 8000e20:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <MX_FSMC_Init+0xbc>)
 8000e2e:	f003 fe72 	bl	8004b16 <HAL_SRAM_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000e38:	f000 f810 	bl	8000e5c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_FSMC_Init+0xc4>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <MX_FSMC_Init+0xc4>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000478 	.word	0x20000478
 8000e54:	a0000104 	.word	0xa0000104
 8000e58:	40010000 	.word	0x40010000

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_MspInit+0x60>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_MspInit+0x60>)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000

08000ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a3e      	ldr	r2, [pc, #248]	; (8000fe0 <HAL_ADC_MspInit+0x114>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d14e      	bne.n	8000f8a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eec:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a3c      	ldr	r2, [pc, #240]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b37      	ldr	r3, [pc, #220]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a36      	ldr	r2, [pc, #216]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1c:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a2a      	ldr	r2, [pc, #168]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = LDR1_ADC_Pin;
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	2303      	movs	r3, #3
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LDR1_ADC_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <HAL_ADC_MspInit+0x11c>)
 8000f5c:	f001 f91e 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR2_ADC_Pin|LDR3_ADC_Pin;
 8000f60:	2330      	movs	r3, #48	; 0x30
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f64:	2303      	movs	r3, #3
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	481f      	ldr	r0, [pc, #124]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000f70:	f001 f914 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR4_ADC_Pin;
 8000f74:	2301      	movs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LDR4_ADC_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4619      	mov	r1, r3
 8000f82:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <HAL_ADC_MspInit+0x124>)
 8000f84:	f001 f90a 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f88:	e026      	b.n	8000fd8 <HAL_ADC_MspInit+0x10c>
  else if(hadc->Instance==ADC2)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <HAL_ADC_MspInit+0x128>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d121      	bne.n	8000fd8 <HAL_ADC_MspInit+0x10c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_ADC_MspInit+0x118>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin|INPUT_VOLTAGE_ADC_Pin|OUTPUT_VOLTAGE_ADC_Pin|OUTPUT_CURRENT_ADC_Pin;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <HAL_ADC_MspInit+0x120>)
 8000fd4:	f001 f8e2 	bl	800219c <HAL_GPIO_Init>
}
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40012400 	.word	0x40012400
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	40012800 	.word	0x40012800

08000ff8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <HAL_CAN_MspInit+0x8c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d131      	bne.n	800107c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_CAN_MspInit+0x90>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_CAN_MspInit+0x90>)
 800101e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001022:	61d3      	str	r3, [r2, #28]
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_CAN_MspInit+0x90>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_CAN_MspInit+0x90>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_CAN_MspInit+0x90>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_CAN_MspInit+0x90>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800104c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <HAL_CAN_MspInit+0x94>)
 800105e:	f001 f89d 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_CAN_MspInit+0x94>)
 8001078:	f001 f890 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40006400 	.word	0x40006400
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800

08001090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_I2C_MspInit+0x70>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d123      	bne.n	80010f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = CPT_SCL_Pin|CPT_SDA_Pin;
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <HAL_I2C_MspInit+0x78>)
 80010dc:	f001 f85e 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40005400 	.word	0x40005400
 8001104:	40021000 	.word	0x40021000
 8001108:	40010c00 	.word	0x40010c00

0800110c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_RTC_MspInit+0x3c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d110      	bne.n	8001140 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800111e:	f001 fb2d 	bl	800277c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_RTC_MspInit+0x40>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <HAL_RTC_MspInit+0x40>)
 8001128:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_RTC_MspInit+0x40>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_RTC_MspInit+0x44>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40002800 	.word	0x40002800
 800114c:	40021000 	.word	0x40021000
 8001150:	4242043c 	.word	0x4242043c

08001154 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_SD_MspInit+0xa4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d13c      	bne.n	80011ee <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_SD_MspInit+0xa8>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	4a20      	ldr	r2, [pc, #128]	; (80011fc <HAL_SD_MspInit+0xa8>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6153      	str	r3, [r2, #20]
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_SD_MspInit+0xa8>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_SD_MspInit+0xa8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_SD_MspInit+0xa8>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_SD_MspInit+0xa8>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_SD_MspInit+0xa8>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_SD_MspInit+0xa8>)
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_SD_MspInit+0xa8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011bc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011c0:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <HAL_SD_MspInit+0xac>)
 80011d2:	f000 ffe3 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011d6:	2304      	movs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <HAL_SD_MspInit+0xb0>)
 80011ea:	f000 ffd7 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40018000 	.word	0x40018000
 80011fc:	40021000 	.word	0x40021000
 8001200:	40011000 	.word	0x40011000
 8001204:	40011400 	.word	0x40011400

08001208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <HAL_SPI_MspInit+0xa4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d13d      	bne.n	80012a4 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_SPI_MspInit+0xa8>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <HAL_SPI_MspInit+0xa8>)
 800122e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <HAL_SPI_MspInit+0xa8>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_SPI_MspInit+0xa8>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_SPI_MspInit+0xa8>)
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_SPI_MspInit+0xa8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001258:	2328      	movs	r3, #40	; 0x28
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4812      	ldr	r0, [pc, #72]	; (80012b4 <HAL_SPI_MspInit+0xac>)
 800126c:	f000 ff96 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001270:	2310      	movs	r3, #16
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <HAL_SPI_MspInit+0xac>)
 8001284:	f000 ff8a 	bl	800219c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_SPI_MspInit+0xb0>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_SPI_MspInit+0xb0>)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013000 	.word	0x40013000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010c00 	.word	0x40010c00
 80012b8:	40010000 	.word	0x40010000

080012bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <HAL_TIM_PWM_MspInit+0x7c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10c      	bne.n	80012e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	4a1a      	ldr	r2, [pc, #104]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d8:	6193      	str	r3, [r2, #24]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012e6:	e022      	b.n	800132e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_TIM_PWM_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10c      	bne.n	800130c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
}
 800130a:	e010      	b.n	800132e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_TIM_PWM_MspInit+0x88>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10b      	bne.n	800132e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_TIM_PWM_MspInit+0x80>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40012c00 	.word	0x40012c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40000400 	.word	0x40000400
 8001344:	40000800 	.word	0x40000800

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001358:	d10c      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_TIM_Base_MspInit+0x58>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_TIM_Base_MspInit+0x58>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_TIM_Base_MspInit+0x58>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001372:	e010      	b.n	8001396 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_TIM_Base_MspInit+0x5c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d10b      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_TIM_Base_MspInit+0x58>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_TIM_Base_MspInit+0x58>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_TIM_Base_MspInit+0x58>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40000c00 	.word	0x40000c00

080013a8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_TIM_OC_MspInit+0x34>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10b      	bne.n	80013d2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_TIM_OC_MspInit+0x38>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_TIM_OC_MspInit+0x38>)
 80013c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_TIM_OC_MspInit+0x38>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40013400 	.word	0x40013400
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_TIM_MspPostInit+0x14c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d119      	bne.n	8001438 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b4b      	ldr	r3, [pc, #300]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a4a      	ldr	r2, [pc, #296]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b48      	ldr	r3, [pc, #288]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MPPT_PWM_Pin;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MPPT_PWM_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	4619      	mov	r1, r3
 8001430:	4841      	ldr	r0, [pc, #260]	; (8001538 <HAL_TIM_MspPostInit+0x154>)
 8001432:	f000 feb3 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001436:	e077      	b.n	8001528 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_TIM_MspPostInit+0x158>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d118      	bne.n	8001474 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4a3b      	ldr	r2, [pc, #236]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6193      	str	r3, [r2, #24]
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_PITCH_1_Pin|PWM_PITCH_2_Pin;
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2302      	movs	r3, #2
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	4619      	mov	r1, r3
 800146c:	4832      	ldr	r0, [pc, #200]	; (8001538 <HAL_TIM_MspPostInit+0x154>)
 800146e:	f000 fe95 	bl	800219c <HAL_GPIO_Init>
}
 8001472:	e059      	b.n	8001528 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM4)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a31      	ldr	r2, [pc, #196]	; (8001540 <HAL_TIM_MspPostInit+0x15c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d119      	bne.n	80014b2 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_YAW_1_Pin|PWM_YAW_2_Pin;
 8001496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2302      	movs	r3, #2
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	4619      	mov	r1, r3
 80014aa:	4826      	ldr	r0, [pc, #152]	; (8001544 <HAL_TIM_MspPostInit+0x160>)
 80014ac:	f000 fe76 	bl	800219c <HAL_GPIO_Init>
}
 80014b0:	e03a      	b.n	8001528 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM5)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <HAL_TIM_MspPostInit+0x164>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d118      	bne.n	80014ee <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4619      	mov	r1, r3
 80014e6:	4814      	ldr	r0, [pc, #80]	; (8001538 <HAL_TIM_MspPostInit+0x154>)
 80014e8:	f000 fe58 	bl	800219c <HAL_GPIO_Init>
}
 80014ec:	e01c      	b.n	8001528 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM8)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <HAL_TIM_MspPostInit+0x168>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d117      	bne.n	8001528 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_TIM_MspPostInit+0x150>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001510:	2340      	movs	r3, #64	; 0x40
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2302      	movs	r3, #2
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f107 0320 	add.w	r3, r7, #32
 8001520:	4619      	mov	r1, r3
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <HAL_TIM_MspPostInit+0x16c>)
 8001524:	f000 fe3a 	bl	800219c <HAL_GPIO_Init>
}
 8001528:	bf00      	nop
 800152a:	3730      	adds	r7, #48	; 0x30
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40012c00 	.word	0x40012c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800
 800153c:	40000400 	.word	0x40000400
 8001540:	40000800 	.word	0x40000800
 8001544:	40010c00 	.word	0x40010c00
 8001548:	40000c00 	.word	0x40000c00
 800154c:	40013400 	.word	0x40013400
 8001550:	40011000 	.word	0x40011000

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a37      	ldr	r2, [pc, #220]	; (800164c <HAL_UART_MspInit+0xf8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d132      	bne.n	80015da <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_UART_MspInit+0xfc>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a35      	ldr	r2, [pc, #212]	; (8001650 <HAL_UART_MspInit+0xfc>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b33      	ldr	r3, [pc, #204]	; (8001650 <HAL_UART_MspInit+0xfc>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_UART_MspInit+0xfc>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <HAL_UART_MspInit+0xfc>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_UART_MspInit+0xfc>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4826      	ldr	r0, [pc, #152]	; (8001654 <HAL_UART_MspInit+0x100>)
 80015ba:	f000 fdef 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4820      	ldr	r0, [pc, #128]	; (8001654 <HAL_UART_MspInit+0x100>)
 80015d4:	f000 fde2 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d8:	e034      	b.n	8001644 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_UART_MspInit+0x104>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d12f      	bne.n	8001644 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_UART_MspInit+0xfc>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_UART_MspInit+0xfc>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ee:	61d3      	str	r3, [r2, #28]
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_UART_MspInit+0xfc>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_UART_MspInit+0xfc>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_UART_MspInit+0xfc>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_UART_MspInit+0xfc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001614:	2304      	movs	r3, #4
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	4619      	mov	r1, r3
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_UART_MspInit+0x100>)
 8001628:	f000 fdb8 	bl	800219c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800162c:	2308      	movs	r3, #8
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_UART_MspInit+0x100>)
 8001640:	f000 fdac 	bl	800219c <HAL_GPIO_Init>
}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40013800 	.word	0x40013800
 8001650:	40021000 	.word	0x40021000
 8001654:	40010800 	.word	0x40010800
 8001658:	40004400 	.word	0x40004400

0800165c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_FSMC_MspInit+0x78>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d129      	bne.n	80016cc <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_FSMC_MspInit+0x78>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_FSMC_MspInit+0x7c>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <HAL_FSMC_MspInit+0x7c>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001688:	6153      	str	r3, [r2, #20]
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_FSMC_MspInit+0x7c>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001696:	f64f 7380 	movw	r3, #65408	; 0xff80
 800169a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4619      	mov	r1, r3
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <HAL_FSMC_MspInit+0x80>)
 80016ac:	f000 fd76 	bl	800219c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80016b0:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80016b4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	4806      	ldr	r0, [pc, #24]	; (80016e0 <HAL_FSMC_MspInit+0x84>)
 80016c6:	f000 fd69 	bl	800219c <HAL_GPIO_Init>
 80016ca:	e000      	b.n	80016ce <HAL_FSMC_MspInit+0x72>
    return;
 80016cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200004c0 	.word	0x200004c0
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40011800 	.word	0x40011800
 80016e0:	40011400 	.word	0x40011400

080016e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016ec:	f7ff ffb6 	bl	800165c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173e:	f000 f875 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}

08001746 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
	...

08001754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001754:	f7ff fff7 	bl	8001746 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480b      	ldr	r0, [pc, #44]	; (8001788 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800175a:	490c      	ldr	r1, [pc, #48]	; (800178c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <LoopFillZerobss+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001770:	4c09      	ldr	r4, [pc, #36]	; (8001798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177e:	f004 feab 	bl	80064d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001782:	f7fe fd4f 	bl	8000224 <main>
  bx lr
 8001786:	4770      	bx	lr
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001790:	08006580 	.word	0x08006580
  ldr r2, =_sbss
 8001794:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001798:	200004c8 	.word	0x200004c8

0800179c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC1_2_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_Init+0x28>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_Init+0x28>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 fc49 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b6:	200f      	movs	r0, #15
 80017b8:	f000 f808 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017bc:	f7ff fb54 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40022000 	.word	0x40022000

080017cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x54>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x58>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fc53 	bl	8002096 <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00e      	b.n	8001818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d80a      	bhi.n	8001816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f000 fc29 	bl	800205e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_InitTick+0x5c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000000 	.word	0x20000000
 8001824:	20000008 	.word	0x20000008
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x1c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x20>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_IncTick+0x20>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	20000008 	.word	0x20000008
 800184c:	200004c4 	.word	0x200004c4

08001850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <HAL_GetTick+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	200004c4 	.word	0x200004c4

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff fff0 	bl	8001850 <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffe0 	bl	8001850 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008

080018ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0ce      	b.n	8001a6c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff faee 	bl	8000ecc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f9bd 	bl	8001c70 <ADC_ConversionStop_Disable>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 80a9 	bne.w	8001a5a <HAL_ADC_Init+0x1ae>
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 80a5 	bne.w	8001a5a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001918:	f023 0302 	bic.w	r3, r3, #2
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4951      	ldr	r1, [pc, #324]	; (8001a74 <HAL_ADC_Init+0x1c8>)
 800192e:	428b      	cmp	r3, r1
 8001930:	d10a      	bne.n	8001948 <HAL_ADC_Init+0x9c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800193a:	d002      	beq.n	8001942 <HAL_ADC_Init+0x96>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	e004      	b.n	800194c <HAL_ADC_Init+0xa0>
 8001942:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001946:	e001      	b.n	800194c <HAL_ADC_Init+0xa0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800194c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7b1b      	ldrb	r3, [r3, #12]
 8001952:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001954:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4313      	orrs	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001964:	d003      	beq.n	800196e <HAL_ADC_Init+0xc2>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d102      	bne.n	8001974 <HAL_ADC_Init+0xc8>
 800196e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001972:	e000      	b.n	8001976 <HAL_ADC_Init+0xca>
 8001974:	2300      	movs	r3, #0
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7d1b      	ldrb	r3, [r3, #20]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d119      	bne.n	80019b8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7b1b      	ldrb	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d109      	bne.n	80019a0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	3b01      	subs	r3, #1
 8001992:	035a      	lsls	r2, r3, #13
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	e00b      	b.n	80019b8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_ADC_Init+0x1cc>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	430b      	orrs	r3, r1
 80019de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e8:	d003      	beq.n	80019f2 <HAL_ADC_Init+0x146>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d104      	bne.n	80019fc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	051b      	lsls	r3, r3, #20
 80019fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_ADC_Init+0x1d0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d10b      	bne.n	8001a38 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a36:	e018      	b.n	8001a6a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	f023 0312 	bic.w	r3, r3, #18
 8001a40:	f043 0210 	orr.w	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a58:	e007      	b.n	8001a6a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	f043 0210 	orr.w	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40013c00 	.word	0x40013c00
 8001a78:	ffe1f7fd 	.word	0xffe1f7fd
 8001a7c:	ff1f0efe 	.word	0xff1f0efe

08001a80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x20>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0dc      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1da>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d81c      	bhi.n	8001aea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b05      	subs	r3, #5
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4019      	ands	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b05      	subs	r3, #5
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae8:	e03c      	b.n	8001b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d81c      	bhi.n	8001b2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b23      	subs	r3, #35	; 0x23
 8001b04:	221f      	movs	r2, #31
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4019      	ands	r1, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b23      	subs	r3, #35	; 0x23
 8001b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
 8001b2a:	e01b      	b.n	8001b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b41      	subs	r3, #65	; 0x41
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4019      	ands	r1, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b41      	subs	r3, #65	; 0x41
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d91c      	bls.n	8001ba6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	2207      	movs	r2, #7
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4019      	ands	r1, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6898      	ldr	r0, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	e019      	b.n	8001bda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4019      	ands	r1, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6898      	ldr	r0, [r3, #8]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d003      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be6:	2b11      	cmp	r3, #17
 8001be8:	d132      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d125      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d126      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d11a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	0c9a      	lsrs	r2, r3, #18
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x1b2>
 8001c3e:	e007      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40012400 	.word	0x40012400
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	431bde83 	.word	0x431bde83

08001c70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d12e      	bne.n	8001ce8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c9a:	f7ff fdd9 	bl	8001850 <HAL_GetTick>
 8001c9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ca0:	e01b      	b.n	8001cda <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ca2:	f7ff fdd5 	bl	8001850 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d914      	bls.n	8001cda <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10d      	bne.n	8001cda <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e007      	b.n	8001cea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d0dc      	beq.n	8001ca2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0ed      	b.n	8001ee0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff f971 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d26:	f7ff fd93 	bl	8001850 <HAL_GetTick>
 8001d2a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2c:	e012      	b.n	8001d54 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d2e:	f7ff fd8f 	bl	8001850 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b0a      	cmp	r3, #10
 8001d3a:	d90b      	bls.n	8001d54 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0c5      	b.n	8001ee0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0e5      	beq.n	8001d2e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0202 	bic.w	r2, r2, #2
 8001d70:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d72:	f7ff fd6d 	bl	8001850 <HAL_GetTick>
 8001d76:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d78:	e012      	b.n	8001da0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7a:	f7ff fd69 	bl	8001850 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b0a      	cmp	r3, #10
 8001d86:	d90b      	bls.n	8001da0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2205      	movs	r2, #5
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e09f      	b.n	8001ee0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e5      	bne.n	8001d7a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7e1b      	ldrb	r3, [r3, #24]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e007      	b.n	8001dd8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e5b      	ldrb	r3, [r3, #25]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7e9b      	ldrb	r3, [r3, #26]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0220 	bic.w	r2, r2, #32
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7edb      	ldrb	r3, [r3, #27]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0210 	bic.w	r2, r2, #16
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0210 	orr.w	r2, r2, #16
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7f1b      	ldrb	r3, [r3, #28]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0208 	orr.w	r2, r2, #8
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0208 	bic.w	r2, r2, #8
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7f5b      	ldrb	r3, [r3, #29]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d108      	bne.n	8001e9a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0204 	orr.w	r2, r2, #4
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e007      	b.n	8001eaa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0204 	bic.w	r2, r2, #4
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	ea42 0103 	orr.w	r1, r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff90 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff49 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff5e 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff90 	bl	8001fa0 <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5f 	bl	8001f4c <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffb0 	bl	8002004 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e059      	b.n	800217a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_DMA_Init+0xd4>)
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d80f      	bhi.n	80020f2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_DMA_Init+0xd8>)
 80020da:	4413      	add	r3, r2
 80020dc:	4a2b      	ldr	r2, [pc, #172]	; (800218c <HAL_DMA_Init+0xdc>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a28      	ldr	r2, [pc, #160]	; (8002190 <HAL_DMA_Init+0xe0>)
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80020f0:	e00e      	b.n	8002110 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_DMA_Init+0xe4>)
 80020fa:	4413      	add	r3, r2
 80020fc:	4a23      	ldr	r2, [pc, #140]	; (800218c <HAL_DMA_Init+0xdc>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	009a      	lsls	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_DMA_Init+0xe8>)
 800210e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002126:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800212a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40020407 	.word	0x40020407
 8002188:	bffdfff8 	.word	0xbffdfff8
 800218c:	cccccccd 	.word	0xcccccccd
 8002190:	40020000 	.word	0x40020000
 8002194:	bffdfbf8 	.word	0xbffdfbf8
 8002198:	40020400 	.word	0x40020400

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b08b      	sub	sp, #44	; 0x2c
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	e179      	b.n	80024a4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b0:	2201      	movs	r2, #1
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f040 8168 	bne.w	800249e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a96      	ldr	r2, [pc, #600]	; (800242c <HAL_GPIO_Init+0x290>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d05e      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021d8:	4a94      	ldr	r2, [pc, #592]	; (800242c <HAL_GPIO_Init+0x290>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d875      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021de:	4a94      	ldr	r2, [pc, #592]	; (8002430 <HAL_GPIO_Init+0x294>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d058      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021e4:	4a92      	ldr	r2, [pc, #584]	; (8002430 <HAL_GPIO_Init+0x294>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d86f      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021ea:	4a92      	ldr	r2, [pc, #584]	; (8002434 <HAL_GPIO_Init+0x298>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d052      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021f0:	4a90      	ldr	r2, [pc, #576]	; (8002434 <HAL_GPIO_Init+0x298>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d869      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 80021f6:	4a90      	ldr	r2, [pc, #576]	; (8002438 <HAL_GPIO_Init+0x29c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d04c      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 80021fc:	4a8e      	ldr	r2, [pc, #568]	; (8002438 <HAL_GPIO_Init+0x29c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d863      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 8002202:	4a8e      	ldr	r2, [pc, #568]	; (800243c <HAL_GPIO_Init+0x2a0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d046      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
 8002208:	4a8c      	ldr	r2, [pc, #560]	; (800243c <HAL_GPIO_Init+0x2a0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d85d      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 800220e:	2b12      	cmp	r3, #18
 8002210:	d82a      	bhi.n	8002268 <HAL_GPIO_Init+0xcc>
 8002212:	2b12      	cmp	r3, #18
 8002214:	d859      	bhi.n	80022ca <HAL_GPIO_Init+0x12e>
 8002216:	a201      	add	r2, pc, #4	; (adr r2, 800221c <HAL_GPIO_Init+0x80>)
 8002218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221c:	08002297 	.word	0x08002297
 8002220:	08002271 	.word	0x08002271
 8002224:	08002283 	.word	0x08002283
 8002228:	080022c5 	.word	0x080022c5
 800222c:	080022cb 	.word	0x080022cb
 8002230:	080022cb 	.word	0x080022cb
 8002234:	080022cb 	.word	0x080022cb
 8002238:	080022cb 	.word	0x080022cb
 800223c:	080022cb 	.word	0x080022cb
 8002240:	080022cb 	.word	0x080022cb
 8002244:	080022cb 	.word	0x080022cb
 8002248:	080022cb 	.word	0x080022cb
 800224c:	080022cb 	.word	0x080022cb
 8002250:	080022cb 	.word	0x080022cb
 8002254:	080022cb 	.word	0x080022cb
 8002258:	080022cb 	.word	0x080022cb
 800225c:	080022cb 	.word	0x080022cb
 8002260:	08002279 	.word	0x08002279
 8002264:	0800228d 	.word	0x0800228d
 8002268:	4a75      	ldr	r2, [pc, #468]	; (8002440 <HAL_GPIO_Init+0x2a4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800226e:	e02c      	b.n	80022ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	623b      	str	r3, [r7, #32]
          break;
 8002276:	e029      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	3304      	adds	r3, #4
 800227e:	623b      	str	r3, [r7, #32]
          break;
 8002280:	e024      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	3308      	adds	r3, #8
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e01f      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	330c      	adds	r3, #12
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	e01a      	b.n	80022cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800229e:	2304      	movs	r3, #4
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e013      	b.n	80022cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ac:	2308      	movs	r3, #8
 80022ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	611a      	str	r2, [r3, #16]
          break;
 80022b6:	e009      	b.n	80022cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b8:	2308      	movs	r3, #8
 80022ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	615a      	str	r2, [r3, #20]
          break;
 80022c2:	e003      	b.n	80022cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
          break;
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x130>
          break;
 80022ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d801      	bhi.n	80022d6 <HAL_GPIO_Init+0x13a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	e001      	b.n	80022da <HAL_GPIO_Init+0x13e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2bff      	cmp	r3, #255	; 0xff
 80022e0:	d802      	bhi.n	80022e8 <HAL_GPIO_Init+0x14c>
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	e002      	b.n	80022ee <HAL_GPIO_Init+0x152>
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3b08      	subs	r3, #8
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	210f      	movs	r1, #15
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	401a      	ands	r2, r3
 8002300:	6a39      	ldr	r1, [r7, #32]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	431a      	orrs	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80c1 	beq.w	800249e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800231c:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_GPIO_Init+0x2a8>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a48      	ldr	r2, [pc, #288]	; (8002444 <HAL_GPIO_Init+0x2a8>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_GPIO_Init+0x2a8>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002334:	4a44      	ldr	r2, [pc, #272]	; (8002448 <HAL_GPIO_Init+0x2ac>)
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3c      	ldr	r2, [pc, #240]	; (800244c <HAL_GPIO_Init+0x2b0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01f      	beq.n	80023a0 <HAL_GPIO_Init+0x204>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3b      	ldr	r2, [pc, #236]	; (8002450 <HAL_GPIO_Init+0x2b4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d019      	beq.n	800239c <HAL_GPIO_Init+0x200>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <HAL_GPIO_Init+0x2b8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_GPIO_Init+0x1fc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a39      	ldr	r2, [pc, #228]	; (8002458 <HAL_GPIO_Init+0x2bc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00d      	beq.n	8002394 <HAL_GPIO_Init+0x1f8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a38      	ldr	r2, [pc, #224]	; (800245c <HAL_GPIO_Init+0x2c0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0x1f4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a37      	ldr	r2, [pc, #220]	; (8002460 <HAL_GPIO_Init+0x2c4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_GPIO_Init+0x1f0>
 8002388:	2305      	movs	r3, #5
 800238a:	e00a      	b.n	80023a2 <HAL_GPIO_Init+0x206>
 800238c:	2306      	movs	r3, #6
 800238e:	e008      	b.n	80023a2 <HAL_GPIO_Init+0x206>
 8002390:	2304      	movs	r3, #4
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x206>
 8002394:	2303      	movs	r3, #3
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_Init+0x206>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x206>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_Init+0x206>
 80023a0:	2300      	movs	r3, #0
 80023a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023b2:	4925      	ldr	r1, [pc, #148]	; (8002448 <HAL_GPIO_Init+0x2ac>)
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	4924      	ldr	r1, [pc, #144]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	4920      	ldr	r1, [pc, #128]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	491a      	ldr	r1, [pc, #104]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60cb      	str	r3, [r1, #12]
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	43db      	mvns	r3, r3
 800240a:	4916      	ldr	r1, [pc, #88]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 800240c:	4013      	ands	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d025      	beq.n	8002468 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4910      	ldr	r1, [pc, #64]	; (8002464 <HAL_GPIO_Init+0x2c8>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
 8002428:	e025      	b.n	8002476 <HAL_GPIO_Init+0x2da>
 800242a:	bf00      	nop
 800242c:	10320000 	.word	0x10320000
 8002430:	10310000 	.word	0x10310000
 8002434:	10220000 	.word	0x10220000
 8002438:	10210000 	.word	0x10210000
 800243c:	10120000 	.word	0x10120000
 8002440:	10110000 	.word	0x10110000
 8002444:	40021000 	.word	0x40021000
 8002448:	40010000 	.word	0x40010000
 800244c:	40010800 	.word	0x40010800
 8002450:	40010c00 	.word	0x40010c00
 8002454:	40011000 	.word	0x40011000
 8002458:	40011400 	.word	0x40011400
 800245c:	40011800 	.word	0x40011800
 8002460:	40011c00 	.word	0x40011c00
 8002464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_GPIO_Init+0x324>)
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	43db      	mvns	r3, r3
 8002470:	4913      	ldr	r1, [pc, #76]	; (80024c0 <HAL_GPIO_Init+0x324>)
 8002472:	4013      	ands	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_GPIO_Init+0x324>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_GPIO_Init+0x324>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
 800248e:	e006      	b.n	800249e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_GPIO_Init+0x324>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	43db      	mvns	r3, r3
 8002498:	4909      	ldr	r1, [pc, #36]	; (80024c0 <HAL_GPIO_Init+0x324>)
 800249a:	4013      	ands	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	3301      	adds	r3, #1
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f47f ae7e 	bne.w	80021b0 <HAL_GPIO_Init+0x14>
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	372c      	adds	r7, #44	; 0x2c
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40010400 	.word	0x40010400

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e12b      	b.n	800275e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fdb8 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2224      	movs	r2, #36	; 0x24
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002558:	f000 fce6 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 800255c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a81      	ldr	r2, [pc, #516]	; (8002768 <HAL_I2C_Init+0x274>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d807      	bhi.n	8002578 <HAL_I2C_Init+0x84>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a80      	ldr	r2, [pc, #512]	; (800276c <HAL_I2C_Init+0x278>)
 800256c:	4293      	cmp	r3, r2
 800256e:	bf94      	ite	ls
 8002570:	2301      	movls	r3, #1
 8002572:	2300      	movhi	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e006      	b.n	8002586 <HAL_I2C_Init+0x92>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a7d      	ldr	r2, [pc, #500]	; (8002770 <HAL_I2C_Init+0x27c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	bf94      	ite	ls
 8002580:	2301      	movls	r3, #1
 8002582:	2300      	movhi	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0e7      	b.n	800275e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4a78      	ldr	r2, [pc, #480]	; (8002774 <HAL_I2C_Init+0x280>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0c9b      	lsrs	r3, r3, #18
 8002598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a6a      	ldr	r2, [pc, #424]	; (8002768 <HAL_I2C_Init+0x274>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d802      	bhi.n	80025c8 <HAL_I2C_Init+0xd4>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3301      	adds	r3, #1
 80025c6:	e009      	b.n	80025dc <HAL_I2C_Init+0xe8>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	4a69      	ldr	r2, [pc, #420]	; (8002778 <HAL_I2C_Init+0x284>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	3301      	adds	r3, #1
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	495c      	ldr	r1, [pc, #368]	; (8002768 <HAL_I2C_Init+0x274>)
 80025f8:	428b      	cmp	r3, r1
 80025fa:	d819      	bhi.n	8002630 <HAL_I2C_Init+0x13c>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1e59      	subs	r1, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fbb1 f3f3 	udiv	r3, r1, r3
 800260a:	1c59      	adds	r1, r3, #1
 800260c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002610:	400b      	ands	r3, r1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_I2C_Init+0x138>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e59      	subs	r1, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fbb1 f3f3 	udiv	r3, r1, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262a:	e051      	b.n	80026d0 <HAL_I2C_Init+0x1dc>
 800262c:	2304      	movs	r3, #4
 800262e:	e04f      	b.n	80026d0 <HAL_I2C_Init+0x1dc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d111      	bne.n	800265c <HAL_I2C_Init+0x168>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1e58      	subs	r0, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	440b      	add	r3, r1
 8002646:	fbb0 f3f3 	udiv	r3, r0, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e012      	b.n	8002682 <HAL_I2C_Init+0x18e>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	0099      	lsls	r1, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Init+0x196>
 8002686:	2301      	movs	r3, #1
 8002688:	e022      	b.n	80026d0 <HAL_I2C_Init+0x1dc>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10e      	bne.n	80026b0 <HAL_I2C_Init+0x1bc>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e58      	subs	r0, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	440b      	add	r3, r1
 80026a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ae:	e00f      	b.n	80026d0 <HAL_I2C_Init+0x1dc>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	0099      	lsls	r1, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	6809      	ldr	r1, [r1, #0]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6911      	ldr	r1, [r2, #16]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68d2      	ldr	r2, [r2, #12]
 800270a:	4311      	orrs	r1, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	430b      	orrs	r3, r1
 8002712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	000186a0 	.word	0x000186a0
 800276c:	001e847f 	.word	0x001e847f
 8002770:	003d08ff 	.word	0x003d08ff
 8002774:	431bde83 	.word	0x431bde83
 8002778:	10624dd3 	.word	0x10624dd3

0800277c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	420e0020 	.word	0x420e0020

08002794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e272      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8087 	beq.w	80028c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b4:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d00c      	beq.n	80027da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027c0:	4b8f      	ldr	r3, [pc, #572]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d112      	bne.n	80027f2 <HAL_RCC_OscConfig+0x5e>
 80027cc:	4b8c      	ldr	r3, [pc, #560]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d10b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4b89      	ldr	r3, [pc, #548]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d06c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x12c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d168      	bne.n	80028c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e24c      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x76>
 80027fc:	4b80      	ldr	r3, [pc, #512]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a7f      	ldr	r2, [pc, #508]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e02e      	b.n	8002868 <HAL_RCC_OscConfig+0xd4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b7b      	ldr	r3, [pc, #492]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7a      	ldr	r2, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b78      	ldr	r3, [pc, #480]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a77      	ldr	r2, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xd4>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0xbc>
 8002836:	4b72      	ldr	r3, [pc, #456]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a71      	ldr	r2, [pc, #452]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6e      	ldr	r2, [pc, #440]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xd4>
 8002850:	4b6b      	ldr	r3, [pc, #428]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6a      	ldr	r2, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a67      	ldr	r2, [pc, #412]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe ffee 	bl	8001850 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe ffea 	bl	8001850 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e200      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xe4>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe ffda 	bl	8001850 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe ffd6 	bl	8001850 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1ec      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x10c>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ce:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x18c>
 80028e6:	4b46      	ldr	r3, [pc, #280]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x176>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1c0      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4939      	ldr	r1, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e03a      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCC_OscConfig+0x270>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7fe ff8f 	bl	8001850 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe ff8b 	bl	8001850 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1a1      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4927      	ldr	r1, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <HAL_RCC_OscConfig+0x270>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe ff6e 	bl	8001850 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7fe ff6a 	bl	8001850 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e180      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d03a      	beq.n	8002a18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d019      	beq.n	80029de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7fe ff4e 	bl	8001850 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe ff4a 	bl	8001850 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e160      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f000 face 	bl	8002f78 <RCC_Delay>
 80029dc:	e01c      	b.n	8002a18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe ff34 	bl	8001850 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe ff30 	bl	8001850 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d908      	bls.n	8002a0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e146      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	42420000 	.word	0x42420000
 8002a08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b92      	ldr	r3, [pc, #584]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e9      	bne.n	80029ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a6 	beq.w	8002b72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b8b      	ldr	r3, [pc, #556]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4a87      	ldr	r2, [pc, #540]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	61d3      	str	r3, [r2, #28]
 8002a42:	4b85      	ldr	r3, [pc, #532]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b82      	ldr	r3, [pc, #520]	; (8002c5c <HAL_RCC_OscConfig+0x4c8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	; (8002c5c <HAL_RCC_OscConfig+0x4c8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7e      	ldr	r2, [pc, #504]	; (8002c5c <HAL_RCC_OscConfig+0x4c8>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fef1 	bl	8001850 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7fe feed 	bl	8001850 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b64      	cmp	r3, #100	; 0x64
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e103      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b75      	ldr	r3, [pc, #468]	; (8002c5c <HAL_RCC_OscConfig+0x4c8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x312>
 8002a98:	4b6f      	ldr	r3, [pc, #444]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a6e      	ldr	r2, [pc, #440]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e02d      	b.n	8002b02 <HAL_RCC_OscConfig+0x36e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x334>
 8002aae:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6213      	str	r3, [r2, #32]
 8002aba:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a66      	ldr	r2, [pc, #408]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	e01c      	b.n	8002b02 <HAL_RCC_OscConfig+0x36e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d10c      	bne.n	8002aea <HAL_RCC_OscConfig+0x356>
 8002ad0:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a60      	ldr	r2, [pc, #384]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6213      	str	r3, [r2, #32]
 8002adc:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a5d      	ldr	r2, [pc, #372]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCC_OscConfig+0x36e>
 8002aea:	4b5b      	ldr	r3, [pc, #364]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4a5a      	ldr	r2, [pc, #360]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6213      	str	r3, [r2, #32]
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a57      	ldr	r2, [pc, #348]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	f023 0304 	bic.w	r3, r3, #4
 8002b00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d015      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fea1 	bl	8001850 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fe9d 	bl	8001850 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0b1      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ee      	beq.n	8002b12 <HAL_RCC_OscConfig+0x37e>
 8002b34:	e014      	b.n	8002b60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe fe8b 	bl	8001850 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe fe87 	bl	8001850 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e09b      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a3b      	ldr	r2, [pc, #236]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8087 	beq.w	8002c8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d061      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d146      	bne.n	8002c1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fe5b 	bl	8001850 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fe57 	bl	8001850 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e06d      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f0      	bne.n	8002b9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d108      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4921      	ldr	r1, [pc, #132]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a19      	ldr	r1, [r3, #32]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	430b      	orrs	r3, r1
 8002bea:	491b      	ldr	r1, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x4cc>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fe2b 	bl	8001850 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe fe27 	bl	8001850 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e03d      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x46a>
 8002c1c:	e035      	b.n	8002c8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x4cc>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fe14 	bl	8001850 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fe10 	bl	8001850 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e026      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x498>
 8002c4a:	e01e      	b.n	8002c8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d107      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e019      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_OscConfig+0x500>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000

08002c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0d0      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d910      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 0207 	bic.w	r2, r3, #7
 8002cc2:	4965      	ldr	r1, [pc, #404]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0b8      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	494d      	ldr	r1, [pc, #308]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d040      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d115      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e073      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06b      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4936      	ldr	r1, [pc, #216]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7fe fd62 	bl	8001850 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe fd5e 	bl	8001850 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e053      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d210      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4922      	ldr	r1, [pc, #136]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e032      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4916      	ldr	r1, [pc, #88]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e26:	f000 f821 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	490a      	ldr	r1, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	5ccb      	ldrb	r3, [r1, r3]
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_RCC_ClockConfig+0x1cc>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1d0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fcc0 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08006538 	.word	0x08006538
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000004 	.word	0x20000004

08002e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d002      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x30>
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x36>
 8002e9a:	e027      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9e:	613b      	str	r3, [r7, #16]
      break;
 8002ea0:	e027      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0c9b      	lsrs	r3, r3, #18
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eac:	5cd3      	ldrb	r3, [r2, r3]
 8002eae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0c5b      	lsrs	r3, r3, #17
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ec6:	5cd3      	ldrb	r3, [r2, r3]
 8002ec8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ece:	fb03 f202 	mul.w	r2, r3, r2
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e004      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	613b      	str	r3, [r7, #16]
      break;
 8002eea:	e002      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eee:	613b      	str	r3, [r7, #16]
      break;
 8002ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef2:	693b      	ldr	r3, [r7, #16]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	007a1200 	.word	0x007a1200
 8002f08:	08006550 	.word	0x08006550
 8002f0c:	08006560 	.word	0x08006560
 8002f10:	003d0900 	.word	0x003d0900

08002f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	20000000 	.word	0x20000000

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff2 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	0a1b      	lsrs	r3, r3, #8
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08006548 	.word	0x08006548

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f54:	f7ff ffde 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	0adb      	lsrs	r3, r3, #11
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08006548 	.word	0x08006548

08002f78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <RCC_Delay+0x34>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <RCC_Delay+0x38>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0a5b      	lsrs	r3, r3, #9
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f94:	bf00      	nop
  }
  while (Delay --);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	60fa      	str	r2, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f9      	bne.n	8002f94 <RCC_Delay+0x1c>
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d07d      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4a4b      	ldr	r2, [pc, #300]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	61d3      	str	r3, [r2, #28]
 8002fec:	4b49      	ldr	r3, [pc, #292]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d118      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a42      	ldr	r2, [pc, #264]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003014:	f7fe fc1c 	bl	8001850 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	e008      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fe fc18 	bl	8001850 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e06d      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003042:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d02e      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d027      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800306e:	4a29      	ldr	r2, [pc, #164]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d014      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fbe7 	bl	8001850 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe fbe3 	bl	8001850 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e036      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ee      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4917      	ldr	r1, [pc, #92]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	490b      	ldr	r1, [pc, #44]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
 800311c:	42420440 	.word	0x42420440

08003120 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	2b0f      	cmp	r3, #15
 8003142:	f200 80af 	bhi.w	80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	08003223 	.word	0x08003223
 8003150:	08003289 	.word	0x08003289
 8003154:	080032a5 	.word	0x080032a5
 8003158:	08003213 	.word	0x08003213
 800315c:	080032a5 	.word	0x080032a5
 8003160:	080032a5 	.word	0x080032a5
 8003164:	080032a5 	.word	0x080032a5
 8003168:	0800321b 	.word	0x0800321b
 800316c:	080032a5 	.word	0x080032a5
 8003170:	080032a5 	.word	0x080032a5
 8003174:	080032a5 	.word	0x080032a5
 8003178:	080032a5 	.word	0x080032a5
 800317c:	080032a5 	.word	0x080032a5
 8003180:	080032a5 	.word	0x080032a5
 8003184:	080032a5 	.word	0x080032a5
 8003188:	0800318d 	.word	0x0800318d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800318c:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003192:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8084 	beq.w	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0c9b      	lsrs	r3, r3, #18
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	4a44      	ldr	r2, [pc, #272]	; (80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d015      	beq.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031b8:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	0c5b      	lsrs	r3, r3, #17
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	4a3f      	ldr	r2, [pc, #252]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80031c4:	5cd3      	ldrb	r3, [r2, r3]
 80031c6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80031d2:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e004      	b.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fa:	d102      	bne.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003200:	e052      	b.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4a31      	ldr	r2, [pc, #196]	; (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	61bb      	str	r3, [r7, #24]
      break;
 8003210:	e04a      	b.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003212:	f7ff fe2b 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8003216:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003218:	e049      	b.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800321a:	f7ff fe27 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 800321e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003220:	e045      	b.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003222:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003232:	d108      	bne.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800323e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e01f      	b.n	8003286 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003250:	d109      	bne.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800325e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e00f      	b.n	8003286 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003270:	d11c      	bne.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800327e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003282:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003284:	e012      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003286:	e011      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003288:	f7ff fe62 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	0b9b      	lsrs	r3, r3, #14
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	3301      	adds	r3, #1
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	61bb      	str	r3, [r7, #24]
      break;
 80032a2:	e004      	b.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80032a4:	bf00      	nop
 80032a6:	e002      	b.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80032a8:	bf00      	nop
 80032aa:	e000      	b.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80032ac:	bf00      	nop
    }
  }
  return (frequency);
 80032ae:	69bb      	ldr	r3, [r7, #24]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	08006564 	.word	0x08006564
 80032c0:	08006574 	.word	0x08006574
 80032c4:	007a1200 	.word	0x007a1200
 80032c8:	003d0900 	.word	0x003d0900
 80032cc:	aaaaaaab 	.word	0xaaaaaaab

080032d0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07a      	b.n	80033dc <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7c5b      	ldrb	r3, [r3, #17]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd ff08 	bl	800110c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fb2f 	bl	8003966 <HAL_RTC_WaitForSynchro>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2204      	movs	r2, #4
 8003312:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e061      	b.n	80033dc <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fbe8 	bl	8003aee <RTC_EnterInitMode>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2204      	movs	r2, #4
 8003328:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e056      	b.n	80033dc <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0207 	bic.w	r2, r2, #7
 800333c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_RTC_Init+0x114>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <HAL_RTC_Init+0x114>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RTC_Init+0x114>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4921      	ldr	r1, [pc, #132]	; (80033e4 <HAL_RTC_Init+0x114>)
 8003360:	4313      	orrs	r3, r2
 8003362:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d003      	beq.n	8003376 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e00e      	b.n	8003394 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003376:	2001      	movs	r0, #1
 8003378:	f7ff fed2 	bl	8003120 <HAL_RCCEx_GetPeriphCLKFreq>
 800337c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2204      	movs	r2, #4
 8003388:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e026      	b.n	80033dc <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3b01      	subs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0c1a      	lsrs	r2, r3, #16
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 020f 	and.w	r2, r2, #15
 80033a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	b292      	uxth	r2, r2
 80033aa:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fbc6 	bl	8003b3e <RTC_ExitInitMode>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2204      	movs	r2, #4
 80033bc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e00c      	b.n	80033dc <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40006c00 	.word	0x40006c00

080033e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_RTC_SetTime+0x20>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e080      	b.n	800350e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	7c1b      	ldrb	r3, [r3, #16]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_RTC_SetTime+0x30>
 8003414:	2302      	movs	r3, #2
 8003416:	e07a      	b.n	800350e <HAL_RTC_SetTime+0x126>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2202      	movs	r2, #2
 8003422:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003434:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	4619      	mov	r1, r3
 800343e:	460b      	mov	r3, r1
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a5b      	subs	r3, r3, r1
 8003444:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003446:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800344c:	4413      	add	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e01e      	b.n	8003490 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fbb6 	bl	8003bc8 <RTC_Bcd2ToByte>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003464:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fbab 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800347e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	789b      	ldrb	r3, [r3, #2]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fb9f 	bl	8003bc8 <RTC_Bcd2ToByte>
 800348a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800348c:	4423      	add	r3, r4
 800348e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fac4 	bl	8003a20 <RTC_WriteTimeCounter>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2204      	movs	r2, #4
 80034a2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e02f      	b.n	800350e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0205 	bic.w	r2, r2, #5
 80034bc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fad5 	bl	8003a6e <RTC_ReadAlarmCounter>
 80034c4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d018      	beq.n	8003500 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d214      	bcs.n	8003500 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80034dc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80034e0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80034e2:	6939      	ldr	r1, [r7, #16]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fadb 	bl	8003aa0 <RTC_WriteAlarmCounter>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2204      	movs	r2, #4
 80034f4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e006      	b.n	800350e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}
	...

08003518 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_RTC_GetTime+0x28>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b5      	b.n	80036b0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0ac      	b.n	80036b0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fa32 	bl	80039c0 <RTC_ReadTimeCounter>
 800355c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	4a55      	ldr	r2, [pc, #340]	; (80036b8 <HAL_RTC_GetTime+0x1a0>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0adb      	lsrs	r3, r3, #11
 8003568:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4b52      	ldr	r3, [pc, #328]	; (80036b8 <HAL_RTC_GetTime+0x1a0>)
 800356e:	fba3 1302 	umull	r1, r3, r3, r2
 8003572:	0adb      	lsrs	r3, r3, #11
 8003574:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	4a4f      	ldr	r2, [pc, #316]	; (80036bc <HAL_RTC_GetTime+0x1a4>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	b2da      	uxtb	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4a4a      	ldr	r2, [pc, #296]	; (80036b8 <HAL_RTC_GetTime+0x1a0>)
 8003590:	fba2 1203 	umull	r1, r2, r2, r3
 8003594:	0ad2      	lsrs	r2, r2, #11
 8003596:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800359a:	fb01 f202 	mul.w	r2, r1, r2
 800359e:	1a9a      	subs	r2, r3, r2
 80035a0:	4b46      	ldr	r3, [pc, #280]	; (80036bc <HAL_RTC_GetTime+0x1a4>)
 80035a2:	fba3 1302 	umull	r1, r3, r3, r2
 80035a6:	0959      	lsrs	r1, r3, #5
 80035a8:	460b      	mov	r3, r1
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a5b      	subs	r3, r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	1ad1      	subs	r1, r2, r3
 80035b2:	b2ca      	uxtb	r2, r1
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b17      	cmp	r3, #23
 80035bc:	d955      	bls.n	800366a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4a3f      	ldr	r2, [pc, #252]	; (80036c0 <HAL_RTC_GetTime+0x1a8>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80035ca:	6939      	ldr	r1, [r7, #16]
 80035cc:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <HAL_RTC_GetTime+0x1a8>)
 80035ce:	fba3 2301 	umull	r2, r3, r3, r1
 80035d2:	091a      	lsrs	r2, r3, #4
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1aca      	subs	r2, r1, r3
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fa42 	bl	8003a6e <RTC_ReadAlarmCounter>
 80035ea:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d008      	beq.n	8003606 <HAL_RTC_GetTime+0xee>
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d904      	bls.n	8003606 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e002      	b.n	800360c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <HAL_RTC_GetTime+0x1ac>)
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f9ff 	bl	8003a20 <RTC_WriteTimeCounter>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e041      	b.n	80036b0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d00c      	beq.n	800364e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800363c:	69f9      	ldr	r1, [r7, #28]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fa2e 	bl	8003aa0 <RTC_WriteAlarmCounter>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e030      	b.n	80036b0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800364e:	69f9      	ldr	r1, [r7, #28]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fa25 	bl	8003aa0 <RTC_WriteAlarmCounter>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e027      	b.n	80036b0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003660:	6979      	ldr	r1, [r7, #20]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 facd 	bl	8003c02 <RTC_DateUpdate>
 8003668:	e003      	b.n	8003672 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01a      	beq.n	80036ae <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fa86 	bl	8003b8e <RTC_ByteToBcd2>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fa7d 	bl	8003b8e <RTC_ByteToBcd2>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	789b      	ldrb	r3, [r3, #2]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fa74 	bl	8003b8e <RTC_ByteToBcd2>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	91a2b3c5 	.word	0x91a2b3c5
 80036bc:	88888889 	.word	0x88888889
 80036c0:	aaaaaaab 	.word	0xaaaaaaab
 80036c4:	00015180 	.word	0x00015180

080036c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_RTC_SetDate+0x24>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e097      	b.n	8003820 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	7c1b      	ldrb	r3, [r3, #16]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_RTC_SetDate+0x34>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e091      	b.n	8003820 <HAL_RTC_SetDate+0x158>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2202      	movs	r2, #2
 8003706:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	78da      	ldrb	r2, [r3, #3]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	785a      	ldrb	r2, [r3, #1]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	789a      	ldrb	r2, [r3, #2]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	739a      	strb	r2, [r3, #14]
 8003726:	e01a      	b.n	800375e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	78db      	ldrb	r3, [r3, #3]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fa4b 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	785b      	ldrb	r3, [r3, #1]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fa42 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	789b      	ldrb	r3, [r3, #2]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fa39 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	7bdb      	ldrb	r3, [r3, #15]
 8003762:	4618      	mov	r0, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	7b59      	ldrb	r1, [r3, #13]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	7b9b      	ldrb	r3, [r3, #14]
 800376c:	461a      	mov	r2, r3
 800376e:	f000 fb23 	bl	8003db8 <RTC_WeekDayNum>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	7b1a      	ldrb	r2, [r3, #12]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f91c 	bl	80039c0 <RTC_ReadTimeCounter>
 8003788:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4a26      	ldr	r2, [pc, #152]	; (8003828 <HAL_RTC_SetDate+0x160>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0adb      	lsrs	r3, r3, #11
 8003794:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b18      	cmp	r3, #24
 800379a:	d93a      	bls.n	8003812 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	4a23      	ldr	r2, [pc, #140]	; (800382c <HAL_RTC_SetDate+0x164>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	4a22      	ldr	r2, [pc, #136]	; (8003830 <HAL_RTC_SetDate+0x168>)
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80037b2:	69f9      	ldr	r1, [r7, #28]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f933 	bl	8003a20 <RTC_WriteTimeCounter>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2204      	movs	r2, #4
 80037c4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e027      	b.n	8003820 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f94c 	bl	8003a6e <RTC_ReadAlarmCounter>
 80037d6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037de:	d018      	beq.n	8003812 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d214      	bcs.n	8003812 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80037ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80037f2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f952 	bl	8003aa0 <RTC_WriteAlarmCounter>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2204      	movs	r2, #4
 8003806:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e006      	b.n	8003820 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	91a2b3c5 	.word	0x91a2b3c5
 800382c:	aaaaaaab 	.word	0xaaaaaaab
 8003830:	00015180 	.word	0x00015180

08003834 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	2100      	movs	r1, #0
 800384a:	460a      	mov	r2, r1
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	460a      	mov	r2, r1
 8003850:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_RTC_SetAlarm+0x2a>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07d      	b.n	800395e <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	7c1b      	ldrb	r3, [r3, #16]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_RTC_SetAlarm+0x3a>
 800386a:	2302      	movs	r3, #2
 800386c:	e077      	b.n	800395e <HAL_RTC_SetAlarm+0x12a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2202      	movs	r2, #2
 8003878:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	2200      	movs	r2, #0
 8003880:	4619      	mov	r1, r3
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fe48 	bl	8003518 <HAL_RTC_GetTime>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e065      	b.n	800395e <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003892:	7d3b      	ldrb	r3, [r7, #20]
 8003894:	461a      	mov	r2, r3
 8003896:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800389a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800389e:	7d7b      	ldrb	r3, [r7, #21]
 80038a0:	4619      	mov	r1, r3
 80038a2:	460b      	mov	r3, r1
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a5b      	subs	r3, r3, r1
 80038a8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80038aa:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80038ac:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80038ae:	4413      	add	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d113      	bne.n	80038e0 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80038c2:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	785b      	ldrb	r3, [r3, #1]
 80038ca:	4619      	mov	r1, r3
 80038cc:	460b      	mov	r3, r1
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a5b      	subs	r3, r3, r1
 80038d2:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80038d4:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80038da:	4413      	add	r3, r2
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	e01e      	b.n	800391e <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f96f 	bl	8003bc8 <RTC_Bcd2ToByte>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80038f2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f964 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800390c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	789b      	ldrb	r3, [r3, #2]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f958 	bl	8003bc8 <RTC_Bcd2ToByte>
 8003918:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800391a:	4423      	add	r3, r4
 800391c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	429a      	cmp	r2, r3
 8003924:	d205      	bcs.n	8003932 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800392c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003930:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003932:	69f9      	ldr	r1, [r7, #28]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f8b3 	bl	8003aa0 <RTC_WriteAlarmCounter>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2204      	movs	r2, #4
 8003944:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e006      	b.n	800395e <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}

08003966 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e01d      	b.n	80039b8 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0208 	bic.w	r2, r2, #8
 800398a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800398c:	f7fd ff60 	bl	8001850 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003992:	e009      	b.n	80039a8 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003994:	f7fd ff5c 	bl	8001850 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a2:	d901      	bls.n	80039a8 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e007      	b.n	80039b8 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0ee      	beq.n	8003994 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	827b      	strh	r3, [r7, #18]
 80039cc:	2300      	movs	r3, #0
 80039ce:	823b      	strh	r3, [r7, #16]
 80039d0:	2300      	movs	r3, #0
 80039d2:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80039f0:	8a7a      	ldrh	r2, [r7, #18]
 80039f2:	8a3b      	ldrh	r3, [r7, #16]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d008      	beq.n	8003a0a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80039f8:	8a3b      	ldrh	r3, [r7, #16]
 80039fa:	041a      	lsls	r2, r3, #16
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e004      	b.n	8003a14 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003a0a:	8a7b      	ldrh	r3, [r7, #18]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	89fb      	ldrh	r3, [r7, #14]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003a14:	697b      	ldr	r3, [r7, #20]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f85d 	bl	8003aee <RTC_EnterInitMode>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e011      	b.n	8003a64 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	0c12      	lsrs	r2, r2, #16
 8003a48:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	b292      	uxth	r2, r2
 8003a52:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f872 	bl	8003b3e <RTC_ExitInitMode>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	81fb      	strh	r3, [r7, #14]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003a8e:	89fb      	ldrh	r3, [r7, #14]
 8003a90:	041a      	lsls	r2, r3, #16
 8003a92:	89bb      	ldrh	r3, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f81d 	bl	8003aee <RTC_EnterInitMode>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e011      	b.n	8003ae4 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	0c12      	lsrs	r2, r2, #16
 8003ac8:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f832 	bl	8003b3e <RTC_ExitInitMode>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003afa:	f7fd fea9 	bl	8001850 <HAL_GetTick>
 8003afe:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b00:	e009      	b.n	8003b16 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b02:	f7fd fea5 	bl	8001850 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b10:	d901      	bls.n	8003b16 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e00f      	b.n	8003b36 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ee      	beq.n	8003b02 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0210 	orr.w	r2, r2, #16
 8003b32:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0210 	bic.w	r2, r2, #16
 8003b58:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b5a:	f7fd fe79 	bl	8001850 <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b60:	e009      	b.n	8003b76 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b62:	f7fd fe75 	bl	8001850 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b70:	d901      	bls.n	8003b76 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e007      	b.n	8003b86 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ee      	beq.n	8003b62 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003b9c:	e005      	b.n	8003baa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	3b0a      	subs	r3, #10
 8003ba8:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	2b09      	cmp	r3, #9
 8003bae:	d8f6      	bhi.n	8003b9e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	b2db      	uxtb	r3, r3
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	b2db      	uxtb	r3, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7bdb      	ldrb	r3, [r3, #15]
 8003c20:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7b5b      	ldrb	r3, [r3, #13]
 8003c26:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7b9b      	ldrb	r3, [r3, #14]
 8003c2c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	e06f      	b.n	8003d14 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d011      	beq.n	8003c5e <RTC_DateUpdate+0x5c>
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d00e      	beq.n	8003c5e <RTC_DateUpdate+0x5c>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d00b      	beq.n	8003c5e <RTC_DateUpdate+0x5c>
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b07      	cmp	r3, #7
 8003c4a:	d008      	beq.n	8003c5e <RTC_DateUpdate+0x5c>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d005      	beq.n	8003c5e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b0a      	cmp	r3, #10
 8003c56:	d002      	beq.n	8003c5e <RTC_DateUpdate+0x5c>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	d117      	bne.n	8003c8e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b1e      	cmp	r3, #30
 8003c62:	d803      	bhi.n	8003c6c <RTC_DateUpdate+0x6a>
      {
        day++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3301      	adds	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c6a:	e050      	b.n	8003d0e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d005      	beq.n	8003c7e <RTC_DateUpdate+0x7c>
        {
          month++;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3301      	adds	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c7c:	e047      	b.n	8003d0e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c82:	2301      	movs	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
          year++;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003c8c:	e03f      	b.n	8003d0e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d008      	beq.n	8003ca6 <RTC_DateUpdate+0xa4>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b06      	cmp	r3, #6
 8003c98:	d005      	beq.n	8003ca6 <RTC_DateUpdate+0xa4>
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d002      	beq.n	8003ca6 <RTC_DateUpdate+0xa4>
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b0b      	cmp	r3, #11
 8003ca4:	d10c      	bne.n	8003cc0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b1d      	cmp	r3, #29
 8003caa:	d803      	bhi.n	8003cb4 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003cb2:	e02c      	b.n	8003d0e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003cbe:	e026      	b.n	8003d0e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d123      	bne.n	8003d0e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b1b      	cmp	r3, #27
 8003cca:	d803      	bhi.n	8003cd4 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e01c      	b.n	8003d0e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b1c      	cmp	r3, #28
 8003cd8:	d111      	bne.n	8003cfe <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f838 	bl	8003d54 <RTC_IsLeapYear>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e00d      	b.n	8003d0e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e007      	b.n	8003d0e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b1d      	cmp	r3, #29
 8003d02:	d104      	bne.n	8003d0e <RTC_DateUpdate+0x10c>
      {
        month++;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	3301      	adds	r3, #1
 8003d08:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d38b      	bcc.n	8003c34 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f000 f83a 	bl	8003db8 <RTC_WeekDayNum>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	731a      	strb	r2, [r3, #12]
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e01d      	b.n	8003daa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <RTC_IsLeapYear+0x60>)
 8003d72:	fba2 1203 	umull	r1, r2, r2, r3
 8003d76:	0952      	lsrs	r2, r2, #5
 8003d78:	2164      	movs	r1, #100	; 0x64
 8003d7a:	fb01 f202 	mul.w	r2, r1, r2
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <RTC_IsLeapYear+0x60>)
 8003d8e:	fba2 1203 	umull	r1, r2, r2, r3
 8003d92:	09d2      	lsrs	r2, r2, #7
 8003d94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003d98:	fb01 f202 	mul.w	r2, r1, r2
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003da8:	2300      	movs	r3, #0
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	51eb851f 	.word	0x51eb851f

08003db8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70fb      	strb	r3, [r7, #3]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003dd6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d82d      	bhi.n	8003e3a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	4a2c      	ldr	r2, [pc, #176]	; (8003e9c <RTC_WeekDayNum+0xe4>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	085a      	lsrs	r2, r3, #1
 8003df2:	78bb      	ldrb	r3, [r7, #2]
 8003df4:	441a      	add	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	4926      	ldr	r1, [pc, #152]	; (8003ea0 <RTC_WeekDayNum+0xe8>)
 8003e08:	fba1 1303 	umull	r1, r3, r1, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	1ad2      	subs	r2, r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	4922      	ldr	r1, [pc, #136]	; (8003ea0 <RTC_WeekDayNum+0xe8>)
 8003e16:	fba1 1303 	umull	r1, r3, r1, r3
 8003e1a:	09db      	lsrs	r3, r3, #7
 8003e1c:	4413      	add	r3, r2
 8003e1e:	1d1a      	adds	r2, r3, #4
 8003e20:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <RTC_WeekDayNum+0xec>)
 8003e22:	fba3 1302 	umull	r1, r3, r3, r2
 8003e26:	1ad1      	subs	r1, r2, r3
 8003e28:	0849      	lsrs	r1, r1, #1
 8003e2a:	440b      	add	r3, r1
 8003e2c:	0899      	lsrs	r1, r3, #2
 8003e2e:	460b      	mov	r3, r1
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	1a5b      	subs	r3, r3, r1
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e029      	b.n	8003e8e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <RTC_WeekDayNum+0xe4>)
 8003e48:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4c:	085a      	lsrs	r2, r3, #1
 8003e4e:	78bb      	ldrb	r3, [r7, #2]
 8003e50:	441a      	add	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	441a      	add	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4910      	ldr	r1, [pc, #64]	; (8003ea0 <RTC_WeekDayNum+0xe8>)
 8003e60:	fba1 1303 	umull	r1, r3, r1, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	1ad2      	subs	r2, r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	490d      	ldr	r1, [pc, #52]	; (8003ea0 <RTC_WeekDayNum+0xe8>)
 8003e6c:	fba1 1303 	umull	r1, r3, r1, r3
 8003e70:	09db      	lsrs	r3, r3, #7
 8003e72:	4413      	add	r3, r2
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <RTC_WeekDayNum+0xec>)
 8003e78:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7c:	1ad1      	subs	r1, r2, r3
 8003e7e:	0849      	lsrs	r1, r1, #1
 8003e80:	440b      	add	r3, r1
 8003e82:	0899      	lsrs	r1, r3, #2
 8003e84:	460b      	mov	r3, r1
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	1a5b      	subs	r3, r3, r1
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	b2db      	uxtb	r3, r3
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	38e38e39 	.word	0x38e38e39
 8003ea0:	51eb851f 	.word	0x51eb851f
 8003ea4:	24924925 	.word	0x24924925

08003ea8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e022      	b.n	8003f00 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fd f941 	bl	8001154 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f814 	bl	8003f08 <HAL_SD_InitCard>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e00a      	b.n	8003f00 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f08:	b5b0      	push	{r4, r5, r7, lr}
 8003f0a:	b08e      	sub	sp, #56	; 0x38
 8003f0c:	af04      	add	r7, sp, #16
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003f24:	2376      	movs	r3, #118	; 0x76
 8003f26:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681d      	ldr	r5, [r3, #0]
 8003f2c:	466c      	mov	r4, sp
 8003f2e:	f107 0314 	add.w	r3, r7, #20
 8003f32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f3a:	f107 0308 	add.w	r3, r7, #8
 8003f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f40:	4628      	mov	r0, r5
 8003f42:	f001 fe37 	bl	8005bb4 <SDIO_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e04f      	b.n	8003ff8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003f58:	4b29      	ldr	r3, [pc, #164]	; (8004000 <HAL_SD_InitCard+0xf8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fe5c 	bl	8005c20 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_SD_InitCard+0xf8>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003f6e:	2002      	movs	r0, #2
 8003f70:	f7fd fc78 	bl	8001864 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fb53 	bl	8004620 <SD_PowerON>
 8003f7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e02e      	b.n	8003ff8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa72 	bl	8004484 <SD_InitCard>
 8003fa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e01b      	b.n	8003ff8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 feb5 	bl	8005d38 <SDMMC_CmdBlockLength>
 8003fce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00f      	beq.n	8003ff6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <HAL_SD_InitCard+0xfc>)
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3728      	adds	r7, #40	; 0x28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8004000:	423000a0 	.word	0x423000a0
 8004004:	004005ff 	.word	0x004005ff

08004008 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004016:	0f9b      	lsrs	r3, r3, #30
 8004018:	b2da      	uxtb	r2, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004022:	0e9b      	lsrs	r3, r3, #26
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	b2da      	uxtb	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004034:	0e1b      	lsrs	r3, r3, #24
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	b2da      	uxtb	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	b2da      	uxtb	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	b2da      	uxtb	r2, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405e:	b2da      	uxtb	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004068:	0d1b      	lsrs	r3, r3, #20
 800406a:	b29a      	uxth	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	b2da      	uxtb	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004086:	0bdb      	lsrs	r3, r3, #15
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	b2da      	uxtb	r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004098:	0b9b      	lsrs	r3, r3, #14
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040aa:	0b5b      	lsrs	r3, r3, #13
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040bc:	0b1b      	lsrs	r3, r3, #12
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d163      	bne.n	80041a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040dc:	009a      	lsls	r2, r3, #2
 80040de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040e2:	4013      	ands	r3, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80040e8:	0f92      	lsrs	r2, r2, #30
 80040ea:	431a      	orrs	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f4:	0edb      	lsrs	r3, r3, #27
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004106:	0e1b      	lsrs	r3, r3, #24
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	b2da      	uxtb	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004118:	0d5b      	lsrs	r3, r3, #21
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	b2da      	uxtb	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412a:	0c9b      	lsrs	r3, r3, #18
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	b2da      	uxtb	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413c:	0bdb      	lsrs	r3, r3, #15
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	b2da      	uxtb	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	7e1b      	ldrb	r3, [r3, #24]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	3302      	adds	r3, #2
 8004160:	2201      	movs	r2, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800416a:	fb03 f202 	mul.w	r2, r3, r2
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	7a1b      	ldrb	r3, [r3, #8]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	2201      	movs	r2, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800418c:	0a52      	lsrs	r2, r2, #9
 800418e:	fb03 f202 	mul.w	r2, r3, r2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419c:	661a      	str	r2, [r3, #96]	; 0x60
 800419e:	e031      	b.n	8004204 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d11d      	bne.n	80041e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b6:	0c1b      	lsrs	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	3301      	adds	r3, #1
 80041c4:	029a      	lsls	r2, r3, #10
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60
 80041e2:	e00f      	b.n	8004204 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a58      	ldr	r2, [pc, #352]	; (800434c <HAL_SD_GetCardCSD+0x344>)
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e09d      	b.n	8004340 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004208:	0b9b      	lsrs	r3, r3, #14
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	b2da      	uxtb	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421a:	09db      	lsrs	r3, r3, #7
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004222:	b2da      	uxtb	r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004232:	b2da      	uxtb	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	0fdb      	lsrs	r3, r3, #31
 800423e:	b2da      	uxtb	r2, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	0f5b      	lsrs	r3, r3, #29
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	b2da      	uxtb	r2, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	0e9b      	lsrs	r3, r3, #26
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	b2da      	uxtb	r2, r3
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	0d9b      	lsrs	r3, r3, #22
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	b2da      	uxtb	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	0d5b      	lsrs	r3, r3, #21
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	0c1b      	lsrs	r3, r3, #16
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	0bdb      	lsrs	r3, r3, #15
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	0b9b      	lsrs	r3, r3, #14
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	0b5b      	lsrs	r3, r3, #13
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	0b1b      	lsrs	r3, r3, #12
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	b2da      	uxtb	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800432e:	b2da      	uxtb	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	004005ff 	.word	0x004005ff

08004350 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004350:	b5b0      	push	{r4, r5, r7, lr}
 8004352:	b08e      	sub	sp, #56	; 0x38
 8004354:	af04      	add	r7, sp, #16
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2203      	movs	r2, #3
 8004364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	2b03      	cmp	r3, #3
 800436e:	d02e      	beq.n	80043ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d106      	bne.n	8004386 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
 8004384:	e029      	b.n	80043da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438c:	d10a      	bne.n	80043a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f9d4 	bl	800473c <SD_WideBus_Enable>
 8004394:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
 80043a2:	e01a      	b.n	80043da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa11 	bl	80047d2 <SD_WideBus_Disable>
 80043b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
 80043be:	e00c      	b.n	80043da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38
 80043cc:	e005      	b.n	80043da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a26      	ldr	r2, [pc, #152]	; (8004480 <HAL_SD_ConfigWideBusOperation+0x130>)
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043f8:	e01f      	b.n	800443a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681d      	ldr	r5, [r3, #0]
 8004420:	466c      	mov	r4, sp
 8004422:	f107 0314 	add.w	r3, r7, #20
 8004426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800442a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800442e:	f107 0308 	add.w	r3, r7, #8
 8004432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004434:	4628      	mov	r0, r5
 8004436:	f001 fbbd 	bl	8005bb4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004442:	4618      	mov	r0, r3
 8004444:	f001 fc78 	bl	8005d38 <SDMMC_CmdBlockLength>
 8004448:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004476:	4618      	mov	r0, r3
 8004478:	3728      	adds	r7, #40	; 0x28
 800447a:	46bd      	mov	sp, r7
 800447c:	bdb0      	pop	{r4, r5, r7, pc}
 800447e:	bf00      	nop
 8004480:	004005ff 	.word	0x004005ff

08004484 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004484:	b5b0      	push	{r4, r5, r7, lr}
 8004486:	b094      	sub	sp, #80	; 0x50
 8004488:	af04      	add	r7, sp, #16
 800448a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800448c:	2301      	movs	r3, #1
 800448e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f001 fbd0 	bl	8005c3a <SDIO_GetPowerState>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044a4:	e0b8      	b.n	8004618 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d02f      	beq.n	800450e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 fd4a 	bl	8005f4c <SDMMC_CmdSendCID>
 80044b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <SD_InitCard+0x40>
    {
      return errorstate;
 80044c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c2:	e0a9      	b.n	8004618 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 fbf7 	bl	8005cbe <SDIO_GetResponse>
 80044d0:	4602      	mov	r2, r0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2104      	movs	r1, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f001 fbee 	bl	8005cbe <SDIO_GetResponse>
 80044e2:	4602      	mov	r2, r0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2108      	movs	r1, #8
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fbe5 	bl	8005cbe <SDIO_GetResponse>
 80044f4:	4602      	mov	r2, r0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	210c      	movs	r1, #12
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fbdc 	bl	8005cbe <SDIO_GetResponse>
 8004506:	4602      	mov	r2, r0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	2b03      	cmp	r3, #3
 8004514:	d00d      	beq.n	8004532 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f107 020e 	add.w	r2, r7, #14
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fd50 	bl	8005fc6 <SDMMC_CmdSetRelAdd>
 8004526:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <SD_InitCard+0xae>
    {
      return errorstate;
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	e072      	b.n	8004618 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	2b03      	cmp	r3, #3
 8004538:	d036      	beq.n	80045a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800453a:	89fb      	ldrh	r3, [r7, #14]
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f001 fd1a 	bl	8005f88 <SDMMC_CmdSendCSD>
 8004554:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <SD_InitCard+0xdc>
    {
      return errorstate;
 800455c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455e:	e05b      	b.n	8004618 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f001 fba9 	bl	8005cbe <SDIO_GetResponse>
 800456c:	4602      	mov	r2, r0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2104      	movs	r1, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f001 fba0 	bl	8005cbe <SDIO_GetResponse>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2108      	movs	r1, #8
 800458a:	4618      	mov	r0, r3
 800458c:	f001 fb97 	bl	8005cbe <SDIO_GetResponse>
 8004590:	4602      	mov	r2, r0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	210c      	movs	r1, #12
 800459c:	4618      	mov	r0, r3
 800459e:	f001 fb8e 	bl	8005cbe <SDIO_GetResponse>
 80045a2:	4602      	mov	r2, r0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2104      	movs	r1, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 fb85 	bl	8005cbe <SDIO_GetResponse>
 80045b4:	4603      	mov	r3, r0
 80045b6:	0d1a      	lsrs	r2, r3, #20
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80045bc:	f107 0310 	add.w	r3, r7, #16
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fd20 	bl	8004008 <HAL_SD_GetCardCSD>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045d2:	e021      	b.n	8004618 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	2200      	movs	r2, #0
 80045e0:	461c      	mov	r4, r3
 80045e2:	4615      	mov	r5, r2
 80045e4:	4622      	mov	r2, r4
 80045e6:	462b      	mov	r3, r5
 80045e8:	4608      	mov	r0, r1
 80045ea:	f001 fbc7 	bl	8005d7c <SDMMC_CmdSelDesel>
 80045ee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80045f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <SD_InitCard+0x176>
  {
    return errorstate;
 80045f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f8:	e00e      	b.n	8004618 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681d      	ldr	r5, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	466c      	mov	r4, sp
 8004602:	f103 0210 	add.w	r2, r3, #16
 8004606:	ca07      	ldmia	r2, {r0, r1, r2}
 8004608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800460c:	3304      	adds	r3, #4
 800460e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004610:	4628      	mov	r0, r5
 8004612:	f001 facf 	bl	8005bb4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3740      	adds	r7, #64	; 0x40
 800461c:	46bd      	mov	sp, r7
 800461e:	bdb0      	pop	{r4, r5, r7, pc}

08004620 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f001 fbc2 	bl	8005dc2 <SDMMC_CmdGoIdleState>
 800463e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	e072      	b.n	8004730 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f001 fbd5 	bl	8005dfe <SDMMC_CmdOperCond>
 8004654:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00d      	beq.n	8004678 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fbab 	bl	8005dc2 <SDMMC_CmdGoIdleState>
 800466c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	e05b      	b.n	8004730 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	2b01      	cmp	r3, #1
 8004684:	d137      	bne.n	80046f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f001 fbd5 	bl	8005e3c <SDMMC_CmdAppCommand>
 8004692:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d02d      	beq.n	80046f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800469a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800469e:	e047      	b.n	8004730 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fbc8 	bl	8005e3c <SDMMC_CmdAppCommand>
 80046ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	e03b      	b.n	8004730 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	491e      	ldr	r1, [pc, #120]	; (8004738 <SD_PowerON+0x118>)
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fbde 	bl	8005e80 <SDMMC_CmdAppOperCommand>
 80046c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046d0:	e02e      	b.n	8004730 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 faf0 	bl	8005cbe <SDIO_GetResponse>
 80046de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	0fdb      	lsrs	r3, r3, #31
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <SD_PowerON+0xcc>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <SD_PowerON+0xce>
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]

    count++;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d802      	bhi.n	8004706 <SD_PowerON+0xe6>
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0cc      	beq.n	80046a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800470c:	4293      	cmp	r3, r2
 800470e:	d902      	bls.n	8004716 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004714:	e00c      	b.n	8004730 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
 8004726:	e002      	b.n	800472e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	c1100000 	.word	0xc1100000

0800473c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f001 fab3 	bl	8005cbe <SDIO_GetResponse>
 8004758:	4603      	mov	r3, r0
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004762:	d102      	bne.n	800476a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004768:	e02f      	b.n	80047ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800476a:	f107 030c 	add.w	r3, r7, #12
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f879 	bl	8004868 <SD_FindSCR>
 8004776:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	e023      	b.n	80047ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01c      	beq.n	80047c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f001 fb4f 	bl	8005e3c <SDMMC_CmdAppCommand>
 800479e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	e00f      	b.n	80047ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2102      	movs	r1, #2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 fb88 	bl	8005ec6 <SDMMC_CmdBusWidth>
 80047b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	e003      	b.n	80047ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e001      	b.n	80047ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 fa68 	bl	8005cbe <SDIO_GetResponse>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f8:	d102      	bne.n	8004800 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80047fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047fe:	e02f      	b.n	8004860 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004800:	f107 030c 	add.w	r3, r7, #12
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f82e 	bl	8004868 <SD_FindSCR>
 800480c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	e023      	b.n	8004860 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01c      	beq.n	800485c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f001 fb04 	bl	8005e3c <SDMMC_CmdAppCommand>
 8004834:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	e00f      	b.n	8004860 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f001 fb3d 	bl	8005ec6 <SDMMC_CmdBusWidth>
 800484c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	e003      	b.n	8004860 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004858:	2300      	movs	r3, #0
 800485a:	e001      	b.n	8004860 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800485c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b08f      	sub	sp, #60	; 0x3c
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004872:	f7fc ffed 	bl	8001850 <HAL_GetTick>
 8004876:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2108      	movs	r1, #8
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fa52 	bl	8005d38 <SDMMC_CmdBlockLength>
 8004894:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	e0b2      	b.n	8004a06 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f001 fac5 	bl	8005e3c <SDMMC_CmdAppCommand>
 80048b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <SD_FindSCR+0x56>
  {
    return errorstate;
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	e0a3      	b.n	8004a06 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048be:	f04f 33ff 	mov.w	r3, #4294967295
 80048c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80048c4:	2308      	movs	r3, #8
 80048c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80048c8:	2330      	movs	r3, #48	; 0x30
 80048ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80048cc:	2302      	movs	r3, #2
 80048ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80048d4:	2301      	movs	r3, #1
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f107 0210 	add.w	r2, r7, #16
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 f9fd 	bl	8005ce2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 fb0c 	bl	8005f0a <SDMMC_CmdSendSCR>
 80048f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02a      	beq.n	8004950 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	e083      	b.n	8004a06 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00f      	beq.n	800492c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f107 0208 	add.w	r2, r7, #8
 8004918:	18d4      	adds	r4, r2, r3
 800491a:	4608      	mov	r0, r1
 800491c:	f001 f974 	bl	8005c08 <SDIO_ReadFIFO>
 8004920:	4603      	mov	r3, r0
 8004922:	6023      	str	r3, [r4, #0]
      index++;
 8004924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004926:	3301      	adds	r3, #1
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
 800492a:	e006      	b.n	800493a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d012      	beq.n	8004960 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800493a:	f7fc ff89 	bl	8001850 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d102      	bne.n	8004950 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800494a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800494e:	e05a      	b.n	8004a06 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0cf      	beq.n	80048fe <SD_FindSCR+0x96>
 800495e:	e000      	b.n	8004962 <SD_FindSCR+0xfa>
      break;
 8004960:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2208      	movs	r2, #8
 8004976:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004978:	2308      	movs	r3, #8
 800497a:	e044      	b.n	8004a06 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2202      	movs	r2, #2
 8004990:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004992:	2302      	movs	r3, #2
 8004994:	e037      	b.n	8004a06 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2220      	movs	r2, #32
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80049ac:	2320      	movs	r3, #32
 80049ae:	e02a      	b.n	8004a06 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	061a      	lsls	r2, r3, #24
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	0e1b      	lsrs	r3, r3, #24
 80049d6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	601a      	str	r2, [r3, #0]
    scr++;
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	3304      	adds	r3, #4
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	061a      	lsls	r2, r3, #24
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	0e1b      	lsrs	r3, r3, #24
 80049fe:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	373c      	adds	r7, #60	; 0x3c
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd90      	pop	{r4, r7, pc}

08004a0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e076      	b.n	8004b0e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d108      	bne.n	8004a3a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a30:	d009      	beq.n	8004a46 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	61da      	str	r2, [r3, #28]
 8004a38:	e005      	b.n	8004a46 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7fc fbd1 	bl	8001208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	ea42 0103 	orr.w	r1, r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	0c1a      	lsrs	r2, r3, #16
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f002 0204 	and.w	r2, r2, #4
 8004aec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004afc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <HAL_SRAM_Init+0x1c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b30:	d101      	bne.n	8004b36 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e038      	b.n	8004ba8 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7fc fdca 	bl	80016e4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3308      	adds	r3, #8
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f000 ff54 	bl	8005a08 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	f000 ffb6 	bl	8005adc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6858      	ldr	r0, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	f000 ffe1 	bl	8005b44 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6892      	ldr	r2, [r2, #8]
 8004b8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	f041 0101 	orr.w	r1, r1, #1
 8004b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e041      	b.n	8004c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc fbb6 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f000 fab2 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e041      	b.n	8004ce4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7fc fb97 	bl	80013a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f000 fa63 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e041      	b.n	8004d82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fc fad2 	bl	80012bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f000 fa14 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_TIM_OC_ConfigChannel+0x1e>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e048      	b.n	8004e3c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d839      	bhi.n	8004e2c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004df5 	.word	0x08004df5
 8004dc4:	08004e2d 	.word	0x08004e2d
 8004dc8:	08004e2d 	.word	0x08004e2d
 8004dcc:	08004e2d 	.word	0x08004e2d
 8004dd0:	08004e03 	.word	0x08004e03
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004e2d 	.word	0x08004e2d
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e2d 	.word	0x08004e2d
 8004de8:	08004e2d 	.word	0x08004e2d
 8004dec:	08004e2d 	.word	0x08004e2d
 8004df0:	08004e1f 	.word	0x08004e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fa26 	bl	800524c <TIM_OC1_SetConfig>
      break;
 8004e00:	e017      	b.n	8004e32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fa8f 	bl	800532c <TIM_OC2_SetConfig>
      break;
 8004e0e:	e010      	b.n	8004e32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fafc 	bl	8005414 <TIM_OC3_SetConfig>
      break;
 8004e1c:	e009      	b.n	8004e32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fb69 	bl	80054fc <TIM_OC4_SetConfig>
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e0ae      	b.n	8004fc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b0c      	cmp	r3, #12
 8004e6e:	f200 809f 	bhi.w	8004fb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004ead 	.word	0x08004ead
 8004e7c:	08004fb1 	.word	0x08004fb1
 8004e80:	08004fb1 	.word	0x08004fb1
 8004e84:	08004fb1 	.word	0x08004fb1
 8004e88:	08004eed 	.word	0x08004eed
 8004e8c:	08004fb1 	.word	0x08004fb1
 8004e90:	08004fb1 	.word	0x08004fb1
 8004e94:	08004fb1 	.word	0x08004fb1
 8004e98:	08004f2f 	.word	0x08004f2f
 8004e9c:	08004fb1 	.word	0x08004fb1
 8004ea0:	08004fb1 	.word	0x08004fb1
 8004ea4:	08004fb1 	.word	0x08004fb1
 8004ea8:	08004f6f 	.word	0x08004f6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f9ca 	bl	800524c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0208 	orr.w	r2, r2, #8
 8004ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0204 	bic.w	r2, r2, #4
 8004ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6999      	ldr	r1, [r3, #24]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	619a      	str	r2, [r3, #24]
      break;
 8004eea:	e064      	b.n	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fa1a 	bl	800532c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6999      	ldr	r1, [r3, #24]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	021a      	lsls	r2, r3, #8
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	619a      	str	r2, [r3, #24]
      break;
 8004f2c:	e043      	b.n	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fa6d 	bl	8005414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0208 	orr.w	r2, r2, #8
 8004f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0204 	bic.w	r2, r2, #4
 8004f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69d9      	ldr	r1, [r3, #28]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	61da      	str	r2, [r3, #28]
      break;
 8004f6c:	e023      	b.n	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fac1 	bl	80054fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69d9      	ldr	r1, [r3, #28]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	021a      	lsls	r2, r3, #8
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	61da      	str	r2, [r3, #28]
      break;
 8004fae:	e002      	b.n	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e0b4      	b.n	800514e <HAL_TIM_ConfigClockSource+0x186>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501c:	d03e      	beq.n	800509c <HAL_TIM_ConfigClockSource+0xd4>
 800501e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005022:	f200 8087 	bhi.w	8005134 <HAL_TIM_ConfigClockSource+0x16c>
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502a:	f000 8086 	beq.w	800513a <HAL_TIM_ConfigClockSource+0x172>
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005032:	d87f      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b70      	cmp	r3, #112	; 0x70
 8005036:	d01a      	beq.n	800506e <HAL_TIM_ConfigClockSource+0xa6>
 8005038:	2b70      	cmp	r3, #112	; 0x70
 800503a:	d87b      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b60      	cmp	r3, #96	; 0x60
 800503e:	d050      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005040:	2b60      	cmp	r3, #96	; 0x60
 8005042:	d877      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b50      	cmp	r3, #80	; 0x50
 8005046:	d03c      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005048:	2b50      	cmp	r3, #80	; 0x50
 800504a:	d873      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d058      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x13a>
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d86f      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b30      	cmp	r3, #48	; 0x30
 8005056:	d064      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x15a>
 8005058:	2b30      	cmp	r3, #48	; 0x30
 800505a:	d86b      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d060      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x15a>
 8005060:	2b20      	cmp	r3, #32
 8005062:	d867      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d05c      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x15a>
 8005068:	2b10      	cmp	r3, #16
 800506a:	d05a      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	e062      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800507e:	f000 fb08 	bl	8005692 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005090:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	609a      	str	r2, [r3, #8]
      break;
 800509a:	e04f      	b.n	800513c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ac:	f000 faf1 	bl	8005692 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050be:	609a      	str	r2, [r3, #8]
      break;
 80050c0:	e03c      	b.n	800513c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	461a      	mov	r2, r3
 80050d0:	f000 fa68 	bl	80055a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2150      	movs	r1, #80	; 0x50
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fabf 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 80050e0:	e02c      	b.n	800513c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ee:	461a      	mov	r2, r3
 80050f0:	f000 fa86 	bl	8005600 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2160      	movs	r1, #96	; 0x60
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 faaf 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8005100:	e01c      	b.n	800513c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	461a      	mov	r2, r3
 8005110:	f000 fa48 	bl	80055a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2140      	movs	r1, #64	; 0x40
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fa9f 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8005120:	e00c      	b.n	800513c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f000 fa96 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8005132:	e003      	b.n	800513c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      break;
 8005138:	e000      	b.n	800513c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800513a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a33      	ldr	r2, [pc, #204]	; (8005238 <TIM_Base_SetConfig+0xe0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a32      	ldr	r2, [pc, #200]	; (800523c <TIM_Base_SetConfig+0xe4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d00b      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a2f      	ldr	r2, [pc, #188]	; (8005240 <TIM_Base_SetConfig+0xe8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a2e      	ldr	r2, [pc, #184]	; (8005244 <TIM_Base_SetConfig+0xec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_Base_SetConfig+0x40>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a2d      	ldr	r2, [pc, #180]	; (8005248 <TIM_Base_SetConfig+0xf0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d108      	bne.n	80051aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a22      	ldr	r2, [pc, #136]	; (8005238 <TIM_Base_SetConfig+0xe0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <TIM_Base_SetConfig+0x82>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a21      	ldr	r2, [pc, #132]	; (800523c <TIM_Base_SetConfig+0xe4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00f      	beq.n	80051da <TIM_Base_SetConfig+0x82>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d00b      	beq.n	80051da <TIM_Base_SetConfig+0x82>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a1e      	ldr	r2, [pc, #120]	; (8005240 <TIM_Base_SetConfig+0xe8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d007      	beq.n	80051da <TIM_Base_SetConfig+0x82>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <TIM_Base_SetConfig+0xec>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d003      	beq.n	80051da <TIM_Base_SetConfig+0x82>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <TIM_Base_SetConfig+0xf0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d108      	bne.n	80051ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a09      	ldr	r2, [pc, #36]	; (8005238 <TIM_Base_SetConfig+0xe0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0xc8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a08      	ldr	r2, [pc, #32]	; (800523c <TIM_Base_SetConfig+0xe4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d103      	bne.n	8005228 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	615a      	str	r2, [r3, #20]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40013400 	.word	0x40013400
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40000c00 	.word	0x40000c00

0800524c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f023 0201 	bic.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 0302 	bic.w	r3, r3, #2
 8005294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a20      	ldr	r2, [pc, #128]	; (8005324 <TIM_OC1_SetConfig+0xd8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_OC1_SetConfig+0x64>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <TIM_OC1_SetConfig+0xdc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d10c      	bne.n	80052ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0308 	bic.w	r3, r3, #8
 80052b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <TIM_OC1_SetConfig+0xd8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC1_SetConfig+0x8e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a14      	ldr	r2, [pc, #80]	; (8005328 <TIM_OC1_SetConfig+0xdc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d111      	bne.n	80052fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40013400 	.word	0x40013400

0800532c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0210 	bic.w	r2, r3, #16
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a21      	ldr	r2, [pc, #132]	; (800540c <TIM_OC2_SetConfig+0xe0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC2_SetConfig+0x68>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a20      	ldr	r2, [pc, #128]	; (8005410 <TIM_OC2_SetConfig+0xe4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10d      	bne.n	80053b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a16      	ldr	r2, [pc, #88]	; (800540c <TIM_OC2_SetConfig+0xe0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC2_SetConfig+0x94>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a15      	ldr	r2, [pc, #84]	; (8005410 <TIM_OC2_SetConfig+0xe4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d113      	bne.n	80053e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr
 800540c:	40012c00 	.word	0x40012c00
 8005410:	40013400 	.word	0x40013400

08005414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800545c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <TIM_OC3_SetConfig+0xe0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_OC3_SetConfig+0x66>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <TIM_OC3_SetConfig+0xe4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10d      	bne.n	8005496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a16      	ldr	r2, [pc, #88]	; (80054f4 <TIM_OC3_SetConfig+0xe0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_OC3_SetConfig+0x92>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <TIM_OC3_SetConfig+0xe4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d113      	bne.n	80054ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	621a      	str	r2, [r3, #32]
}
 80054e8:	bf00      	nop
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40013400 	.word	0x40013400

080054fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a11      	ldr	r2, [pc, #68]	; (800559c <TIM_OC4_SetConfig+0xa0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC4_SetConfig+0x68>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a10      	ldr	r2, [pc, #64]	; (80055a0 <TIM_OC4_SetConfig+0xa4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d109      	bne.n	8005578 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	019b      	lsls	r3, r3, #6
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40013400 	.word	0x40013400

080055a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0201 	bic.w	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f023 030a 	bic.w	r3, r3, #10
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0210 	bic.w	r2, r3, #16
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	031b      	lsls	r3, r3, #12
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800563c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	621a      	str	r2, [r3, #32]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	f043 0307 	orr.w	r3, r3, #7
 8005680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	609a      	str	r2, [r3, #8]
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	021a      	lsls	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	609a      	str	r2, [r3, #8]
}
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e050      	b.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1b      	ldr	r2, [pc, #108]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a19      	ldr	r2, [pc, #100]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573e:	d00e      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a15      	ldr	r2, [pc, #84]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d10c      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4313      	orrs	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40013400 	.word	0x40013400
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800
 80057a4:	40000c00 	.word	0x40000c00

080057a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e03d      	b.n	8005840 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e042      	b.n	80058e2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fb fe6f 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2224      	movs	r2, #36	; 0x24
 800587a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800588c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f82c 	bl	80058ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005926:	f023 030c 	bic.w	r3, r3, #12
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	430b      	orrs	r3, r1
 8005932:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2c      	ldr	r2, [pc, #176]	; (8005a00 <UART_SetConfig+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d103      	bne.n	800595c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005954:	f7fd fafc 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	e002      	b.n	8005962 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800595c:	f7fd fae4 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8005960:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009a      	lsls	r2, r3, #2
 800596c:	441a      	add	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <UART_SetConfig+0x118>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	0119      	lsls	r1, r3, #4
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009a      	lsls	r2, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	fbb2 f2f3 	udiv	r2, r2, r3
 8005998:	4b1a      	ldr	r3, [pc, #104]	; (8005a04 <UART_SetConfig+0x118>)
 800599a:	fba3 0302 	umull	r0, r3, r3, r2
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	2064      	movs	r0, #100	; 0x64
 80059a2:	fb00 f303 	mul.w	r3, r0, r3
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	3332      	adds	r3, #50	; 0x32
 80059ac:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <UART_SetConfig+0x118>)
 80059ae:	fba2 2303 	umull	r2, r3, r2, r3
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b8:	4419      	add	r1, r3
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009a      	lsls	r2, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <UART_SetConfig+0x118>)
 80059d2:	fba3 0302 	umull	r0, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	2064      	movs	r0, #100	; 0x64
 80059da:	fb00 f303 	mul.w	r3, r0, r3
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	3332      	adds	r3, #50	; 0x32
 80059e4:	4a07      	ldr	r2, [pc, #28]	; (8005a04 <UART_SetConfig+0x118>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	f003 020f 	and.w	r2, r3, #15
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	440a      	add	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059f8:	bf00      	nop
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40013800 	.word	0x40013800
 8005a04:	51eb851f 	.word	0x51eb851f

08005a08 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	f023 0101 	bic.w	r1, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d102      	bne.n	8005a38 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005a32:	2340      	movs	r3, #64	; 0x40
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e001      	b.n	8005a3c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005a48:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005a4e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005a54:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005a5a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005a60:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005a66:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005a6c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005a72:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005a78:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005a96:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <FSMC_NORSRAM_Init+0xd0>)
 8005a98:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aa0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005aa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	ea02 0103 	and.w	r1, r2, r3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4319      	orrs	r1, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	0008fb7f 	.word	0x0008fb7f

08005adc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	431a      	orrs	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	051b      	lsls	r3, r3, #20
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	3b02      	subs	r3, #2
 8005b22:	061b      	lsls	r3, r3, #24
 8005b24:	431a      	orrs	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	3201      	adds	r2, #1
 8005b30:	4319      	orrs	r1, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b58:	d11d      	bne.n	8005b96 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b62:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	6811      	ldr	r1, [r2, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	6852      	ldr	r2, [r2, #4]
 8005b6e:	0112      	lsls	r2, r2, #4
 8005b70:	4311      	orrs	r1, r2
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	6892      	ldr	r2, [r2, #8]
 8005b76:	0212      	lsls	r2, r2, #8
 8005b78:	4311      	orrs	r1, r2
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	6992      	ldr	r2, [r2, #24]
 8005b7e:	4311      	orrs	r1, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	68d2      	ldr	r2, [r2, #12]
 8005b84:	0412      	lsls	r2, r2, #16
 8005b86:	430a      	orrs	r2, r1
 8005b88:	ea43 0102 	orr.w	r1, r3, r2
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b94:	e005      	b.n	8005ba2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	cff00000 	.word	0xcff00000

08005bb4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	f107 001c 	add.w	r0, r7, #28
 8005bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005bca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005bce:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005bd2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005bd6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005bda:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005bde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005bee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	b004      	add	sp, #16
 8005c06:	4770      	bx	lr

08005c08 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr

08005c20 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr

08005c3a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0303 	and.w	r3, r3, #3
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c72:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005c78:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005c7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005c8e:	f023 030f 	bic.w	r3, r3, #15
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	b2db      	uxtb	r3, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	461a      	mov	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
}  
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr

08005ce2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005d0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005d14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0

}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005d46:	2310      	movs	r3, #16
 8005d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d4a:	2340      	movs	r3, #64	; 0x40
 8005d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d58:	f107 0308 	add.w	r3, r7, #8
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff ff78 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d68:	2110      	movs	r1, #16
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f94c 	bl	8006008 <SDMMC_GetCmdResp1>
 8005d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d72:	69fb      	ldr	r3, [r7, #28]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005d8c:	2307      	movs	r3, #7
 8005d8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d9c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d9e:	f107 0310 	add.w	r3, r7, #16
 8005da2:	4619      	mov	r1, r3
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff ff55 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dae:	2107      	movs	r1, #7
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f929 	bl	8006008 <SDMMC_GetCmdResp1>
 8005db6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3728      	adds	r7, #40	; 0x28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b088      	sub	sp, #32
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005de0:	f107 0308 	add.w	r3, r7, #8
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff ff34 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fb41 	bl	8006474 <SDMMC_GetCmdError>
 8005df2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005df4:	69fb      	ldr	r3, [r7, #28]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b088      	sub	sp, #32
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005e06:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005e0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e10:	2340      	movs	r3, #64	; 0x40
 8005e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e1e:	f107 0308 	add.w	r3, r7, #8
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ff15 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fad4 	bl	80063d8 <SDMMC_GetCmdResp7>
 8005e30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e32:	69fb      	ldr	r3, [r7, #28]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005e4a:	2337      	movs	r3, #55	; 0x37
 8005e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e4e:	2340      	movs	r3, #64	; 0x40
 8005e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e5c:	f107 0308 	add.w	r3, r7, #8
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff fef6 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6c:	2137      	movs	r1, #55	; 0x37
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f8ca 	bl	8006008 <SDMMC_GetCmdResp1>
 8005e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e76:	69fb      	ldr	r3, [r7, #28]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3720      	adds	r7, #32
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005e96:	2329      	movs	r3, #41	; 0x29
 8005e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e9a:	2340      	movs	r3, #64	; 0x40
 8005e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ea6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ea8:	f107 0308 	add.w	r3, r7, #8
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff fed0 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f9dd 	bl	8006274 <SDMMC_GetCmdResp3>
 8005eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3720      	adds	r7, #32
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b088      	sub	sp, #32
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005ed4:	2306      	movs	r3, #6
 8005ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ee6:	f107 0308 	add.w	r3, r7, #8
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff feb1 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef6:	2106      	movs	r1, #6
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f885 	bl	8006008 <SDMMC_GetCmdResp1>
 8005efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f00:	69fb      	ldr	r3, [r7, #28]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b088      	sub	sp, #32
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005f16:	2333      	movs	r3, #51	; 0x33
 8005f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f28:	f107 0308 	add.w	r3, r7, #8
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fe90 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f38:	2133      	movs	r1, #51	; 0x33
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f864 	bl	8006008 <SDMMC_GetCmdResp1>
 8005f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f42:	69fb      	ldr	r3, [r7, #28]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005f5c:	23c0      	movs	r3, #192	; 0xc0
 8005f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f6a:	f107 0308 	add.w	r3, r7, #8
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fe6f 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f934 	bl	80061e4 <SDMMC_GetCmdResp2>
 8005f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005f96:	2309      	movs	r3, #9
 8005f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005f9a:	23c0      	movs	r3, #192	; 0xc0
 8005f9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fa8:	f107 0308 	add.w	r3, r7, #8
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff fe50 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f915 	bl	80061e4 <SDMMC_GetCmdResp2>
 8005fba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b088      	sub	sp, #32
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fd8:	2340      	movs	r3, #64	; 0x40
 8005fda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fe31 	bl	8005c54 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	2103      	movs	r1, #3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f978 	bl	80062ec <SDMMC_GetCmdResp6>
 8005ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006016:	4b70      	ldr	r3, [pc, #448]	; (80061d8 <SDMMC_GetCmdResp1+0x1d0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a70      	ldr	r2, [pc, #448]	; (80061dc <SDMMC_GetCmdResp1+0x1d4>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	0a5a      	lsrs	r2, r3, #9
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	fb02 f303 	mul.w	r3, r2, r3
 8006028:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	1e5a      	subs	r2, r3, #1
 800602e:	61fa      	str	r2, [r7, #28]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006038:	e0c9      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0ef      	beq.n	800602a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1ea      	bne.n	800602a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2204      	movs	r2, #4
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006066:	2304      	movs	r3, #4
 8006068:	e0b1      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800607c:	2301      	movs	r3, #1
 800607e:	e0a6      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	22c5      	movs	r2, #197	; 0xc5
 8006084:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff fe0d 	bl	8005ca6 <SDIO_GetCommandResponse>
 800608c:	4603      	mov	r3, r0
 800608e:	461a      	mov	r2, r3
 8006090:	7afb      	ldrb	r3, [r7, #11]
 8006092:	4293      	cmp	r3, r2
 8006094:	d001      	beq.n	800609a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006096:	2301      	movs	r3, #1
 8006098:	e099      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800609a:	2100      	movs	r1, #0
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff fe0e 	bl	8005cbe <SDIO_GetResponse>
 80060a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4b4e      	ldr	r3, [pc, #312]	; (80061e0 <SDMMC_GetCmdResp1+0x1d8>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e08d      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	da02      	bge.n	80060be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80060b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060bc:	e087      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	e080      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	e079      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80060e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060e8:	e071      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80060f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f8:	e069      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006108:	e061      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006114:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006118:	e059      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006128:	e051      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006138:	e049      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006148:	e041      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006158:	e039      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006168:	e031      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006174:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006178:	e029      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006184:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006188:	e021      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006194:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006198:	e019      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80061a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061a8:	e011      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80061b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061b8:	e009      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80061c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80061c8:	e001      	b.n	80061ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80061ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20000000 	.word	0x20000000
 80061dc:	10624dd3 	.word	0x10624dd3
 80061e0:	fdffe008 	.word	0xfdffe008

080061e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061ec:	4b1f      	ldr	r3, [pc, #124]	; (800626c <SDMMC_GetCmdResp2+0x88>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <SDMMC_GetCmdResp2+0x8c>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	0a5b      	lsrs	r3, r3, #9
 80061f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061fc:	fb02 f303 	mul.w	r3, r2, r3
 8006200:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1e5a      	subs	r2, r3, #1
 8006206:	60fa      	str	r2, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800620c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006210:	e026      	b.n	8006260 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006216:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0ef      	beq.n	8006202 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ea      	bne.n	8006202 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2204      	movs	r2, #4
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800623e:	2304      	movs	r3, #4
 8006240:	e00e      	b.n	8006260 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d004      	beq.n	8006258 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006254:	2301      	movs	r3, #1
 8006256:	e003      	b.n	8006260 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	22c5      	movs	r2, #197	; 0xc5
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000000 	.word	0x20000000
 8006270:	10624dd3 	.word	0x10624dd3

08006274 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800627c:	4b19      	ldr	r3, [pc, #100]	; (80062e4 <SDMMC_GetCmdResp3+0x70>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a19      	ldr	r2, [pc, #100]	; (80062e8 <SDMMC_GetCmdResp3+0x74>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	0a5b      	lsrs	r3, r3, #9
 8006288:	f241 3288 	movw	r2, #5000	; 0x1388
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1e5a      	subs	r2, r3, #1
 8006296:	60fa      	str	r2, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800629c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062a0:	e01b      	b.n	80062da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ef      	beq.n	8006292 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1ea      	bne.n	8006292 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2204      	movs	r2, #4
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062ce:	2304      	movs	r3, #4
 80062d0:	e003      	b.n	80062da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	22c5      	movs	r2, #197	; 0xc5
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	20000000 	.word	0x20000000
 80062e8:	10624dd3 	.word	0x10624dd3

080062ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	460b      	mov	r3, r1
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062fa:	4b35      	ldr	r3, [pc, #212]	; (80063d0 <SDMMC_GetCmdResp6+0xe4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a35      	ldr	r2, [pc, #212]	; (80063d4 <SDMMC_GetCmdResp6+0xe8>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	0a5b      	lsrs	r3, r3, #9
 8006306:	f241 3288 	movw	r2, #5000	; 0x1388
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	1e5a      	subs	r2, r3, #1
 8006314:	61fa      	str	r2, [r7, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800631a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800631e:	e052      	b.n	80063c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0ef      	beq.n	8006310 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1ea      	bne.n	8006310 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2204      	movs	r2, #4
 800634a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800634c:	2304      	movs	r3, #4
 800634e:	e03a      	b.n	80063c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006362:	2301      	movs	r3, #1
 8006364:	e02f      	b.n	80063c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff fc9d 	bl	8005ca6 <SDIO_GetCommandResponse>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	4293      	cmp	r3, r2
 8006374:	d001      	beq.n	800637a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006376:	2301      	movs	r3, #1
 8006378:	e025      	b.n	80063c6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	22c5      	movs	r2, #197	; 0xc5
 800637e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006380:	2100      	movs	r1, #0
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff fc9b 	bl	8005cbe <SDIO_GetResponse>
 8006388:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	0c1b      	lsrs	r3, r3, #16
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800639e:	2300      	movs	r3, #0
 80063a0:	e011      	b.n	80063c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80063ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063b0:	e009      	b.n	80063c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80063bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063c0:	e001      	b.n	80063c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000000 	.word	0x20000000
 80063d4:	10624dd3 	.word	0x10624dd3

080063d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063e0:	4b22      	ldr	r3, [pc, #136]	; (800646c <SDMMC_GetCmdResp7+0x94>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a22      	ldr	r2, [pc, #136]	; (8006470 <SDMMC_GetCmdResp7+0x98>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	0a5b      	lsrs	r3, r3, #9
 80063ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1e5a      	subs	r2, r3, #1
 80063fa:	60fa      	str	r2, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006404:	e02c      	b.n	8006460 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0ef      	beq.n	80063f6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1ea      	bne.n	80063f6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2204      	movs	r2, #4
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006432:	2304      	movs	r3, #4
 8006434:	e014      	b.n	8006460 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d004      	beq.n	800644c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006448:	2301      	movs	r3, #1
 800644a:	e009      	b.n	8006460 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2240      	movs	r2, #64	; 0x40
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800645e:	2300      	movs	r3, #0
  
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	20000000 	.word	0x20000000
 8006470:	10624dd3 	.word	0x10624dd3

08006474 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <SDMMC_GetCmdError+0x4c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a10      	ldr	r2, [pc, #64]	; (80064c4 <SDMMC_GetCmdError+0x50>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	0a5b      	lsrs	r3, r3, #9
 8006488:	f241 3288 	movw	r2, #5000	; 0x1388
 800648c:	fb02 f303 	mul.w	r3, r2, r3
 8006490:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1e5a      	subs	r2, r3, #1
 8006496:	60fa      	str	r2, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800649c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064a0:	e009      	b.n	80064b6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0f1      	beq.n	8006492 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	22c5      	movs	r2, #197	; 0xc5
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	20000000 	.word	0x20000000
 80064c4:	10624dd3 	.word	0x10624dd3

080064c8 <memset>:
 80064c8:	4603      	mov	r3, r0
 80064ca:	4402      	add	r2, r0
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d100      	bne.n	80064d2 <memset+0xa>
 80064d0:	4770      	bx	lr
 80064d2:	f803 1b01 	strb.w	r1, [r3], #1
 80064d6:	e7f9      	b.n	80064cc <memset+0x4>

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	2600      	movs	r6, #0
 80064dc:	4d0c      	ldr	r5, [pc, #48]	; (8006510 <__libc_init_array+0x38>)
 80064de:	4c0d      	ldr	r4, [pc, #52]	; (8006514 <__libc_init_array+0x3c>)
 80064e0:	1b64      	subs	r4, r4, r5
 80064e2:	10a4      	asrs	r4, r4, #2
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	f000 f81a 	bl	8006520 <_init>
 80064ec:	2600      	movs	r6, #0
 80064ee:	4d0a      	ldr	r5, [pc, #40]	; (8006518 <__libc_init_array+0x40>)
 80064f0:	4c0a      	ldr	r4, [pc, #40]	; (800651c <__libc_init_array+0x44>)
 80064f2:	1b64      	subs	r4, r4, r5
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006500:	4798      	blx	r3
 8006502:	3601      	adds	r6, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f855 3b04 	ldr.w	r3, [r5], #4
 800650a:	4798      	blx	r3
 800650c:	3601      	adds	r6, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	08006578 	.word	0x08006578
 8006514:	08006578 	.word	0x08006578
 8006518:	08006578 	.word	0x08006578
 800651c:	0800657c 	.word	0x0800657c

08006520 <_init>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr

0800652c <_fini>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	bf00      	nop
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr
