
3300 project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a2c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c50  08005c50  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005c50  08005c50  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c50  08005c50  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000014  08005c6c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08005c6c  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017484  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326b  00000000  00000000  00037504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123a  00000000  00000000  0003be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003166  00000000  00000000  0003d0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd6b  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6de1  00000000  00000000  0005bfa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000630c  00000000  00000000  00102d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00109090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000014 	.word	0x20000014
 8000200:	00000000 	.word	0x00000000
 8000204:	08005bf8 	.word	0x08005bf8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000018 	.word	0x20000018
 8000220:	08005bf8 	.word	0x08005bf8

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f001 fab2 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f84a 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 fd1a 	bl	8000c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000234:	f000 fcfa 	bl	8000c2c <MX_DMA_Init>
  MX_FSMC_Init();
 8000238:	f000 fd98 	bl	8000d6c <MX_FSMC_Init>
  MX_I2C1_Init();
 800023c:	f000 f978 	bl	8000530 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000240:	f000 fa08 	bl	8000654 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000244:	f000 fadc 	bl	8000800 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000248:	f000 fc9c 	bl	8000b84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800024c:	f000 fcc4 	bl	8000bd8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000250:	f000 f898 	bl	8000384 <MX_ADC1_Init>
  MX_RTC_Init();
 8000254:	f000 f99a 	bl	800058c <MX_RTC_Init>
  MX_TIM1_Init();
 8000258:	f000 fa32 	bl	80006c0 <MX_TIM1_Init>
  MX_TIM5_Init();
 800025c:	f000 fc1c 	bl	8000a98 <MX_TIM5_Init>
  MX_CAN_Init();
 8000260:	f000 f932 	bl	80004c8 <MX_CAN_Init>
  MX_TIM3_Init();
 8000264:	f000 fb18 	bl	8000898 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000268:	f000 fb96 	bl	8000998 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800026c:	2100      	movs	r1, #0
 800026e:	480f      	ldr	r0, [pc, #60]	; (80002ac <main+0x88>)
 8000270:	f004 fd00 	bl	8004c74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000274:	2100      	movs	r1, #0
 8000276:	480e      	ldr	r0, [pc, #56]	; (80002b0 <main+0x8c>)
 8000278:	f004 fcfc 	bl	8004c74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800027c:	2104      	movs	r1, #4
 800027e:	480c      	ldr	r0, [pc, #48]	; (80002b0 <main+0x8c>)
 8000280:	f004 fcf8 	bl	8004c74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000284:	2108      	movs	r1, #8
 8000286:	480b      	ldr	r0, [pc, #44]	; (80002b4 <main+0x90>)
 8000288:	f004 fcf4 	bl	8004c74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800028c:	210c      	movs	r1, #12
 800028e:	4809      	ldr	r0, [pc, #36]	; (80002b4 <main+0x90>)
 8000290:	f004 fcf0 	bl	8004c74 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 5;
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <main+0x94>)
 8000296:	2205      	movs	r2, #5
 8000298:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 8);
 800029a:	2208      	movs	r2, #8
 800029c:	4907      	ldr	r1, [pc, #28]	; (80002bc <main+0x98>)
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <main+0x9c>)
 80002a0:	f001 fbe6 	bl	8001a70 <HAL_ADC_Start_DMA>
    HAL_Delay(1);
 80002a4:	2001      	movs	r0, #1
 80002a6:	f001 fad5 	bl	8001854 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 8);
 80002aa:	e7f6      	b.n	800029a <main+0x76>
 80002ac:	2000018c 	.word	0x2000018c
 80002b0:	2000021c 	.word	0x2000021c
 80002b4:	20000264 	.word	0x20000264
 80002b8:	40012c00 	.word	0x40012c00
 80002bc:	200003cc 	.word	0x200003cc
 80002c0:	20000030 	.word	0x20000030

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b096      	sub	sp, #88	; 0x58
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f005 fc64 	bl	8005ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 031c 	add.w	r3, r7, #28
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000314:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000318:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800031e:	4618      	mov	r0, r3
 8000320:	f002 ffa6 	bl	8003270 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800032a:	f000 fdd7 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fa12 	bl	8003774 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000356:	f000 fdc1 	bl	8000edc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800035a:	2303      	movs	r3, #3
 800035c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800035e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000362:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000368:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f003 fb8f 	bl	8003a90 <HAL_RCCEx_PeriphCLKConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000378:	f000 fdb0 	bl	8000edc <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3758      	adds	r7, #88	; 0x58
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000394:	4b4a      	ldr	r3, [pc, #296]	; (80004c0 <MX_ADC1_Init+0x13c>)
 8000396:	4a4b      	ldr	r2, [pc, #300]	; (80004c4 <MX_ADC1_Init+0x140>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800039a:	4b49      	ldr	r3, [pc, #292]	; (80004c0 <MX_ADC1_Init+0x13c>)
 800039c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a2:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <MX_ADC1_Init+0x13c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a8:	4b45      	ldr	r3, [pc, #276]	; (80004c0 <MX_ADC1_Init+0x13c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ae:	4b44      	ldr	r3, [pc, #272]	; (80004c0 <MX_ADC1_Init+0x13c>)
 80003b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b6:	4b42      	ldr	r3, [pc, #264]	; (80004c0 <MX_ADC1_Init+0x13c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80003bc:	4b40      	ldr	r3, [pc, #256]	; (80004c0 <MX_ADC1_Init+0x13c>)
 80003be:	2208      	movs	r2, #8
 80003c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c2:	483f      	ldr	r0, [pc, #252]	; (80004c0 <MX_ADC1_Init+0x13c>)
 80003c4:	f001 fa6a 	bl	800189c <HAL_ADC_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003ce:	f000 fd85 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80003d2:	230a      	movs	r3, #10
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80003da:	2303      	movs	r3, #3
 80003dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4837      	ldr	r0, [pc, #220]	; (80004c0 <MX_ADC1_Init+0x13c>)
 80003e4:	f001 fcfc 	bl	8001de0 <HAL_ADC_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003ee:	f000 fd75 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80003f2:	230b      	movs	r3, #11
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4830      	ldr	r0, [pc, #192]	; (80004c0 <MX_ADC1_Init+0x13c>)
 8000400:	f001 fcee 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800040a:	f000 fd67 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800040e:	230c      	movs	r3, #12
 8000410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000412:	2303      	movs	r3, #3
 8000414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	4829      	ldr	r0, [pc, #164]	; (80004c0 <MX_ADC1_Init+0x13c>)
 800041c:	f001 fce0 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000426:	f000 fd59 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800042a:	230d      	movs	r3, #13
 800042c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800042e:	2304      	movs	r3, #4
 8000430:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4822      	ldr	r0, [pc, #136]	; (80004c0 <MX_ADC1_Init+0x13c>)
 8000438:	f001 fcd2 	bl	8001de0 <HAL_ADC_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000442:	f000 fd4b 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000446:	2305      	movs	r3, #5
 8000448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800044a:	2305      	movs	r3, #5
 800044c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	481b      	ldr	r0, [pc, #108]	; (80004c0 <MX_ADC1_Init+0x13c>)
 8000454:	f001 fcc4 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800045e:	f000 fd3d 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000462:	230e      	movs	r3, #14
 8000464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000466:	2306      	movs	r3, #6
 8000468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4814      	ldr	r0, [pc, #80]	; (80004c0 <MX_ADC1_Init+0x13c>)
 8000470:	f001 fcb6 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800047a:	f000 fd2f 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800047e:	230f      	movs	r3, #15
 8000480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000482:	2307      	movs	r3, #7
 8000484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	4619      	mov	r1, r3
 800048a:	480d      	ldr	r0, [pc, #52]	; (80004c0 <MX_ADC1_Init+0x13c>)
 800048c:	f001 fca8 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000496:	f000 fd21 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800049a:	2308      	movs	r3, #8
 800049c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800049e:	2308      	movs	r3, #8
 80004a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <MX_ADC1_Init+0x13c>)
 80004a8:	f001 fc9a 	bl	8001de0 <HAL_ADC_ConfigChannel>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80004b2:	f000 fd13 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000030 	.word	0x20000030
 80004c4:	40012400 	.word	0x40012400

080004c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <MX_CAN_Init+0x60>)
 80004ce:	4a17      	ldr	r2, [pc, #92]	; (800052c <MX_CAN_Init+0x64>)
 80004d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_CAN_Init+0x60>)
 80004d4:	2210      	movs	r2, #16
 80004d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <MX_CAN_Init+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_CAN_Init+0x60>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <MX_CAN_Init+0x60>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_CAN_Init+0x60>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <MX_CAN_Init+0x60>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_CAN_Init+0x60>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <MX_CAN_Init+0x60>)
 80004fe:	2200      	movs	r2, #0
 8000500:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_CAN_Init+0x60>)
 8000504:	2200      	movs	r2, #0
 8000506:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <MX_CAN_Init+0x60>)
 800050a:	2200      	movs	r2, #0
 800050c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_CAN_Init+0x60>)
 8000510:	2200      	movs	r2, #0
 8000512:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_CAN_Init+0x60>)
 8000516:	f001 fe65 	bl	80021e4 <HAL_CAN_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000520:	f000 fcdc 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000a4 	.word	0x200000a4
 800052c:	40006400 	.word	0x40006400

08000530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <MX_I2C1_Init+0x50>)
 8000536:	4a13      	ldr	r2, [pc, #76]	; (8000584 <MX_I2C1_Init+0x54>)
 8000538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_I2C1_Init+0x50>)
 800053c:	4a12      	ldr	r2, [pc, #72]	; (8000588 <MX_I2C1_Init+0x58>)
 800053e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_I2C1_Init+0x50>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_I2C1_Init+0x50>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_I2C1_Init+0x50>)
 800054e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_I2C1_Init+0x50>)
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_I2C1_Init+0x50>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <MX_I2C1_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_I2C1_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_I2C1_Init+0x50>)
 800056e:	f002 fd2f 	bl	8002fd0 <HAL_I2C_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000578:	f000 fcb0 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000cc 	.word	0x200000cc
 8000584:	40005400 	.word	0x40005400
 8000588:	000186a0 	.word	0x000186a0

0800058c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2100      	movs	r1, #0
 8000598:	460a      	mov	r2, r1
 800059a:	801a      	strh	r2, [r3, #0]
 800059c:	460a      	mov	r2, r1
 800059e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <MX_RTC_Init+0xc0>)
 80005ae:	4a28      	ldr	r2, [pc, #160]	; (8000650 <MX_RTC_Init+0xc4>)
 80005b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_RTC_Init+0xc0>)
 80005b4:	f04f 32ff 	mov.w	r2, #4294967295
 80005b8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_RTC_Init+0xc0>)
 80005bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005c2:	4822      	ldr	r0, [pc, #136]	; (800064c <MX_RTC_Init+0xc0>)
 80005c4:	f003 fbf2 	bl	8003dac <HAL_RTC_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80005ce:	f000 fc85 	bl	8000edc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80005da:	2300      	movs	r3, #0
 80005dc:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2201      	movs	r2, #1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <MX_RTC_Init+0xc0>)
 80005e8:	f003 fc6c 	bl	8003ec4 <HAL_RTC_SetTime>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80005f2:	f000 fc73 	bl	8000edc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005f6:	2301      	movs	r3, #1
 80005f8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80005fa:	2301      	movs	r3, #1
 80005fc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80005fe:	2301      	movs	r3, #1
 8000600:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000602:	2300      	movs	r3, #0
 8000604:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2201      	movs	r2, #1
 800060c:	4619      	mov	r1, r3
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <MX_RTC_Init+0xc0>)
 8000610:	f003 fdc8 	bl	80041a4 <HAL_RTC_SetDate>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800061a:	f000 fc5f 	bl	8000edc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800061e:	2300      	movs	r3, #0
 8000620:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000622:	2300      	movs	r3, #0
 8000624:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000626:	2300      	movs	r3, #0
 8000628:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_RTC_Init+0xc0>)
 8000636:	f003 fe6b 	bl	8004310 <HAL_RTC_SetAlarm>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000640:	f000 fc4c 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000120 	.word	0x20000120
 8000650:	40002800 	.word	0x40002800

08000654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_SPI1_Init+0x64>)
 800065a:	4a18      	ldr	r2, [pc, #96]	; (80006bc <MX_SPI1_Init+0x68>)
 800065c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_SPI1_Init+0x64>)
 8000660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_SPI1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_SPI1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_SPI1_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_SPI1_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_SPI1_Init+0x64>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_SPI1_Init+0x64>)
 8000688:	2208      	movs	r2, #8
 800068a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_SPI1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_SPI1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_SPI1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_SPI1_Init+0x64>)
 80006a0:	220a      	movs	r2, #10
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_SPI1_Init+0x64>)
 80006a6:	f004 f96d 	bl	8004984 <HAL_SPI_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006b0:	f000 fc14 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000134 	.word	0x20000134
 80006bc:	40013000 	.word	0x40013000

080006c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	; 0x58
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
 80006ee:	615a      	str	r2, [r3, #20]
 80006f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2220      	movs	r2, #32
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 fa51 	bl	8005ba0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006fe:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <MX_TIM1_Init+0x138>)
 8000700:	4a3e      	ldr	r2, [pc, #248]	; (80007fc <MX_TIM1_Init+0x13c>)
 8000702:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8000704:	4b3c      	ldr	r3, [pc, #240]	; (80007f8 <MX_TIM1_Init+0x138>)
 8000706:	2206      	movs	r2, #6
 8000708:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <MX_TIM1_Init+0x138>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000710:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <MX_TIM1_Init+0x138>)
 8000712:	2263      	movs	r2, #99	; 0x63
 8000714:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <MX_TIM1_Init+0x138>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800071c:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_TIM1_Init+0x138>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <MX_TIM1_Init+0x138>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000728:	4833      	ldr	r0, [pc, #204]	; (80007f8 <MX_TIM1_Init+0x138>)
 800072a:	f004 f9fc 	bl	8004b26 <HAL_TIM_Base_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000734:	f000 fbd2 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800073e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000742:	4619      	mov	r1, r3
 8000744:	482c      	ldr	r0, [pc, #176]	; (80007f8 <MX_TIM1_Init+0x138>)
 8000746:	f004 fc11 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000750:	f000 fbc4 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000754:	4828      	ldr	r0, [pc, #160]	; (80007f8 <MX_TIM1_Init+0x138>)
 8000756:	f004 fa35 	bl	8004bc4 <HAL_TIM_PWM_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000760:	f000 fbbc 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000770:	4619      	mov	r1, r3
 8000772:	4821      	ldr	r0, [pc, #132]	; (80007f8 <MX_TIM1_Init+0x138>)
 8000774:	f004 ffa2 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800077e:	f000 fbad 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000782:	2360      	movs	r3, #96	; 0x60
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800078e:	2300      	movs	r3, #0
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000792:	2304      	movs	r3, #4
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	4814      	ldr	r0, [pc, #80]	; (80007f8 <MX_TIM1_Init+0x138>)
 80007a8:	f004 fb1e 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80007b2:	f000 fb93 	bl	8000edc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM1_Init+0x138>)
 80007da:	f004 ffdb 	bl	8005794 <HAL_TIMEx_ConfigBreakDeadTime>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80007e4:	f000 fb7a 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM1_Init+0x138>)
 80007ea:	f000 fe01 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 80007ee:	bf00      	nop
 80007f0:	3758      	adds	r7, #88	; 0x58
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000018c 	.word	0x2000018c
 80007fc:	40012c00 	.word	0x40012c00

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_TIM2_Init+0x94>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_TIM2_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_TIM2_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_TIM2_Init+0x94>)
 8000832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_TIM2_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM2_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_TIM2_Init+0x94>)
 8000846:	f004 f96e 	bl	8004b26 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000850:	f000 fb44 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_TIM2_Init+0x94>)
 8000862:	f004 fb83 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 fb36 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_TIM2_Init+0x94>)
 800087e:	f004 ff1d 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000888:	f000 fb28 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001d4 	.word	0x200001d4

08000898 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	; 0x38
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_TIM3_Init+0xf8>)
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <MX_TIM3_Init+0xfc>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <MX_TIM3_Init+0xf8>)
 80008d0:	2247      	movs	r2, #71	; 0x47
 80008d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_TIM3_Init+0xf8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_TIM3_Init+0xf8>)
 80008dc:	2263      	movs	r2, #99	; 0x63
 80008de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_TIM3_Init+0xf8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_TIM3_Init+0xf8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ec:	4828      	ldr	r0, [pc, #160]	; (8000990 <MX_TIM3_Init+0xf8>)
 80008ee:	f004 f91a 	bl	8004b26 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80008f8:	f000 faf0 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000906:	4619      	mov	r1, r3
 8000908:	4821      	ldr	r0, [pc, #132]	; (8000990 <MX_TIM3_Init+0xf8>)
 800090a:	f004 fb2f 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000914:	f000 fae2 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000918:	481d      	ldr	r0, [pc, #116]	; (8000990 <MX_TIM3_Init+0xf8>)
 800091a:	f004 f953 	bl	8004bc4 <HAL_TIM_PWM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000924:	f000 fada 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4619      	mov	r1, r3
 8000936:	4816      	ldr	r0, [pc, #88]	; (8000990 <MX_TIM3_Init+0xf8>)
 8000938:	f004 fec0 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000942:	f000 facb 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000946:	2360      	movs	r3, #96	; 0x60
 8000948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_TIM3_Init+0xf8>)
 800095e:	f004 fa43 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000968:	f000 fab8 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2204      	movs	r2, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <MX_TIM3_Init+0xf8>)
 8000974:	f004 fa38 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800097e:	f000 faad 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000982:	4803      	ldr	r0, [pc, #12]	; (8000990 <MX_TIM3_Init+0xf8>)
 8000984:	f000 fd34 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000988:	bf00      	nop
 800098a:	3738      	adds	r7, #56	; 0x38
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000021c 	.word	0x2000021c
 8000994:	40000400 	.word	0x40000400

08000998 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009c8:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <MX_TIM4_Init+0xf8>)
 80009ca:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <MX_TIM4_Init+0xfc>)
 80009cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_TIM4_Init+0xf8>)
 80009d0:	2247      	movs	r2, #71	; 0x47
 80009d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <MX_TIM4_Init+0xf8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80009da:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_TIM4_Init+0xf8>)
 80009dc:	2263      	movs	r2, #99	; 0x63
 80009de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_TIM4_Init+0xf8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <MX_TIM4_Init+0xf8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009ec:	4828      	ldr	r0, [pc, #160]	; (8000a90 <MX_TIM4_Init+0xf8>)
 80009ee:	f004 f89a 	bl	8004b26 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80009f8:	f000 fa70 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4821      	ldr	r0, [pc, #132]	; (8000a90 <MX_TIM4_Init+0xf8>)
 8000a0a:	f004 faaf 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000a14:	f000 fa62 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a18:	481d      	ldr	r0, [pc, #116]	; (8000a90 <MX_TIM4_Init+0xf8>)
 8000a1a:	f004 f8d3 	bl	8004bc4 <HAL_TIM_PWM_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000a24:	f000 fa5a 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4619      	mov	r1, r3
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_TIM4_Init+0xf8>)
 8000a38:	f004 fe40 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000a42:	f000 fa4b 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	2360      	movs	r3, #96	; 0x60
 8000a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2208      	movs	r2, #8
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_TIM4_Init+0xf8>)
 8000a5e:	f004 f9c3 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000a68:	f000 fa38 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	220c      	movs	r2, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_TIM4_Init+0xf8>)
 8000a74:	f004 f9b8 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000a7e:	f000 fa2d 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <MX_TIM4_Init+0xf8>)
 8000a84:	f000 fcb4 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000a88:	bf00      	nop
 8000a8a:	3738      	adds	r7, #56	; 0x38
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000264 	.word	0x20000264
 8000a94:	40000800 	.word	0x40000800

08000a98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000aca:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <MX_TIM5_Init+0xe8>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ace:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000aee:	4823      	ldr	r0, [pc, #140]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000af0:	f004 f819 	bl	8004b26 <HAL_TIM_Base_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000afa:	f000 f9ef 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481c      	ldr	r0, [pc, #112]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000b0c:	f004 fa2e 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000b16:	f000 f9e1 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b1a:	4818      	ldr	r0, [pc, #96]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000b1c:	f004 f852 	bl	8004bc4 <HAL_TIM_PWM_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000b26:	f000 f9d9 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	4619      	mov	r1, r3
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000b3a:	f004 fdbf 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000b44:	f000 f9ca 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b48:	2360      	movs	r3, #96	; 0x60
 8000b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000b60:	f004 f942 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000b6a:	f000 f9b7 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <MX_TIM5_Init+0xe4>)
 8000b70:	f000 fc3e 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000b74:	bf00      	nop
 8000b76:	3738      	adds	r7, #56	; 0x38
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200002ac 	.word	0x200002ac
 8000b80:	40000c00 	.word	0x40000c00

08000b84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART1_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	f004 fe3b 	bl	8005836 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f989 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200002f4 	.word	0x200002f4
 8000bd4:	40013800 	.word	0x40013800

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART2_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f004 fe11 	bl	8005836 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f95f 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000033c 	.word	0x2000033c
 8000c28:	40004400 	.word	0x40004400

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_DMA_Init+0x38>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <MX_DMA_Init+0x38>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_DMA_Init+0x38>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200b      	movs	r0, #11
 8000c50:	f001 fc9b 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c54:	200b      	movs	r0, #11
 8000c56:	f001 fcb4 	bl	80025c2 <HAL_NVIC_EnableIRQ>

}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 0318 	add.w	r3, r7, #24
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7c:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a36      	ldr	r2, [pc, #216]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a30      	ldr	r2, [pc, #192]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a24      	ldr	r2, [pc, #144]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0308 	and.w	r3, r3, #8
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_GPIO_Init+0xf4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CPT_RST_Pin|CPT_INT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	211a      	movs	r1, #26
 8000cf8:	4819      	ldr	r0, [pc, #100]	; (8000d60 <MX_GPIO_Init+0xf8>)
 8000cfa:	f002 f951 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	4818      	ldr	r0, [pc, #96]	; (8000d64 <MX_GPIO_Init+0xfc>)
 8000d04:	f002 f94c 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CPT_RST_Pin CPT_INT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CPT_RST_Pin|CPT_INT_Pin|LCD_RST_Pin;
 8000d08:	231a      	movs	r3, #26
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2302      	movs	r3, #2
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4810      	ldr	r0, [pc, #64]	; (8000d60 <MX_GPIO_Init+0xf8>)
 8000d20:	f001 ffaa 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_CURRENT_ADC_Pin */
  GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_CURRENT_ADC_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_GPIO_Init+0x100>)
 8000d34:	f001 ffa0 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2302      	movs	r3, #2
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_GPIO_Init+0xfc>)
 8000d50:	f001 ff92 	bl	8002c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40011800 	.word	0x40011800
 8000d64:	40011400 	.word	0x40011400
 8000d68:	40011000 	.word	0x40011000

08000d6c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000d86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000d8e:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <MX_FSMC_Init+0xc0>)
 8000d90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000da6:	2210      	movs	r2, #16
 8000da8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000dc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000de2:	230f      	movs	r3, #15
 8000de4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000de6:	230f      	movs	r3, #15
 8000de8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000dea:	23ff      	movs	r3, #255	; 0xff
 8000dec:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000dee:	230f      	movs	r3, #15
 8000df0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000df2:	2310      	movs	r3, #16
 8000df4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000df6:	2311      	movs	r3, #17
 8000df8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4808      	ldr	r0, [pc, #32]	; (8000e28 <MX_FSMC_Init+0xbc>)
 8000e06:	f003 fe41 	bl	8004a8c <HAL_SRAM_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000e10:	f000 f864 	bl	8000edc <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_FSMC_Init+0xc4>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <MX_FSMC_Init+0xc4>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000384 	.word	0x20000384
 8000e2c:	a0000104 	.word	0xa0000104
 8000e30:	40010000 	.word	0x40010000

08000e34 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  asm("NOP");
 8000e3c:	bf00      	nop
  int16_t LDR_val[4];
  LDR_val[0] = adc_data[4];
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000e40:	891b      	ldrh	r3, [r3, #8]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	813b      	strh	r3, [r7, #8]
  LDR_val[1] = adc_data[5];
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000e4a:	895b      	ldrh	r3, [r3, #10]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	817b      	strh	r3, [r7, #10]
  LDR_val[2] = adc_data[6];
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000e54:	899b      	ldrh	r3, [r3, #12]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	81bb      	strh	r3, [r7, #12]
  LDR_val[3] = adc_data[7];
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000e5e:	89db      	ldrh	r3, [r3, #14]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	81fb      	strh	r3, [r7, #14]
  SOLAR_TRACKER_track(LDR_val[0] + LDR_val[1], LDR_val[2] + LDR_val[3], &(TIM3->CCR1), &(TIM3->CCR2));
 8000e66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4413      	add	r3, r2
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b218      	sxth	r0, r3
 8000e78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	4413      	add	r3, r2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b219      	sxth	r1, r3
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_ADC_ConvCpltCallback+0x98>)
 8000e8c:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000e8e:	f000 f82b 	bl	8000ee8 <SOLAR_TRACKER_track>
  SOLAR_TRACKER_track(LDR_val[1] + LDR_val[2], LDR_val[0] + LDR_val[4], &(TIM4->CCR3), &(TIM4->CCR4));
 8000e92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b218      	sxth	r0, r3
 8000ea4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b219      	sxth	r1, r3
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000eba:	f000 f815 	bl	8000ee8 <SOLAR_TRACKER_track>
}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200003cc 	.word	0x200003cc
 8000ecc:	40000438 	.word	0x40000438
 8000ed0:	40000434 	.word	0x40000434
 8000ed4:	40000840 	.word	0x40000840
 8000ed8:	4000083c 	.word	0x4000083c

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <SOLAR_TRACKER_track>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int SOLAR_TRACKER_init(void);
int SOLAR_TRACKER_calibrate(void);
int SOLAR_TRACKER_track(int16_t LDR_VAL_A, int16_t LDR_VAL_B, uint32_t *MOTOR_OUTPUT_A, uint32_t *MOTOR_OUTPUT_B) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60ba      	str	r2, [r7, #8]
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	81fb      	strh	r3, [r7, #14]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	81bb      	strh	r3, [r7, #12]
    if (LDR_VAL_A - LDR_VAL_B > diff_threshold) {
 8000efa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000efe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <SOLAR_TRACKER_track+0x74>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dd08      	ble.n	8000f1e <SOLAR_TRACKER_track+0x36>
        *MOTOR_OUTPUT_A = MOTOR_MAX;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <SOLAR_TRACKER_track+0x78>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = 0;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e017      	b.n	8000f4e <SOLAR_TRACKER_track+0x66>
    } else if (LDR_VAL_B - LDR_VAL_A > diff_threshold) {
 8000f1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f26:	1ad2      	subs	r2, r2, r3
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <SOLAR_TRACKER_track+0x74>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dd08      	ble.n	8000f42 <SOLAR_TRACKER_track+0x5a>
        *MOTOR_OUTPUT_A = 0;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = MOTOR_MAX;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <SOLAR_TRACKER_track+0x78>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e005      	b.n	8000f4e <SOLAR_TRACKER_track+0x66>
    } else {
        *MOTOR_OUTPUT_A = 0;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = 0;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
    }
 8000f4e:	bf00      	nop
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_MspInit+0x5c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <HAL_MspInit+0x5c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_MspInit+0x5c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_MspInit+0x5c>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_MspInit+0x5c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_MspInit+0x5c>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_MspInit+0x60>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_MspInit+0x60>)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a42      	ldr	r2, [pc, #264]	; (80010ec <HAL_ADC_MspInit+0x124>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d17d      	bne.n	80010e4 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe8:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001000:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a34      	ldr	r2, [pc, #208]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_ADC_MspInit+0x128>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin|INPUT_VOLTAGE_ADC_Pin|OUTPUT_VOLTAGE_ADC_Pin|OUTPUT_CURRENT_ADC_Pin
 8001048:	233f      	movs	r3, #63	; 0x3f
 800104a:	61bb      	str	r3, [r7, #24]
                          |LDR2_ADC_Pin|LDR3_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104c:	2303      	movs	r3, #3
 800104e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	4619      	mov	r1, r3
 8001056:	4827      	ldr	r0, [pc, #156]	; (80010f4 <HAL_ADC_MspInit+0x12c>)
 8001058:	f001 fe0e 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR1_ADC_Pin;
 800105c:	2320      	movs	r3, #32
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	2303      	movs	r3, #3
 8001062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR1_ADC_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4619      	mov	r1, r3
 800106a:	4823      	ldr	r0, [pc, #140]	; (80010f8 <HAL_ADC_MspInit+0x130>)
 800106c:	f001 fe04 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR4_ADC_Pin;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001074:	2303      	movs	r3, #3
 8001076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR4_ADC_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4619      	mov	r1, r3
 800107e:	481f      	ldr	r0, [pc, #124]	; (80010fc <HAL_ADC_MspInit+0x134>)
 8001080:	f001 fdfa 	bl	8002c78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <HAL_ADC_MspInit+0x138>)
 8001086:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <HAL_ADC_MspInit+0x13c>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_ADC_MspInit+0x138>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_ADC_MspInit+0x138>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_ADC_MspInit+0x138>)
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_ADC_MspInit+0x138>)
 800109e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_ADC_MspInit+0x138>)
 80010a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_ADC_MspInit+0x138>)
 80010ae:	2220      	movs	r2, #32
 80010b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_ADC_MspInit+0x138>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <HAL_ADC_MspInit+0x138>)
 80010ba:	f001 fa9d 	bl	80025f8 <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80010c4:	f7ff ff0a 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_ADC_MspInit+0x138>)
 80010cc:	621a      	str	r2, [r3, #32]
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_ADC_MspInit+0x138>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2012      	movs	r0, #18
 80010da:	f001 fa56 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010de:	2012      	movs	r0, #18
 80010e0:	f001 fa6f 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40012400 	.word	0x40012400
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40010800 	.word	0x40010800
 80010fc:	40010c00 	.word	0x40010c00
 8001100:	20000060 	.word	0x20000060
 8001104:	40020008 	.word	0x40020008

08001108 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_CAN_MspInit+0x8c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d131      	bne.n	800118c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_CAN_MspInit+0x90>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_CAN_MspInit+0x90>)
 800112e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001132:	61d3      	str	r3, [r2, #28]
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_CAN_MspInit+0x90>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_CAN_MspInit+0x90>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_CAN_MspInit+0x90>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_CAN_MspInit+0x90>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800115c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <HAL_CAN_MspInit+0x94>)
 800116e:	f001 fd83 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_CAN_MspInit+0x94>)
 8001188:	f001 fd76 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40006400 	.word	0x40006400
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800

080011a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_I2C_MspInit+0x70>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d123      	bne.n	8001208 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_I2C_MspInit+0x74>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <HAL_I2C_MspInit+0x74>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_I2C_MspInit+0x74>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = CPT_SCL_Pin|CPT_SDA_Pin;
 80011d8:	23c0      	movs	r3, #192	; 0xc0
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <HAL_I2C_MspInit+0x78>)
 80011ec:	f001 fd44 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_I2C_MspInit+0x74>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_I2C_MspInit+0x74>)
 80011f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fa:	61d3      	str	r3, [r2, #28]
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_I2C_MspInit+0x74>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40005400 	.word	0x40005400
 8001214:	40021000 	.word	0x40021000
 8001218:	40010c00 	.word	0x40010c00

0800121c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_RTC_MspInit+0x3c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d110      	bne.n	8001250 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800122e:	f002 f813 	bl	8003258 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_RTC_MspInit+0x40>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_RTC_MspInit+0x40>)
 8001238:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_RTC_MspInit+0x40>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_RTC_MspInit+0x44>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40002800 	.word	0x40002800
 800125c:	40021000 	.word	0x40021000
 8001260:	4242043c 	.word	0x4242043c

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_SPI_MspInit+0xa4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d13d      	bne.n	8001300 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_SPI_MspInit+0xa8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a20      	ldr	r2, [pc, #128]	; (800130c <HAL_SPI_MspInit+0xa8>)
 800128a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_SPI_MspInit+0xa8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_SPI_MspInit+0xa8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a1a      	ldr	r2, [pc, #104]	; (800130c <HAL_SPI_MspInit+0xa8>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_SPI_MspInit+0xa8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80012b4:	2328      	movs	r3, #40	; 0x28
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <HAL_SPI_MspInit+0xac>)
 80012c8:	f001 fcd6 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012cc:	2310      	movs	r3, #16
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <HAL_SPI_MspInit+0xac>)
 80012e0:	f001 fcca 	bl	8002c78 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_SPI_MspInit+0xb0>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
 80012fa:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_SPI_MspInit+0xb0>)
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013000 	.word	0x40013000
 800130c:	40021000 	.word	0x40021000
 8001310:	40010c00 	.word	0x40010c00
 8001314:	40010000 	.word	0x40010000

08001318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <HAL_TIM_Base_MspInit+0xc4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10c      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001342:	e046      	b.n	80013d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134c:	d10c      	bne.n	8001368 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
}
 8001366:	e034      	b.n	80013d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_TIM_Base_MspInit+0xcc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10c      	bne.n	800138c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
}
 800138a:	e022      	b.n	80013d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_TIM_Base_MspInit+0xd0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d10c      	bne.n	80013b0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
}
 80013ae:	e010      	b.n	80013d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_TIM_Base_MspInit+0xd4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10b      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_TIM_Base_MspInit+0xc8>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
}
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40012c00 	.word	0x40012c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40000400 	.word	0x40000400
 80013e8:	40000800 	.word	0x40000800
 80013ec:	40000c00 	.word	0x40000c00

080013f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a3d      	ldr	r2, [pc, #244]	; (8001500 <HAL_TIM_MspPostInit+0x110>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d119      	bne.n	8001444 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a3b      	ldr	r2, [pc, #236]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MPPT_PWM_Pin;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MPPT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	4619      	mov	r1, r3
 800143c:	4832      	ldr	r0, [pc, #200]	; (8001508 <HAL_TIM_MspPostInit+0x118>)
 800143e:	f001 fc1b 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001442:	e059      	b.n	80014f8 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a30      	ldr	r2, [pc, #192]	; (800150c <HAL_TIM_MspPostInit+0x11c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d118      	bne.n	8001480 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6193      	str	r3, [r2, #24]
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_PITCH_1_Pin|PWM_PITCH_2_Pin;
 8001466:	23c0      	movs	r3, #192	; 0xc0
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2302      	movs	r3, #2
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	4619      	mov	r1, r3
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <HAL_TIM_MspPostInit+0x118>)
 800147a:	f001 fbfd 	bl	8002c78 <HAL_GPIO_Init>
}
 800147e:	e03b      	b.n	80014f8 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_TIM_MspPostInit+0x120>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d119      	bne.n	80014be <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_YAW_1_Pin|PWM_YAW_2_Pin;
 80014a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2302      	movs	r3, #2
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4817      	ldr	r0, [pc, #92]	; (8001514 <HAL_TIM_MspPostInit+0x124>)
 80014b8:	f001 fbde 	bl	8002c78 <HAL_GPIO_Init>
}
 80014bc:	e01c      	b.n	80014f8 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM5)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a15      	ldr	r2, [pc, #84]	; (8001518 <HAL_TIM_MspPostInit+0x128>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d117      	bne.n	80014f8 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_TIM_MspPostInit+0x114>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <HAL_TIM_MspPostInit+0x118>)
 80014f4:	f001 fbc0 	bl	8002c78 <HAL_GPIO_Init>
}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40012c00 	.word	0x40012c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40010800 	.word	0x40010800
 800150c:	40000400 	.word	0x40000400
 8001510:	40000800 	.word	0x40000800
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40000c00 	.word	0x40000c00

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a37      	ldr	r2, [pc, #220]	; (8001614 <HAL_UART_MspInit+0xf8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d132      	bne.n	80015a2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153c:	4b36      	ldr	r3, [pc, #216]	; (8001618 <HAL_UART_MspInit+0xfc>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a35      	ldr	r2, [pc, #212]	; (8001618 <HAL_UART_MspInit+0xfc>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_UART_MspInit+0xfc>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b30      	ldr	r3, [pc, #192]	; (8001618 <HAL_UART_MspInit+0xfc>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <HAL_UART_MspInit+0xfc>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_UART_MspInit+0xfc>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800156c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	4619      	mov	r1, r3
 8001580:	4826      	ldr	r0, [pc, #152]	; (800161c <HAL_UART_MspInit+0x100>)
 8001582:	f001 fb79 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	4619      	mov	r1, r3
 800159a:	4820      	ldr	r0, [pc, #128]	; (800161c <HAL_UART_MspInit+0x100>)
 800159c:	f001 fb6c 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a0:	e034      	b.n	800160c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <HAL_UART_MspInit+0x104>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d12f      	bne.n	800160c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_UART_MspInit+0xfc>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_UART_MspInit+0xfc>)
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b6:	61d3      	str	r3, [r2, #28]
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_UART_MspInit+0xfc>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_UART_MspInit+0xfc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a13      	ldr	r2, [pc, #76]	; (8001618 <HAL_UART_MspInit+0xfc>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_UART_MspInit+0xfc>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015dc:	2304      	movs	r3, #4
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	4619      	mov	r1, r3
 80015ee:	480b      	ldr	r0, [pc, #44]	; (800161c <HAL_UART_MspInit+0x100>)
 80015f0:	f001 fb42 	bl	8002c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015f4:	2308      	movs	r3, #8
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	4619      	mov	r1, r3
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_UART_MspInit+0x100>)
 8001608:	f001 fb36 	bl	8002c78 <HAL_GPIO_Init>
}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40013800 	.word	0x40013800
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800
 8001620:	40004400 	.word	0x40004400

08001624 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_FSMC_MspInit+0x78>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d129      	bne.n	8001694 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_FSMC_MspInit+0x78>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_FSMC_MspInit+0x7c>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <HAL_FSMC_MspInit+0x7c>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6153      	str	r3, [r2, #20]
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_FSMC_MspInit+0x7c>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800165e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001662:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	480c      	ldr	r0, [pc, #48]	; (80016a4 <HAL_FSMC_MspInit+0x80>)
 8001674:	f001 fb00 	bl	8002c78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001678:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800167c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4619      	mov	r1, r3
 800168c:	4806      	ldr	r0, [pc, #24]	; (80016a8 <HAL_FSMC_MspInit+0x84>)
 800168e:	f001 faf3 	bl	8002c78 <HAL_GPIO_Init>
 8001692:	e000      	b.n	8001696 <HAL_FSMC_MspInit+0x72>
    return;
 8001694:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200003dc 	.word	0x200003dc
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40011800 	.word	0x40011800
 80016a8:	40011400 	.word	0x40011400

080016ac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016b4:	f7ff ffb6 	bl	8001624 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f000 f889 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Channel1_IRQHandler+0x10>)
 8001716:	f001 f845 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000060 	.word	0x20000060

08001724 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <ADC1_2_IRQHandler+0x10>)
 800172a:	f000 fa7f 	bl	8001c2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000030 	.word	0x20000030

08001738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 8001744:	f7ff fff8 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800174a:	490c      	ldr	r1, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <LoopFillZerobss+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001760:	4c09      	ldr	r4, [pc, #36]	; (8001788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f004 fa1f 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001772:	f7fe fd57 	bl	8000224 <main>
  bx lr
 8001776:	4770      	bx	lr
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001780:	08005c58 	.word	0x08005c58
  ldr r2, =_sbss
 8001784:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001788:	200003e4 	.word	0x200003e4

0800178c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC3_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x28>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x28>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 fee7 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fbda 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 feff 	bl	80025de <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 fec7 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000008 	.word	0x20000008
 8001814:	20000010 	.word	0x20000010
 8001818:	2000000c 	.word	0x2000000c

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_IncTick+0x1c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_IncTick+0x20>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_IncTick+0x20>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000010 	.word	0x20000010
 800183c:	200003e0 	.word	0x200003e0

08001840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_GetTick+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	200003e0 	.word	0x200003e0

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fff0 	bl	8001840 <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffe0 	bl	8001840 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000010 	.word	0x20000010

0800189c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0ce      	b.n	8001a5c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fb74 	bl	8000fc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fbcf 	bl	8002084 <ADC_ConversionStop_Disable>
 80018e6:	4603      	mov	r3, r0
 80018e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 80a9 	bne.w	8001a4a <HAL_ADC_Init+0x1ae>
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 80a5 	bne.w	8001a4a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001908:	f023 0302 	bic.w	r3, r3, #2
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4951      	ldr	r1, [pc, #324]	; (8001a64 <HAL_ADC_Init+0x1c8>)
 800191e:	428b      	cmp	r3, r1
 8001920:	d10a      	bne.n	8001938 <HAL_ADC_Init+0x9c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800192a:	d002      	beq.n	8001932 <HAL_ADC_Init+0x96>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	e004      	b.n	800193c <HAL_ADC_Init+0xa0>
 8001932:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001936:	e001      	b.n	800193c <HAL_ADC_Init+0xa0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800193c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7b1b      	ldrb	r3, [r3, #12]
 8001942:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001944:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	4313      	orrs	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001954:	d003      	beq.n	800195e <HAL_ADC_Init+0xc2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <HAL_ADC_Init+0xc8>
 800195e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001962:	e000      	b.n	8001966 <HAL_ADC_Init+0xca>
 8001964:	2300      	movs	r3, #0
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7d1b      	ldrb	r3, [r3, #20]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d119      	bne.n	80019a8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7b1b      	ldrb	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	3b01      	subs	r3, #1
 8001982:	035a      	lsls	r2, r3, #13
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	e00b      	b.n	80019a8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_ADC_Init+0x1cc>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d8:	d003      	beq.n	80019e2 <HAL_ADC_Init+0x146>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d104      	bne.n	80019ec <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	051b      	lsls	r3, r3, #20
 80019ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_ADC_Init+0x1d0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d10b      	bne.n	8001a28 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f023 0303 	bic.w	r3, r3, #3
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a26:	e018      	b.n	8001a5a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f023 0312 	bic.w	r3, r3, #18
 8001a30:	f043 0210 	orr.w	r2, r3, #16
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a48:	e007      	b.n	8001a5a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	f043 0210 	orr.w	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40013c00 	.word	0x40013c00
 8001a68:	ffe1f7fd 	.word	0xffe1f7fd
 8001a6c:	ff1f0efe 	.word	0xff1f0efe

08001a70 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a64      	ldr	r2, [pc, #400]	; (8001c18 <HAL_ADC_Start_DMA+0x1a8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_ADC_Start_DMA+0x24>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a63      	ldr	r2, [pc, #396]	; (8001c1c <HAL_ADC_Start_DMA+0x1ac>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d106      	bne.n	8001aa2 <HAL_ADC_Start_DMA+0x32>
 8001a94:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <HAL_ADC_Start_DMA+0x1a8>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 80b3 	bne.w	8001c08 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_Start_DMA+0x40>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0ae      	b.n	8001c0e <HAL_ADC_Start_DMA+0x19e>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 fa89 	bl	8001fd0 <ADC_Enable>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 809a 	bne.w	8001bfe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <HAL_ADC_Start_DMA+0x1ac>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d105      	bne.n	8001af4 <HAL_ADC_Start_DMA+0x84>
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <HAL_ADC_Start_DMA+0x1a8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d115      	bne.n	8001b20 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d026      	beq.n	8001b5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b1e:	e01d      	b.n	8001b5c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a39      	ldr	r2, [pc, #228]	; (8001c18 <HAL_ADC_Start_DMA+0x1a8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_ADC_Start_DMA+0xd0>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a38      	ldr	r2, [pc, #224]	; (8001c1c <HAL_ADC_Start_DMA+0x1ac>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d10d      	bne.n	8001b5c <HAL_ADC_Start_DMA+0xec>
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_ADC_Start_DMA+0x1a8>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f023 0206 	bic.w	r2, r3, #6
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <HAL_ADC_Start_DMA+0x1b0>)
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a24      	ldr	r2, [pc, #144]	; (8001c24 <HAL_ADC_Start_DMA+0x1b4>)
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_ADC_Start_DMA+0x1b8>)
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0202 	mvn.w	r2, #2
 8001ba4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bb4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a18      	ldr	r0, [r3, #32]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	334c      	adds	r3, #76	; 0x4c
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f000 fd8d 	bl	80026e4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bd4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bd8:	d108      	bne.n	8001bec <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001be8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bea:	e00f      	b.n	8001c0c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bfa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bfc:	e006      	b.n	8001c0c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001c06:	e001      	b.n	8001c0c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40012400 	.word	0x40012400
 8001c1c:	40012800 	.word	0x40012800
 8001c20:	08002107 	.word	0x08002107
 8001c24:	08002183 	.word	0x08002183
 8001c28:	0800219f 	.word	0x0800219f

08001c2c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03e      	beq.n	8001ccc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d039      	beq.n	8001ccc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c7a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c7e:	d11d      	bne.n	8001cbc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d119      	bne.n	8001cbc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0220 	bic.w	r2, r2, #32
 8001c96:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff f8b9 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0212 	mvn.w	r2, #18
 8001cca:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d04d      	beq.n	8001d72 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d048      	beq.n	8001d72 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001d02:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001d06:	d012      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d125      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d20:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d24:	d11d      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d119      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d3c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa35 	bl	80021d2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 020c 	mvn.w	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d012      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f812 	bl	8001dbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0201 	mvn.w	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x20>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0dc      	b.n	8001fba <HAL_ADC_ConfigChannel+0x1da>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b06      	cmp	r3, #6
 8001e0e:	d81c      	bhi.n	8001e4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b05      	subs	r3, #5
 8001e22:	221f      	movs	r2, #31
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4019      	ands	r1, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b05      	subs	r3, #5
 8001e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	635a      	str	r2, [r3, #52]	; 0x34
 8001e48:	e03c      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d81c      	bhi.n	8001e8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b23      	subs	r3, #35	; 0x23
 8001e64:	221f      	movs	r2, #31
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4019      	ands	r1, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3b23      	subs	r3, #35	; 0x23
 8001e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8a:	e01b      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b41      	subs	r3, #65	; 0x41
 8001e9e:	221f      	movs	r2, #31
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4019      	ands	r1, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b41      	subs	r3, #65	; 0x41
 8001eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b09      	cmp	r3, #9
 8001eca:	d91c      	bls.n	8001f06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68d9      	ldr	r1, [r3, #12]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	3b1e      	subs	r3, #30
 8001ede:	2207      	movs	r2, #7
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4019      	ands	r1, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6898      	ldr	r0, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b1e      	subs	r3, #30
 8001ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	e019      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6919      	ldr	r1, [r3, #16]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	2207      	movs	r2, #7
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4019      	ands	r1, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6898      	ldr	r0, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d003      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f46:	2b11      	cmp	r3, #17
 8001f48:	d132      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d125      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d126      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d11a      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_ADC_ConfigChannel+0x1ec>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	0c9a      	lsrs	r2, r3, #18
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f90:	e002      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f9      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x1b2>
 8001f9e:	e007      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40012400 	.word	0x40012400
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d040      	beq.n	8002070 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <ADC_Enable+0xac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <ADC_Enable+0xb0>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800200c:	e002      	b.n	8002014 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3b01      	subs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800201a:	f7ff fc11 	bl	8001840 <HAL_GetTick>
 800201e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002020:	e01f      	b.n	8002062 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002022:	f7ff fc0d 	bl	8001840 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d918      	bls.n	8002062 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d011      	beq.n	8002062 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e007      	b.n	8002072 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d1d8      	bne.n	8002022 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000008 	.word	0x20000008
 8002080:	431bde83 	.word	0x431bde83

08002084 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d12e      	bne.n	80020fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ae:	f7ff fbc7 	bl	8001840 <HAL_GetTick>
 80020b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020b4:	e01b      	b.n	80020ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020b6:	f7ff fbc3 	bl	8001840 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d914      	bls.n	80020ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10d      	bne.n	80020ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	f043 0210 	orr.w	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e007      	b.n	80020fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d0dc      	beq.n	80020b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800211c:	2b00      	cmp	r3, #0
 800211e:	d127      	bne.n	8002170 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002136:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800213a:	d115      	bne.n	8002168 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002140:	2b00      	cmp	r3, #0
 8002142:	d111      	bne.n	8002168 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7fe fe63 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800216e:	e004      	b.n	800217a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7ff fe0a 	bl	8001daa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f043 0204 	orr.w	r2, r3, #4
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff fe02 	bl	8001dce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0ed      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe ff80 	bl	8001108 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002218:	f7ff fb12 	bl	8001840 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800221e:	e012      	b.n	8002246 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002220:	f7ff fb0e 	bl	8001840 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b0a      	cmp	r3, #10
 800222c:	d90b      	bls.n	8002246 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2205      	movs	r2, #5
 800223e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0c5      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0e5      	beq.n	8002220 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0202 	bic.w	r2, r2, #2
 8002262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002264:	f7ff faec 	bl	8001840 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800226a:	e012      	b.n	8002292 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800226c:	f7ff fae8 	bl	8001840 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d90b      	bls.n	8002292 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2205      	movs	r2, #5
 800228a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e09f      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e5      	bne.n	800226c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e1b      	ldrb	r3, [r3, #24]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e007      	b.n	80022ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e5b      	ldrb	r3, [r3, #25]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e007      	b.n	80022f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e9b      	ldrb	r3, [r3, #26]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0220 	orr.w	r2, r2, #32
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e007      	b.n	800231e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0220 	bic.w	r2, r2, #32
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7edb      	ldrb	r3, [r3, #27]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e007      	b.n	8002348 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0210 	orr.w	r2, r2, #16
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7f1b      	ldrb	r3, [r3, #28]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0208 	orr.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e007      	b.n	8002372 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7f5b      	ldrb	r3, [r3, #29]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0204 	orr.w	r2, r2, #4
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e007      	b.n	800239c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0204 	bic.w	r2, r2, #4
 800239a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	ea42 0103 	orr.w	r1, r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4906      	ldr	r1, [pc, #24]	; (8002474 <__NVIC_EnableIRQ+0x34>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
         );
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff90 	bl	8002478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff2d 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff42 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff90 	bl	80024cc <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5f 	bl	8002478 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff35 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffa2 	bl	8002530 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e059      	b.n	80026c2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_DMA_Init+0xd4>)
 8002616:	429a      	cmp	r2, r3
 8002618:	d80f      	bhi.n	800263a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_DMA_Init+0xd8>)
 8002622:	4413      	add	r3, r2
 8002624:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <HAL_DMA_Init+0xdc>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	009a      	lsls	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <HAL_DMA_Init+0xe0>)
 8002636:	63da      	str	r2, [r3, #60]	; 0x3c
 8002638:	e00e      	b.n	8002658 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	4b26      	ldr	r3, [pc, #152]	; (80026dc <HAL_DMA_Init+0xe4>)
 8002642:	4413      	add	r3, r2
 8002644:	4a23      	ldr	r2, [pc, #140]	; (80026d4 <HAL_DMA_Init+0xdc>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	009a      	lsls	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_DMA_Init+0xe8>)
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800266e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002672:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800267c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	40020407 	.word	0x40020407
 80026d0:	bffdfff8 	.word	0xbffdfff8
 80026d4:	cccccccd 	.word	0xcccccccd
 80026d8:	40020000 	.word	0x40020000
 80026dc:	bffdfbf8 	.word	0xbffdfbf8
 80026e0:	40020400 	.word	0x40020400

080026e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_DMA_Start_IT+0x20>
 8002700:	2302      	movs	r3, #2
 8002702:	e04b      	b.n	800279c <HAL_DMA_Start_IT+0xb8>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d13a      	bne.n	800278e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fa6d 	bl	8002c1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 020e 	orr.w	r2, r2, #14
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e00f      	b.n	800277c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0204 	bic.w	r2, r2, #4
 800276a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 020a 	orr.w	r2, r2, #10
 800277a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e005      	b.n	800279a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002796:	2302      	movs	r3, #2
 8002798:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800279a:	7dfb      	ldrb	r3, [r7, #23]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2204      	movs	r2, #4
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80f1 	beq.w	80029b0 <HAL_DMA_IRQHandler+0x20c>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80eb 	beq.w	80029b0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b5f      	ldr	r3, [pc, #380]	; (800297c <HAL_DMA_IRQHandler+0x1d8>)
 8002800:	429a      	cmp	r2, r3
 8002802:	d958      	bls.n	80028b6 <HAL_DMA_IRQHandler+0x112>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <HAL_DMA_IRQHandler+0x1dc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04f      	beq.n	80028ae <HAL_DMA_IRQHandler+0x10a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <HAL_DMA_IRQHandler+0x1e0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d048      	beq.n	80028aa <HAL_DMA_IRQHandler+0x106>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a5a      	ldr	r2, [pc, #360]	; (8002988 <HAL_DMA_IRQHandler+0x1e4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d040      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x100>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a59      	ldr	r2, [pc, #356]	; (800298c <HAL_DMA_IRQHandler+0x1e8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d038      	beq.n	800289e <HAL_DMA_IRQHandler+0xfa>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <HAL_DMA_IRQHandler+0x1ec>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d030      	beq.n	8002898 <HAL_DMA_IRQHandler+0xf4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_DMA_IRQHandler+0x1f0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d028      	beq.n	8002892 <HAL_DMA_IRQHandler+0xee>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4d      	ldr	r2, [pc, #308]	; (800297c <HAL_DMA_IRQHandler+0x1d8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d020      	beq.n	800288c <HAL_DMA_IRQHandler+0xe8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_DMA_IRQHandler+0x1f4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d019      	beq.n	8002888 <HAL_DMA_IRQHandler+0xe4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a50      	ldr	r2, [pc, #320]	; (800299c <HAL_DMA_IRQHandler+0x1f8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d012      	beq.n	8002884 <HAL_DMA_IRQHandler+0xe0>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00a      	beq.n	800287e <HAL_DMA_IRQHandler+0xda>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a4d      	ldr	r2, [pc, #308]	; (80029a4 <HAL_DMA_IRQHandler+0x200>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d102      	bne.n	8002878 <HAL_DMA_IRQHandler+0xd4>
 8002872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002876:	e01b      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 8002878:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800287c:	e018      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 800287e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002882:	e015      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 8002884:	2340      	movs	r3, #64	; 0x40
 8002886:	e013      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 8002888:	2304      	movs	r3, #4
 800288a:	e011      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 800288c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002890:	e00e      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 8002892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002896:	e00b      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 8002898:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800289c:	e008      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 800289e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028a2:	e005      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 80028a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a8:	e002      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	e000      	b.n	80028b0 <HAL_DMA_IRQHandler+0x10c>
 80028ae:	2304      	movs	r3, #4
 80028b0:	4a3d      	ldr	r2, [pc, #244]	; (80029a8 <HAL_DMA_IRQHandler+0x204>)
 80028b2:	6053      	str	r3, [r2, #4]
 80028b4:	e057      	b.n	8002966 <HAL_DMA_IRQHandler+0x1c2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a31      	ldr	r2, [pc, #196]	; (8002980 <HAL_DMA_IRQHandler+0x1dc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04f      	beq.n	8002960 <HAL_DMA_IRQHandler+0x1bc>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <HAL_DMA_IRQHandler+0x1e0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d048      	beq.n	800295c <HAL_DMA_IRQHandler+0x1b8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <HAL_DMA_IRQHandler+0x1e4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d040      	beq.n	8002956 <HAL_DMA_IRQHandler+0x1b2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2c      	ldr	r2, [pc, #176]	; (800298c <HAL_DMA_IRQHandler+0x1e8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d038      	beq.n	8002950 <HAL_DMA_IRQHandler+0x1ac>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2b      	ldr	r2, [pc, #172]	; (8002990 <HAL_DMA_IRQHandler+0x1ec>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d030      	beq.n	800294a <HAL_DMA_IRQHandler+0x1a6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_DMA_IRQHandler+0x1f0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d028      	beq.n	8002944 <HAL_DMA_IRQHandler+0x1a0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_DMA_IRQHandler+0x1d8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d020      	beq.n	800293e <HAL_DMA_IRQHandler+0x19a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a25      	ldr	r2, [pc, #148]	; (8002998 <HAL_DMA_IRQHandler+0x1f4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_DMA_IRQHandler+0x196>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_DMA_IRQHandler+0x1f8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d012      	beq.n	8002936 <HAL_DMA_IRQHandler+0x192>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00a      	beq.n	8002930 <HAL_DMA_IRQHandler+0x18c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a21      	ldr	r2, [pc, #132]	; (80029a4 <HAL_DMA_IRQHandler+0x200>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d102      	bne.n	800292a <HAL_DMA_IRQHandler+0x186>
 8002924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002928:	e01b      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 800292a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800292e:	e018      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 8002930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002934:	e015      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 8002936:	2340      	movs	r3, #64	; 0x40
 8002938:	e013      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 800293a:	2304      	movs	r3, #4
 800293c:	e011      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 800293e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002942:	e00e      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 8002944:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002948:	e00b      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 800294a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800294e:	e008      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 8002950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002954:	e005      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 8002956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295a:	e002      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 800295c:	2340      	movs	r3, #64	; 0x40
 800295e:	e000      	b.n	8002962 <HAL_DMA_IRQHandler+0x1be>
 8002960:	2304      	movs	r3, #4
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_DMA_IRQHandler+0x208>)
 8002964:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8136 	beq.w	8002bdc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002978:	e130      	b.n	8002bdc <HAL_DMA_IRQHandler+0x438>
 800297a:	bf00      	nop
 800297c:	40020080 	.word	0x40020080
 8002980:	40020008 	.word	0x40020008
 8002984:	4002001c 	.word	0x4002001c
 8002988:	40020030 	.word	0x40020030
 800298c:	40020044 	.word	0x40020044
 8002990:	40020058 	.word	0x40020058
 8002994:	4002006c 	.word	0x4002006c
 8002998:	40020408 	.word	0x40020408
 800299c:	4002041c 	.word	0x4002041c
 80029a0:	40020430 	.word	0x40020430
 80029a4:	40020444 	.word	0x40020444
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2202      	movs	r2, #2
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80dd 	beq.w	8002b7c <HAL_DMA_IRQHandler+0x3d8>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80d7 	beq.w	8002b7c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 020a 	bic.w	r2, r2, #10
 80029ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <HAL_DMA_IRQHandler+0x444>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d958      	bls.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a79      	ldr	r2, [pc, #484]	; (8002bec <HAL_DMA_IRQHandler+0x448>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d04f      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x306>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a78      	ldr	r2, [pc, #480]	; (8002bf0 <HAL_DMA_IRQHandler+0x44c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d048      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x302>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a76      	ldr	r2, [pc, #472]	; (8002bf4 <HAL_DMA_IRQHandler+0x450>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d040      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x2fc>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a75      	ldr	r2, [pc, #468]	; (8002bf8 <HAL_DMA_IRQHandler+0x454>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d038      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x2f6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a73      	ldr	r2, [pc, #460]	; (8002bfc <HAL_DMA_IRQHandler+0x458>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d030      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2f0>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a72      	ldr	r2, [pc, #456]	; (8002c00 <HAL_DMA_IRQHandler+0x45c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d028      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ea>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a69      	ldr	r2, [pc, #420]	; (8002be8 <HAL_DMA_IRQHandler+0x444>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d020      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x2e4>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_DMA_IRQHandler+0x460>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d019      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x2e0>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6c      	ldr	r2, [pc, #432]	; (8002c08 <HAL_DMA_IRQHandler+0x464>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d012      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x2dc>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6b      	ldr	r2, [pc, #428]	; (8002c0c <HAL_DMA_IRQHandler+0x468>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00a      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2d6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a69      	ldr	r2, [pc, #420]	; (8002c10 <HAL_DMA_IRQHandler+0x46c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d102      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x2d0>
 8002a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a72:	e01b      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a78:	e018      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a7e:	e015      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002a80:	2320      	movs	r3, #32
 8002a82:	e013      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e011      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8c:	e00e      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002a8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a92:	e00b      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a98:	e008      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a9e:	e005      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa4:	e002      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	e000      	b.n	8002aac <HAL_DMA_IRQHandler+0x308>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	4a59      	ldr	r2, [pc, #356]	; (8002c14 <HAL_DMA_IRQHandler+0x470>)
 8002aae:	6053      	str	r3, [r2, #4]
 8002ab0:	e057      	b.n	8002b62 <HAL_DMA_IRQHandler+0x3be>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a4d      	ldr	r2, [pc, #308]	; (8002bec <HAL_DMA_IRQHandler+0x448>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04f      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x3b8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a4b      	ldr	r2, [pc, #300]	; (8002bf0 <HAL_DMA_IRQHandler+0x44c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d048      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x3b4>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4a      	ldr	r2, [pc, #296]	; (8002bf4 <HAL_DMA_IRQHandler+0x450>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d040      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x3ae>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a48      	ldr	r2, [pc, #288]	; (8002bf8 <HAL_DMA_IRQHandler+0x454>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d038      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x3a8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_DMA_IRQHandler+0x458>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d030      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x3a2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a45      	ldr	r2, [pc, #276]	; (8002c00 <HAL_DMA_IRQHandler+0x45c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d028      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x39c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3d      	ldr	r2, [pc, #244]	; (8002be8 <HAL_DMA_IRQHandler+0x444>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d020      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x396>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a41      	ldr	r2, [pc, #260]	; (8002c04 <HAL_DMA_IRQHandler+0x460>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x392>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a40      	ldr	r2, [pc, #256]	; (8002c08 <HAL_DMA_IRQHandler+0x464>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d012      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x38e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a3e      	ldr	r2, [pc, #248]	; (8002c0c <HAL_DMA_IRQHandler+0x468>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00a      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x388>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a3d      	ldr	r2, [pc, #244]	; (8002c10 <HAL_DMA_IRQHandler+0x46c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d102      	bne.n	8002b26 <HAL_DMA_IRQHandler+0x382>
 8002b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b24:	e01b      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b2a:	e018      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b30:	e015      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b32:	2320      	movs	r3, #32
 8002b34:	e013      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e011      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3e:	e00e      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b44:	e00b      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	e008      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b50:	e005      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b56:	e002      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e000      	b.n	8002b5e <HAL_DMA_IRQHandler+0x3ba>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	4a2e      	ldr	r2, [pc, #184]	; (8002c18 <HAL_DMA_IRQHandler+0x474>)
 8002b60:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d034      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b7a:	e02f      	b.n	8002bdc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2208      	movs	r2, #8
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d028      	beq.n	8002bde <HAL_DMA_IRQHandler+0x43a>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d023      	beq.n	8002bde <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 020e 	bic.w	r2, r2, #14
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
    }
  }
  return;
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
}
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40020080 	.word	0x40020080
 8002bec:	40020008 	.word	0x40020008
 8002bf0:	4002001c 	.word	0x4002001c
 8002bf4:	40020030 	.word	0x40020030
 8002bf8:	40020044 	.word	0x40020044
 8002bfc:	40020058 	.word	0x40020058
 8002c00:	4002006c 	.word	0x4002006c
 8002c04:	40020408 	.word	0x40020408
 8002c08:	4002041c 	.word	0x4002041c
 8002c0c:	40020430 	.word	0x40020430
 8002c10:	40020444 	.word	0x40020444
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020000 	.word	0x40020000

08002c1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	2101      	movs	r1, #1
 8002c34:	fa01 f202 	lsl.w	r2, r1, r2
 8002c38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d108      	bne.n	8002c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c5a:	e007      	b.n	8002c6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b08b      	sub	sp, #44	; 0x2c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8a:	e179      	b.n	8002f80 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8168 	bne.w	8002f7a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a96      	ldr	r2, [pc, #600]	; (8002f08 <HAL_GPIO_Init+0x290>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d05e      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a94      	ldr	r2, [pc, #592]	; (8002f08 <HAL_GPIO_Init+0x290>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d875      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cba:	4a94      	ldr	r2, [pc, #592]	; (8002f0c <HAL_GPIO_Init+0x294>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d058      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cc0:	4a92      	ldr	r2, [pc, #584]	; (8002f0c <HAL_GPIO_Init+0x294>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d86f      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cc6:	4a92      	ldr	r2, [pc, #584]	; (8002f10 <HAL_GPIO_Init+0x298>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d052      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ccc:	4a90      	ldr	r2, [pc, #576]	; (8002f10 <HAL_GPIO_Init+0x298>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d869      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cd2:	4a90      	ldr	r2, [pc, #576]	; (8002f14 <HAL_GPIO_Init+0x29c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d04c      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cd8:	4a8e      	ldr	r2, [pc, #568]	; (8002f14 <HAL_GPIO_Init+0x29c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d863      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cde:	4a8e      	ldr	r2, [pc, #568]	; (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d046      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ce4:	4a8c      	ldr	r2, [pc, #560]	; (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d85d      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cea:	2b12      	cmp	r3, #18
 8002cec:	d82a      	bhi.n	8002d44 <HAL_GPIO_Init+0xcc>
 8002cee:	2b12      	cmp	r3, #18
 8002cf0:	d859      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <HAL_GPIO_Init+0x80>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d73 	.word	0x08002d73
 8002cfc:	08002d4d 	.word	0x08002d4d
 8002d00:	08002d5f 	.word	0x08002d5f
 8002d04:	08002da1 	.word	0x08002da1
 8002d08:	08002da7 	.word	0x08002da7
 8002d0c:	08002da7 	.word	0x08002da7
 8002d10:	08002da7 	.word	0x08002da7
 8002d14:	08002da7 	.word	0x08002da7
 8002d18:	08002da7 	.word	0x08002da7
 8002d1c:	08002da7 	.word	0x08002da7
 8002d20:	08002da7 	.word	0x08002da7
 8002d24:	08002da7 	.word	0x08002da7
 8002d28:	08002da7 	.word	0x08002da7
 8002d2c:	08002da7 	.word	0x08002da7
 8002d30:	08002da7 	.word	0x08002da7
 8002d34:	08002da7 	.word	0x08002da7
 8002d38:	08002da7 	.word	0x08002da7
 8002d3c:	08002d55 	.word	0x08002d55
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_GPIO_Init+0x2a4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d4a:	e02c      	b.n	8002da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e029      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e024      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	3308      	adds	r3, #8
 8002d64:	623b      	str	r3, [r7, #32]
          break;
 8002d66:	e01f      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	623b      	str	r3, [r7, #32]
          break;
 8002d70:	e01a      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e013      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	611a      	str	r2, [r3, #16]
          break;
 8002d92:	e009      	b.n	8002da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d94:	2308      	movs	r3, #8
 8002d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	615a      	str	r2, [r3, #20]
          break;
 8002d9e:	e003      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
          break;
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          break;
 8002da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2bff      	cmp	r3, #255	; 0xff
 8002dac:	d801      	bhi.n	8002db2 <HAL_GPIO_Init+0x13a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	e001      	b.n	8002db6 <HAL_GPIO_Init+0x13e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2bff      	cmp	r3, #255	; 0xff
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_GPIO_Init+0x14c>
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_Init+0x152>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	3b08      	subs	r3, #8
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	401a      	ands	r2, r3
 8002ddc:	6a39      	ldr	r1, [r7, #32]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80c1 	beq.w	8002f7a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e10:	4a44      	ldr	r2, [pc, #272]	; (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3c      	ldr	r2, [pc, #240]	; (8002f28 <HAL_GPIO_Init+0x2b0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d01f      	beq.n	8002e7c <HAL_GPIO_Init+0x204>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <HAL_GPIO_Init+0x2b4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d019      	beq.n	8002e78 <HAL_GPIO_Init+0x200>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3a      	ldr	r2, [pc, #232]	; (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <HAL_GPIO_Init+0x1fc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a39      	ldr	r2, [pc, #228]	; (8002f34 <HAL_GPIO_Init+0x2bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00d      	beq.n	8002e70 <HAL_GPIO_Init+0x1f8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a38      	ldr	r2, [pc, #224]	; (8002f38 <HAL_GPIO_Init+0x2c0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <HAL_GPIO_Init+0x1f4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <HAL_GPIO_Init+0x2c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_GPIO_Init+0x1f0>
 8002e64:	2305      	movs	r3, #5
 8002e66:	e00a      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e68:	2306      	movs	r3, #6
 8002e6a:	e008      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	e006      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e70:	2303      	movs	r3, #3
 8002e72:	e004      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e002      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	f002 0203 	and.w	r2, r2, #3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4093      	lsls	r3, r2
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e8e:	4925      	ldr	r1, [pc, #148]	; (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4924      	ldr	r1, [pc, #144]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4920      	ldr	r1, [pc, #128]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	491a      	ldr	r1, [pc, #104]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d025      	beq.n	8002f44 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4910      	ldr	r1, [pc, #64]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
 8002f04:	e025      	b.n	8002f52 <HAL_GPIO_Init+0x2da>
 8002f06:	bf00      	nop
 8002f08:	10320000 	.word	0x10320000
 8002f0c:	10310000 	.word	0x10310000
 8002f10:	10220000 	.word	0x10220000
 8002f14:	10210000 	.word	0x10210000
 8002f18:	10120000 	.word	0x10120000
 8002f1c:	10110000 	.word	0x10110000
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40010800 	.word	0x40010800
 8002f2c:	40010c00 	.word	0x40010c00
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40011400 	.word	0x40011400
 8002f38:	40011800 	.word	0x40011800
 8002f3c:	40011c00 	.word	0x40011c00
 8002f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	4913      	ldr	r1, [pc, #76]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	490e      	ldr	r1, [pc, #56]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
 8002f6a:	e006      	b.n	8002f7a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	4909      	ldr	r1, [pc, #36]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f47f ae7e 	bne.w	8002c8c <HAL_GPIO_Init+0x14>
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	372c      	adds	r7, #44	; 0x2c
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fbc:	e003      	b.n	8002fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e12b      	b.n	800323a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe f8d2 	bl	80011a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003034:	f000 fce6 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a81      	ldr	r2, [pc, #516]	; (8003244 <HAL_I2C_Init+0x274>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d807      	bhi.n	8003054 <HAL_I2C_Init+0x84>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a80      	ldr	r2, [pc, #512]	; (8003248 <HAL_I2C_Init+0x278>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e006      	b.n	8003062 <HAL_I2C_Init+0x92>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a7d      	ldr	r2, [pc, #500]	; (800324c <HAL_I2C_Init+0x27c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0e7      	b.n	800323a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a78      	ldr	r2, [pc, #480]	; (8003250 <HAL_I2C_Init+0x280>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9b      	lsrs	r3, r3, #18
 8003074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a6a      	ldr	r2, [pc, #424]	; (8003244 <HAL_I2C_Init+0x274>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d802      	bhi.n	80030a4 <HAL_I2C_Init+0xd4>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	e009      	b.n	80030b8 <HAL_I2C_Init+0xe8>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	4a69      	ldr	r2, [pc, #420]	; (8003254 <HAL_I2C_Init+0x284>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	3301      	adds	r3, #1
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	495c      	ldr	r1, [pc, #368]	; (8003244 <HAL_I2C_Init+0x274>)
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d819      	bhi.n	800310c <HAL_I2C_Init+0x13c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e59      	subs	r1, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030ec:	400b      	ands	r3, r1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_I2C_Init+0x138>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1e59      	subs	r1, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003100:	3301      	adds	r3, #1
 8003102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003106:	e051      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003108:	2304      	movs	r3, #4
 800310a:	e04f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <HAL_I2C_Init+0x168>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e012      	b.n	800315e <HAL_I2C_Init+0x18e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	0099      	lsls	r1, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x196>
 8003162:	2301      	movs	r3, #1
 8003164:	e022      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10e      	bne.n	800318c <HAL_I2C_Init+0x1bc>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e58      	subs	r0, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	440b      	add	r3, r1
 800317c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318a:	e00f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e58      	subs	r0, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	6809      	ldr	r1, [r1, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6911      	ldr	r1, [r2, #16]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	000186a0 	.word	0x000186a0
 8003248:	001e847f 	.word	0x001e847f
 800324c:	003d08ff 	.word	0x003d08ff
 8003250:	431bde83 	.word	0x431bde83
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_PWR_EnableBkUpAccess+0x14>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	420e0020 	.word	0x420e0020

08003270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e272      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003290:	4b92      	ldr	r3, [pc, #584]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b04      	cmp	r3, #4
 800329a:	d00c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800329c:	4b8f      	ldr	r3, [pc, #572]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d112      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
 80032a8:	4b8c      	ldr	r3, [pc, #560]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d10b      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d06c      	beq.n	800339c <HAL_RCC_OscConfig+0x12c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d168      	bne.n	800339c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e24c      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x76>
 80032d8:	4b80      	ldr	r3, [pc, #512]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a7f      	ldr	r2, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e02e      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x98>
 80032ee:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7a      	ldr	r2, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b78      	ldr	r3, [pc, #480]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a77      	ldr	r2, [pc, #476]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0xbc>
 8003312:	4b72      	ldr	r3, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a71      	ldr	r2, [pc, #452]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b6f      	ldr	r3, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6e      	ldr	r2, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 800332c:	4b6b      	ldr	r3, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6a      	ldr	r2, [pc, #424]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a67      	ldr	r2, [pc, #412]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fa78 	bl	8001840 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe fa74 	bl	8001840 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e200      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xe4>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fa64 	bl	8001840 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fa60 	bl	8001840 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1ec      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b53      	ldr	r3, [pc, #332]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x10c>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033aa:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11c      	bne.n	80033fc <HAL_RCC_OscConfig+0x18c>
 80033c2:	4b46      	ldr	r3, [pc, #280]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1c0      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4939      	ldr	r1, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	e03a      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe fa19 	bl	8001840 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003412:	f7fe fa15 	bl	8001840 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1a1      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4927      	ldr	r1, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe f9f8 	bl	8001840 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fe f9f4 	bl	8001840 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e180      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03a      	beq.n	80034f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d019      	beq.n	80034ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <HAL_RCC_OscConfig+0x274>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7fe f9d8 	bl	8001840 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003494:	f7fe f9d4 	bl	8001840 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e160      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_OscConfig+0x26c>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034b2:	2001      	movs	r0, #1
 80034b4:	f000 face 	bl	8003a54 <RCC_Delay>
 80034b8:	e01c      	b.n	80034f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_RCC_OscConfig+0x274>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7fe f9be 	bl	8001840 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c8:	f7fe f9ba 	bl	8001840 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d908      	bls.n	80034e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e146      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	42420000 	.word	0x42420000
 80034e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b92      	ldr	r3, [pc, #584]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e9      	bne.n	80034c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80a6 	beq.w	800364e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10d      	bne.n	800352e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4a87      	ldr	r2, [pc, #540]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	61d3      	str	r3, [r2, #28]
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCC_OscConfig+0x4c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7e      	ldr	r2, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7fe f97b 	bl	8001840 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fe f977 	bl	8001840 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	; 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e103      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b75      	ldr	r3, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x312>
 8003574:	4b6f      	ldr	r3, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4a6e      	ldr	r2, [pc, #440]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6213      	str	r3, [r2, #32]
 8003580:	e02d      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x334>
 800358a:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a69      	ldr	r2, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	4b67      	ldr	r3, [pc, #412]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a66      	ldr	r2, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	e01c      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x356>
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a60      	ldr	r2, [pc, #384]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	4b5e      	ldr	r3, [pc, #376]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a5d      	ldr	r2, [pc, #372]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	e00b      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 80035c6:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a5a      	ldr	r2, [pc, #360]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	4b58      	ldr	r3, [pc, #352]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a57      	ldr	r2, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d015      	beq.n	8003612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7fe f92b 	bl	8001840 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe f927 	bl	8001840 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0b1      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ee      	beq.n	80035ee <HAL_RCC_OscConfig+0x37e>
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe f915 	bl	8001840 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe f911 	bl	8001840 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e09b      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	4b40      	ldr	r3, [pc, #256]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ee      	bne.n	800361a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d105      	bne.n	800364e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003642:	4b3c      	ldr	r3, [pc, #240]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a3b      	ldr	r2, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8087 	beq.w	8003766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d061      	beq.n	8003728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d146      	bne.n	80036fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	4b33      	ldr	r3, [pc, #204]	; (800373c <HAL_RCC_OscConfig+0x4cc>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe f8e5 	bl	8001840 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe f8e1 	bl	8001840 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e06d      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a0:	d108      	bne.n	80036b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4921      	ldr	r1, [pc, #132]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b4:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a19      	ldr	r1, [r3, #32]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	430b      	orrs	r3, r1
 80036c6:	491b      	ldr	r1, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe f8b5 	bl	8001840 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe f8b1 	bl	8001840 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e03d      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x46a>
 80036f8:	e035      	b.n	8003766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe f89e 	bl	8001840 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe f89a 	bl	8001840 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e026      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x498>
 8003726:	e01e      	b.n	8003766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e019      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
 800373c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x500>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	429a      	cmp	r2, r3
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0d0      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d910      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b67      	ldr	r3, [pc, #412]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 0207 	bic.w	r2, r3, #7
 800379e:	4965      	ldr	r1, [pc, #404]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a52      	ldr	r2, [pc, #328]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d040      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d115      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b41      	ldr	r3, [pc, #260]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e073      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06b      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b39      	ldr	r3, [pc, #228]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4936      	ldr	r1, [pc, #216]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7fd ffec 	bl	8001840 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fd ffe8 	bl	8001840 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e053      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b27      	ldr	r3, [pc, #156]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d210      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b24      	ldr	r3, [pc, #144]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 0207 	bic.w	r2, r3, #7
 80038aa:	4922      	ldr	r1, [pc, #136]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1cc>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1d0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd ff4a 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40022000 	.word	0x40022000
 8003938:	40021000 	.word	0x40021000
 800393c:	08005c10 	.word	0x08005c10
 8003940:	20000008 	.word	0x20000008
 8003944:	2000000c 	.word	0x2000000c

08003948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003962:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b04      	cmp	r3, #4
 8003970:	d002      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x30>
 8003972:	2b08      	cmp	r3, #8
 8003974:	d003      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x36>
 8003976:	e027      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800397a:	613b      	str	r3, [r7, #16]
      break;
 800397c:	e027      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0c9b      	lsrs	r3, r3, #18
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0c5b      	lsrs	r3, r3, #17
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80039aa:	fb03 f202 	mul.w	r2, r3, r2
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e004      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	613b      	str	r3, [r7, #16]
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ca:	613b      	str	r3, [r7, #16]
      break;
 80039cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ce:	693b      	ldr	r3, [r7, #16]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	007a1200 	.word	0x007a1200
 80039e4:	08005c28 	.word	0x08005c28
 80039e8:	08005c38 	.word	0x08005c38
 80039ec:	003d0900 	.word	0x003d0900

080039f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	20000008 	.word	0x20000008

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a08:	f7ff fff2 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08005c20 	.word	0x08005c20

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a30:	f7ff ffde 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08005c20 	.word	0x08005c20

08003a54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <RCC_Delay+0x34>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <RCC_Delay+0x38>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	0a5b      	lsrs	r3, r3, #9
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a70:	bf00      	nop
  }
  while (Delay --);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	60fa      	str	r2, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f9      	bne.n	8003a70 <RCC_Delay+0x1c>
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	20000008 	.word	0x20000008
 8003a8c:	10624dd3 	.word	0x10624dd3

08003a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d07d      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003aac:	2300      	movs	r3, #0
 8003aae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abc:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	61d3      	str	r3, [r2, #28]
 8003ac8:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d118      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a42      	ldr	r2, [pc, #264]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af0:	f7fd fea6 	bl	8001840 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	e008      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af8:	f7fd fea2 	bl	8001840 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e06d      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b16:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d02e      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d027      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b34:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b3e:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b44:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b4a:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d014      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fe71 	bl	8001840 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fd fe6d 	bl	8001840 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e036      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ee      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4917      	ldr	r1, [pc, #92]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	490b      	ldr	r1, [pc, #44]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	42420440 	.word	0x42420440

08003bfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	2b0f      	cmp	r3, #15
 8003c1e:	f200 80af 	bhi.w	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003cff 	.word	0x08003cff
 8003c2c:	08003d65 	.word	0x08003d65
 8003c30:	08003d81 	.word	0x08003d81
 8003c34:	08003cef 	.word	0x08003cef
 8003c38:	08003d81 	.word	0x08003d81
 8003c3c:	08003d81 	.word	0x08003d81
 8003c40:	08003d81 	.word	0x08003d81
 8003c44:	08003cf7 	.word	0x08003cf7
 8003c48:	08003d81 	.word	0x08003d81
 8003c4c:	08003d81 	.word	0x08003d81
 8003c50:	08003d81 	.word	0x08003d81
 8003c54:	08003d81 	.word	0x08003d81
 8003c58:	08003d81 	.word	0x08003d81
 8003c5c:	08003d81 	.word	0x08003d81
 8003c60:	08003d81 	.word	0x08003d81
 8003c64:	08003c69 	.word	0x08003c69
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003c68:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c6e:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8084 	beq.w	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0c9b      	lsrs	r3, r3, #18
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	4a44      	ldr	r2, [pc, #272]	; (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8003c86:	5cd3      	ldrb	r3, [r2, r3]
 8003c88:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c94:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	0c5b      	lsrs	r3, r3, #17
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	4a3f      	ldr	r2, [pc, #252]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003ca0:	5cd3      	ldrb	r3, [r2, r3]
 8003ca2:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cae:	4a3c      	ldr	r2, [pc, #240]	; (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	fb02 f303 	mul.w	r3, r2, r3
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e004      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4a38      	ldr	r2, [pc, #224]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cca:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd6:	d102      	bne.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003cdc:	e052      	b.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4a31      	ldr	r2, [pc, #196]	; (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	61bb      	str	r3, [r7, #24]
      break;
 8003cec:	e04a      	b.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003cee:	f7ff fe2b 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003cf2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003cf4:	e049      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003cf6:	f7ff fe27 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003cfa:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003cfc:	e045      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003cfe:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0e:	d108      	bne.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8003d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	e01f      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8003d3a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e00f      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4c:	d11c      	bne.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8003d5a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d5e:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003d60:	e012      	b.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003d62:	e011      	b.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d64:	f7ff fe62 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	0b9b      	lsrs	r3, r3, #14
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	3301      	adds	r3, #1
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	61bb      	str	r3, [r7, #24]
      break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003d88:	bf00      	nop
    }
  }
  return (frequency);
 8003d8a:	69bb      	ldr	r3, [r7, #24]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	08005c3c 	.word	0x08005c3c
 8003d9c:	08005c4c 	.word	0x08005c4c
 8003da0:	007a1200 	.word	0x007a1200
 8003da4:	003d0900 	.word	0x003d0900
 8003da8:	aaaaaaab 	.word	0xaaaaaaab

08003dac <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07a      	b.n	8003eb8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	7c5b      	ldrb	r3, [r3, #17]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd fa22 	bl	800121c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fb2f 	bl	8004442 <HAL_RTC_WaitForSynchro>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2204      	movs	r2, #4
 8003dee:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e061      	b.n	8003eb8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fbe8 	bl	80045ca <RTC_EnterInitMode>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2204      	movs	r2, #4
 8003e04:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e056      	b.n	8003eb8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0207 	bic.w	r2, r2, #7
 8003e18:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <HAL_RTC_Init+0x114>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	4a26      	ldr	r2, [pc, #152]	; (8003ec0 <HAL_RTC_Init+0x114>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003e2e:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_RTC_Init+0x114>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4921      	ldr	r1, [pc, #132]	; (8003ec0 <HAL_RTC_Init+0x114>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d003      	beq.n	8003e52 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e00e      	b.n	8003e70 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003e52:	2001      	movs	r0, #1
 8003e54:	f7ff fed2 	bl	8003bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8003e58:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2204      	movs	r2, #4
 8003e64:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e026      	b.n	8003eb8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	0c1a      	lsrs	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f002 020f 	and.w	r2, r2, #15
 8003e7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	b292      	uxth	r2, r2
 8003e86:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fbc6 	bl	800461a <RTC_ExitInitMode>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00c      	b.n	8003eb8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40006c00 	.word	0x40006c00

08003ec4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_RTC_SetTime+0x20>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e080      	b.n	8003fea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	7c1b      	ldrb	r3, [r3, #16]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_RTC_SetTime+0x30>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e07a      	b.n	8003fea <HAL_RTC_SetTime+0x126>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2202      	movs	r2, #2
 8003efe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d113      	bne.n	8003f2e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f10:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a5b      	subs	r3, r3, r1
 8003f20:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f22:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f28:	4413      	add	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e01e      	b.n	8003f6c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fbb6 	bl	80046a4 <RTC_Bcd2ToByte>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f40:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fbab 	bl	80046a4 <RTC_Bcd2ToByte>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f5a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	789b      	ldrb	r3, [r3, #2]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fb9f 	bl	80046a4 <RTC_Bcd2ToByte>
 8003f66:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f68:	4423      	add	r3, r4
 8003f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003f6c:	6979      	ldr	r1, [r7, #20]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fac4 	bl	80044fc <RTC_WriteTimeCounter>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e02f      	b.n	8003fea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0205 	bic.w	r2, r2, #5
 8003f98:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fad5 	bl	800454a <RTC_ReadAlarmCounter>
 8003fa0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d018      	beq.n	8003fdc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d214      	bcs.n	8003fdc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003fb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fbc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fadb 	bl	800457c <RTC_WriteAlarmCounter>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e006      	b.n	8003fea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}
	...

08003ff4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_RTC_GetTime+0x28>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b5      	b.n	800418c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e0ac      	b.n	800418c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fa32 	bl	800449c <RTC_ReadTimeCounter>
 8004038:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	4a55      	ldr	r2, [pc, #340]	; (8004194 <HAL_RTC_GetTime+0x1a0>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	0adb      	lsrs	r3, r3, #11
 8004044:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4b52      	ldr	r3, [pc, #328]	; (8004194 <HAL_RTC_GetTime+0x1a0>)
 800404a:	fba3 1302 	umull	r1, r3, r3, r2
 800404e:	0adb      	lsrs	r3, r3, #11
 8004050:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	4a4f      	ldr	r2, [pc, #316]	; (8004198 <HAL_RTC_GetTime+0x1a4>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	4a4a      	ldr	r2, [pc, #296]	; (8004194 <HAL_RTC_GetTime+0x1a0>)
 800406c:	fba2 1203 	umull	r1, r2, r2, r3
 8004070:	0ad2      	lsrs	r2, r2, #11
 8004072:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004076:	fb01 f202 	mul.w	r2, r1, r2
 800407a:	1a9a      	subs	r2, r3, r2
 800407c:	4b46      	ldr	r3, [pc, #280]	; (8004198 <HAL_RTC_GetTime+0x1a4>)
 800407e:	fba3 1302 	umull	r1, r3, r3, r2
 8004082:	0959      	lsrs	r1, r3, #5
 8004084:	460b      	mov	r3, r1
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a5b      	subs	r3, r3, r1
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	1ad1      	subs	r1, r2, r3
 800408e:	b2ca      	uxtb	r2, r1
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b17      	cmp	r3, #23
 8004098:	d955      	bls.n	8004146 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4a3f      	ldr	r2, [pc, #252]	; (800419c <HAL_RTC_GetTime+0x1a8>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80040a6:	6939      	ldr	r1, [r7, #16]
 80040a8:	4b3c      	ldr	r3, [pc, #240]	; (800419c <HAL_RTC_GetTime+0x1a8>)
 80040aa:	fba3 2301 	umull	r2, r3, r3, r1
 80040ae:	091a      	lsrs	r2, r3, #4
 80040b0:	4613      	mov	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	1aca      	subs	r2, r1, r3
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fa42 	bl	800454a <RTC_ReadAlarmCounter>
 80040c6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d008      	beq.n	80040e2 <HAL_RTC_GetTime+0xee>
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d904      	bls.n	80040e2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	e002      	b.n	80040e8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295
 80040e6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4a2d      	ldr	r2, [pc, #180]	; (80041a0 <HAL_RTC_GetTime+0x1ac>)
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80040f6:	69b9      	ldr	r1, [r7, #24]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f9ff 	bl	80044fc <RTC_WriteTimeCounter>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e041      	b.n	800418c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d00c      	beq.n	800412a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004118:	69f9      	ldr	r1, [r7, #28]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fa2e 	bl	800457c <RTC_WriteAlarmCounter>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e030      	b.n	800418c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800412a:	69f9      	ldr	r1, [r7, #28]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fa25 	bl	800457c <RTC_WriteAlarmCounter>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e027      	b.n	800418c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 facd 	bl	80046de <RTC_DateUpdate>
 8004144:	e003      	b.n	800414e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fa86 	bl	800466a <RTC_ByteToBcd2>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fa7d 	bl	800466a <RTC_ByteToBcd2>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	789b      	ldrb	r3, [r3, #2]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fa74 	bl	800466a <RTC_ByteToBcd2>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3720      	adds	r7, #32
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	91a2b3c5 	.word	0x91a2b3c5
 8004198:	88888889 	.word	0x88888889
 800419c:	aaaaaaab 	.word	0xaaaaaaab
 80041a0:	00015180 	.word	0x00015180

080041a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_RTC_SetDate+0x24>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e097      	b.n	80042fc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	7c1b      	ldrb	r3, [r3, #16]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_RTC_SetDate+0x34>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e091      	b.n	80042fc <HAL_RTC_SetDate+0x158>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2202      	movs	r2, #2
 80041e2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	78da      	ldrb	r2, [r3, #3]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	785a      	ldrb	r2, [r3, #1]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	789a      	ldrb	r2, [r3, #2]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	739a      	strb	r2, [r3, #14]
 8004202:	e01a      	b.n	800423a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	78db      	ldrb	r3, [r3, #3]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fa4b 	bl	80046a4 <RTC_Bcd2ToByte>
 800420e:	4603      	mov	r3, r0
 8004210:	461a      	mov	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fa42 	bl	80046a4 <RTC_Bcd2ToByte>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	789b      	ldrb	r3, [r3, #2]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fa39 	bl	80046a4 <RTC_Bcd2ToByte>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	7bdb      	ldrb	r3, [r3, #15]
 800423e:	4618      	mov	r0, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	7b59      	ldrb	r1, [r3, #13]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	7b9b      	ldrb	r3, [r3, #14]
 8004248:	461a      	mov	r2, r3
 800424a:	f000 fb23 	bl	8004894 <RTC_WeekDayNum>
 800424e:	4603      	mov	r3, r0
 8004250:	461a      	mov	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	7b1a      	ldrb	r2, [r3, #12]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f91c 	bl	800449c <RTC_ReadTimeCounter>
 8004264:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_RTC_SetDate+0x160>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0adb      	lsrs	r3, r3, #11
 8004270:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b18      	cmp	r3, #24
 8004276:	d93a      	bls.n	80042ee <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4a23      	ldr	r2, [pc, #140]	; (8004308 <HAL_RTC_SetDate+0x164>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	4a22      	ldr	r2, [pc, #136]	; (800430c <HAL_RTC_SetDate+0x168>)
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800428e:	69f9      	ldr	r1, [r7, #28]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f933 	bl	80044fc <RTC_WriteTimeCounter>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2204      	movs	r2, #4
 80042a0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e027      	b.n	80042fc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f94c 	bl	800454a <RTC_ReadAlarmCounter>
 80042b2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d018      	beq.n	80042ee <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d214      	bcs.n	80042ee <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80042ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80042ce:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80042d0:	69b9      	ldr	r1, [r7, #24]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f952 	bl	800457c <RTC_WriteAlarmCounter>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2204      	movs	r2, #4
 80042e2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e006      	b.n	80042fc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	91a2b3c5 	.word	0x91a2b3c5
 8004308:	aaaaaaab 	.word	0xaaaaaaab
 800430c:	00015180 	.word	0x00015180

08004310 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	2100      	movs	r1, #0
 8004326:	460a      	mov	r2, r1
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	460a      	mov	r2, r1
 800432c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_RTC_SetAlarm+0x2a>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07d      	b.n	800443a <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	7c1b      	ldrb	r3, [r3, #16]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_RTC_SetAlarm+0x3a>
 8004346:	2302      	movs	r3, #2
 8004348:	e077      	b.n	800443a <HAL_RTC_SetAlarm+0x12a>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2202      	movs	r2, #2
 8004354:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	2200      	movs	r2, #0
 800435c:	4619      	mov	r1, r3
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7ff fe48 	bl	8003ff4 <HAL_RTC_GetTime>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e065      	b.n	800443a <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800436e:	7d3b      	ldrb	r3, [r7, #20]
 8004370:	461a      	mov	r2, r3
 8004372:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004376:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800437a:	7d7b      	ldrb	r3, [r7, #21]
 800437c:	4619      	mov	r1, r3
 800437e:	460b      	mov	r3, r1
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a5b      	subs	r3, r3, r1
 8004384:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004386:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004388:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800438a:	4413      	add	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d113      	bne.n	80043bc <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	461a      	mov	r2, r3
 800439a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800439e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	4619      	mov	r1, r3
 80043a8:	460b      	mov	r3, r1
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a5b      	subs	r3, r3, r1
 80043ae:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80043b0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80043b6:	4413      	add	r3, r2
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	e01e      	b.n	80043fa <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f96f 	bl	80046a4 <RTC_Bcd2ToByte>
 80043c6:	4603      	mov	r3, r0
 80043c8:	461a      	mov	r2, r3
 80043ca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80043ce:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f964 	bl	80046a4 <RTC_Bcd2ToByte>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80043e8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	789b      	ldrb	r3, [r3, #2]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f958 	bl	80046a4 <RTC_Bcd2ToByte>
 80043f4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80043f6:	4423      	add	r3, r4
 80043f8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d205      	bcs.n	800440e <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004408:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800440c:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800440e:	69f9      	ldr	r1, [r7, #28]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f8b3 	bl	800457c <RTC_WriteAlarmCounter>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2204      	movs	r2, #4
 8004420:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e006      	b.n	800443a <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004438:	2300      	movs	r3, #0
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3724      	adds	r7, #36	; 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}

08004442 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e01d      	b.n	8004494 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0208 	bic.w	r2, r2, #8
 8004466:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004468:	f7fd f9ea 	bl	8001840 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800446e:	e009      	b.n	8004484 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004470:	f7fd f9e6 	bl	8001840 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447e:	d901      	bls.n	8004484 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e007      	b.n	8004494 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	827b      	strh	r3, [r7, #18]
 80044a8:	2300      	movs	r3, #0
 80044aa:	823b      	strh	r3, [r7, #16]
 80044ac:	2300      	movs	r3, #0
 80044ae:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80044cc:	8a7a      	ldrh	r2, [r7, #18]
 80044ce:	8a3b      	ldrh	r3, [r7, #16]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d008      	beq.n	80044e6 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80044d4:	8a3b      	ldrh	r3, [r7, #16]
 80044d6:	041a      	lsls	r2, r3, #16
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e004      	b.n	80044f0 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80044e6:	8a7b      	ldrh	r3, [r7, #18]
 80044e8:	041a      	lsls	r2, r3, #16
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80044f0:	697b      	ldr	r3, [r7, #20]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f85d 	bl	80045ca <RTC_EnterInitMode>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	e011      	b.n	8004540 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	0c12      	lsrs	r2, r2, #16
 8004524:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	b292      	uxth	r2, r2
 800452e:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f872 	bl	800461a <RTC_ExitInitMode>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	81fb      	strh	r3, [r7, #14]
 8004556:	2300      	movs	r3, #0
 8004558:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800456a:	89fb      	ldrh	r3, [r7, #14]
 800456c:	041a      	lsls	r2, r3, #16
 800456e:	89bb      	ldrh	r3, [r7, #12]
 8004570:	4313      	orrs	r3, r2
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f81d 	bl	80045ca <RTC_EnterInitMode>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
 800459a:	e011      	b.n	80045c0 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	0c12      	lsrs	r2, r2, #16
 80045a4:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	b292      	uxth	r2, r2
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f832 	bl	800461a <RTC_ExitInitMode>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80045d6:	f7fd f933 	bl	8001840 <HAL_GetTick>
 80045da:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045dc:	e009      	b.n	80045f2 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80045de:	f7fd f92f 	bl	8001840 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ec:	d901      	bls.n	80045f2 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e00f      	b.n	8004612 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0ee      	beq.n	80045de <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0210 	orr.w	r2, r2, #16
 800460e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0210 	bic.w	r2, r2, #16
 8004634:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004636:	f7fd f903 	bl	8001840 <HAL_GetTick>
 800463a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800463c:	e009      	b.n	8004652 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800463e:	f7fd f8ff 	bl	8001840 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800464c:	d901      	bls.n	8004652 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e007      	b.n	8004662 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ee      	beq.n	800463e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	4603      	mov	r3, r0
 8004672:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004678:	e005      	b.n	8004686 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	3b0a      	subs	r3, #10
 8004684:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b09      	cmp	r3, #9
 800468a:	d8f6      	bhi.n	800467a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	b2da      	uxtb	r2, r3
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	4313      	orrs	r3, r2
 8004698:	b2db      	uxtb	r3, r3
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	b2db      	uxtb	r3, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b086      	sub	sp, #24
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	7bdb      	ldrb	r3, [r3, #15]
 80046fc:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	7b5b      	ldrb	r3, [r3, #13]
 8004702:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	7b9b      	ldrb	r3, [r3, #14]
 8004708:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	e06f      	b.n	80047f0 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d011      	beq.n	800473a <RTC_DateUpdate+0x5c>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d00e      	beq.n	800473a <RTC_DateUpdate+0x5c>
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b05      	cmp	r3, #5
 8004720:	d00b      	beq.n	800473a <RTC_DateUpdate+0x5c>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b07      	cmp	r3, #7
 8004726:	d008      	beq.n	800473a <RTC_DateUpdate+0x5c>
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b08      	cmp	r3, #8
 800472c:	d005      	beq.n	800473a <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b0a      	cmp	r3, #10
 8004732:	d002      	beq.n	800473a <RTC_DateUpdate+0x5c>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d117      	bne.n	800476a <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b1e      	cmp	r3, #30
 800473e:	d803      	bhi.n	8004748 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004746:	e050      	b.n	80047ea <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d005      	beq.n	800475a <RTC_DateUpdate+0x7c>
        {
          month++;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	3301      	adds	r3, #1
 8004752:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004754:	2301      	movs	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004758:	e047      	b.n	80047ea <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800475a:	2301      	movs	r3, #1
 800475c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800475e:	2301      	movs	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
          year++;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	3301      	adds	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004768:	e03f      	b.n	80047ea <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d008      	beq.n	8004782 <RTC_DateUpdate+0xa4>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b06      	cmp	r3, #6
 8004774:	d005      	beq.n	8004782 <RTC_DateUpdate+0xa4>
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b09      	cmp	r3, #9
 800477a:	d002      	beq.n	8004782 <RTC_DateUpdate+0xa4>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0b      	cmp	r3, #11
 8004780:	d10c      	bne.n	800479c <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b1d      	cmp	r3, #29
 8004786:	d803      	bhi.n	8004790 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800478e:	e02c      	b.n	80047ea <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3301      	adds	r3, #1
 8004794:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004796:	2301      	movs	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800479a:	e026      	b.n	80047ea <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d123      	bne.n	80047ea <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b1b      	cmp	r3, #27
 80047a6:	d803      	bhi.n	80047b0 <RTC_DateUpdate+0xd2>
      {
        day++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e01c      	b.n	80047ea <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b1c      	cmp	r3, #28
 80047b4:	d111      	bne.n	80047da <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f838 	bl	8004830 <RTC_IsLeapYear>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <RTC_DateUpdate+0xf0>
        {
          day++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3301      	adds	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e00d      	b.n	80047ea <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	3301      	adds	r3, #1
 80047d2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80047d4:	2301      	movs	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e007      	b.n	80047ea <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b1d      	cmp	r3, #29
 80047de:	d104      	bne.n	80047ea <RTC_DateUpdate+0x10c>
      {
        month++;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	3301      	adds	r3, #1
 80047e4:	613b      	str	r3, [r7, #16]
        day = 1U;
 80047e6:	2301      	movs	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d38b      	bcc.n	8004710 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	4619      	mov	r1, r3
 800481a:	6978      	ldr	r0, [r7, #20]
 800481c:	f000 f83a 	bl	8004894 <RTC_WeekDayNum>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	731a      	strb	r2, [r3, #12]
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	e01d      	b.n	8004886 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	4a10      	ldr	r2, [pc, #64]	; (8004890 <RTC_IsLeapYear+0x60>)
 800484e:	fba2 1203 	umull	r1, r2, r2, r3
 8004852:	0952      	lsrs	r2, r2, #5
 8004854:	2164      	movs	r1, #100	; 0x64
 8004856:	fb01 f202 	mul.w	r2, r1, r2
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004862:	2301      	movs	r3, #1
 8004864:	e00f      	b.n	8004886 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	4a09      	ldr	r2, [pc, #36]	; (8004890 <RTC_IsLeapYear+0x60>)
 800486a:	fba2 1203 	umull	r1, r2, r2, r3
 800486e:	09d2      	lsrs	r2, r2, #7
 8004870:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004874:	fb01 f202 	mul.w	r2, r1, r2
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004884:	2300      	movs	r3, #0
  }
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	51eb851f 	.word	0x51eb851f

08004894 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]
 80048a0:	4613      	mov	r3, r2
 80048a2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80048b2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d82d      	bhi.n	8004916 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	4a2c      	ldr	r2, [pc, #176]	; (8004978 <RTC_WeekDayNum+0xe4>)
 80048c8:	fba2 2303 	umull	r2, r3, r2, r3
 80048cc:	085a      	lsrs	r2, r3, #1
 80048ce:	78bb      	ldrb	r3, [r7, #2]
 80048d0:	441a      	add	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	441a      	add	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	3b01      	subs	r3, #1
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	4926      	ldr	r1, [pc, #152]	; (800497c <RTC_WeekDayNum+0xe8>)
 80048e4:	fba1 1303 	umull	r1, r3, r1, r3
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	4922      	ldr	r1, [pc, #136]	; (800497c <RTC_WeekDayNum+0xe8>)
 80048f2:	fba1 1303 	umull	r1, r3, r1, r3
 80048f6:	09db      	lsrs	r3, r3, #7
 80048f8:	4413      	add	r3, r2
 80048fa:	1d1a      	adds	r2, r3, #4
 80048fc:	4b20      	ldr	r3, [pc, #128]	; (8004980 <RTC_WeekDayNum+0xec>)
 80048fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004902:	1ad1      	subs	r1, r2, r3
 8004904:	0849      	lsrs	r1, r1, #1
 8004906:	440b      	add	r3, r1
 8004908:	0899      	lsrs	r1, r3, #2
 800490a:	460b      	mov	r3, r1
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	1a5b      	subs	r3, r3, r1
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e029      	b.n	800496a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	4613      	mov	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <RTC_WeekDayNum+0xe4>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	085a      	lsrs	r2, r3, #1
 800492a:	78bb      	ldrb	r3, [r7, #2]
 800492c:	441a      	add	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	441a      	add	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4910      	ldr	r1, [pc, #64]	; (800497c <RTC_WeekDayNum+0xe8>)
 800493c:	fba1 1303 	umull	r1, r3, r1, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	1ad2      	subs	r2, r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	490d      	ldr	r1, [pc, #52]	; (800497c <RTC_WeekDayNum+0xe8>)
 8004948:	fba1 1303 	umull	r1, r3, r1, r3
 800494c:	09db      	lsrs	r3, r3, #7
 800494e:	4413      	add	r3, r2
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <RTC_WeekDayNum+0xec>)
 8004954:	fba3 1302 	umull	r1, r3, r3, r2
 8004958:	1ad1      	subs	r1, r2, r3
 800495a:	0849      	lsrs	r1, r1, #1
 800495c:	440b      	add	r3, r1
 800495e:	0899      	lsrs	r1, r3, #2
 8004960:	460b      	mov	r3, r1
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	1a5b      	subs	r3, r3, r1
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	b2db      	uxtb	r3, r3
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	38e38e39 	.word	0x38e38e39
 800497c:	51eb851f 	.word	0x51eb851f
 8004980:	24924925 	.word	0x24924925

08004984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e076      	b.n	8004a84 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a6:	d009      	beq.n	80049bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	61da      	str	r2, [r3, #28]
 80049ae:	e005      	b.n	80049bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fc fc44 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	ea42 0103 	orr.w	r1, r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	0c1a      	lsrs	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f002 0204 	and.w	r2, r2, #4
 8004a62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <HAL_SRAM_Init+0x1c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa6:	d101      	bne.n	8004aac <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e038      	b.n	8004b1e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7fc fdf3 	bl	80016ac <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3308      	adds	r3, #8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f000 ff8f 	bl	80059f4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	f000 fff1 	bl	8005ac8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6858      	ldr	r0, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	f001 f81c 	bl	8005b30 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	6892      	ldr	r2, [r2, #8]
 8004b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	f041 0101 	orr.w	r1, r1, #1
 8004b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e041      	b.n	8004bbc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fc fbe3 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f000 fac9 	bl	80050fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e041      	b.n	8004c5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f839 	bl	8004c62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f000 fa7a 	bl	80050fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_TIM_PWM_Start+0x24>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e022      	b.n	8004cde <HAL_TIM_PWM_Start+0x6a>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d109      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0x3e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e015      	b.n	8004cde <HAL_TIM_PWM_Start+0x6a>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d109      	bne.n	8004ccc <HAL_TIM_PWM_Start+0x58>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e008      	b.n	8004cde <HAL_TIM_PWM_Start+0x6a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e072      	b.n	8004dcc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_PWM_Start+0x82>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	e013      	b.n	8004d1e <HAL_TIM_PWM_Start+0xaa>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d104      	bne.n	8004d06 <HAL_TIM_PWM_Start+0x92>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d04:	e00b      	b.n	8004d1e <HAL_TIM_PWM_Start+0xaa>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_PWM_Start+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d14:	e003      	b.n	8004d1e <HAL_TIM_PWM_Start+0xaa>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2201      	movs	r2, #1
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fca4 	bl	8005674 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a28      	ldr	r2, [pc, #160]	; (8004dd4 <HAL_TIM_PWM_Start+0x160>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIM_PWM_Start+0xcc>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a27      	ldr	r2, [pc, #156]	; (8004dd8 <HAL_TIM_PWM_Start+0x164>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIM_PWM_Start+0xd0>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_TIM_PWM_Start+0xd2>
 8004d44:	2300      	movs	r3, #0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <HAL_TIM_PWM_Start+0x160>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x122>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <HAL_TIM_PWM_Start+0x164>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x122>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d76:	d00e      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x122>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_TIM_PWM_Start+0x168>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x122>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <HAL_TIM_PWM_Start+0x16c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIM_PWM_Start+0x122>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <HAL_TIM_PWM_Start+0x170>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d111      	bne.n	8004dba <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d010      	beq.n	8004dca <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db8:	e007      	b.n	8004dca <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00

08004de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e0ae      	b.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	f200 809f 	bhi.w	8004f54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004f55 	.word	0x08004f55
 8004e24:	08004f55 	.word	0x08004f55
 8004e28:	08004f55 	.word	0x08004f55
 8004e2c:	08004e91 	.word	0x08004e91
 8004e30:	08004f55 	.word	0x08004f55
 8004e34:	08004f55 	.word	0x08004f55
 8004e38:	08004f55 	.word	0x08004f55
 8004e3c:	08004ed3 	.word	0x08004ed3
 8004e40:	08004f55 	.word	0x08004f55
 8004e44:	08004f55 	.word	0x08004f55
 8004e48:	08004f55 	.word	0x08004f55
 8004e4c:	08004f13 	.word	0x08004f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f9ca 	bl	80051f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6999      	ldr	r1, [r3, #24]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	619a      	str	r2, [r3, #24]
      break;
 8004e8e:	e064      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fa1a 	bl	80052d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	021a      	lsls	r2, r3, #8
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	619a      	str	r2, [r3, #24]
      break;
 8004ed0:	e043      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fa6d 	bl	80053b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0208 	orr.w	r2, r2, #8
 8004eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0204 	bic.w	r2, r2, #4
 8004efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69d9      	ldr	r1, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	61da      	str	r2, [r3, #28]
      break;
 8004f10:	e023      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fac1 	bl	80054a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69d9      	ldr	r1, [r3, #28]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	021a      	lsls	r2, r3, #8
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	61da      	str	r2, [r3, #28]
      break;
 8004f52:	e002      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
      break;
 8004f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_ConfigClockSource+0x1c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e0b4      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x186>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc0:	d03e      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0xd4>
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc6:	f200 8087 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fce:	f000 8086 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x172>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	d87f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b70      	cmp	r3, #112	; 0x70
 8004fda:	d01a      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xa6>
 8004fdc:	2b70      	cmp	r3, #112	; 0x70
 8004fde:	d87b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d050      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x11a>
 8004fe4:	2b60      	cmp	r3, #96	; 0x60
 8004fe6:	d877      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b50      	cmp	r3, #80	; 0x50
 8004fea:	d03c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xfa>
 8004fec:	2b50      	cmp	r3, #80	; 0x50
 8004fee:	d873      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d058      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x13a>
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d86f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b30      	cmp	r3, #48	; 0x30
 8004ffa:	d064      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d86b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d060      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d867      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05c      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d05a      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005010:	e062      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005022:	f000 fb08 	bl	8005636 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	609a      	str	r2, [r3, #8]
      break;
 800503e:	e04f      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005050:	f000 faf1 	bl	8005636 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005062:	609a      	str	r2, [r3, #8]
      break;
 8005064:	e03c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fa68 	bl	8005548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2150      	movs	r1, #80	; 0x50
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fabf 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8005084:	e02c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005092:	461a      	mov	r2, r3
 8005094:	f000 fa86 	bl	80055a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2160      	movs	r1, #96	; 0x60
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 faaf 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e01c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 fa48 	bl	8005548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa9f 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 80050c4:	e00c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f000 fa96 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 80050d6:	e003      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a33      	ldr	r2, [pc, #204]	; (80051dc <TIM_Base_SetConfig+0xe0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d013      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a32      	ldr	r2, [pc, #200]	; (80051e0 <TIM_Base_SetConfig+0xe4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00f      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d00b      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <TIM_Base_SetConfig+0xe8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d007      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <TIM_Base_SetConfig+0xec>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a2d      	ldr	r2, [pc, #180]	; (80051ec <TIM_Base_SetConfig+0xf0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d108      	bne.n	800514e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a22      	ldr	r2, [pc, #136]	; (80051dc <TIM_Base_SetConfig+0xe0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <TIM_Base_SetConfig+0x82>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <TIM_Base_SetConfig+0xe4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_Base_SetConfig+0x82>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0x82>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <TIM_Base_SetConfig+0xe8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0x82>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <TIM_Base_SetConfig+0xec>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0x82>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <TIM_Base_SetConfig+0xf0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a09      	ldr	r2, [pc, #36]	; (80051dc <TIM_Base_SetConfig+0xe0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0xc8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <TIM_Base_SetConfig+0xe4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d103      	bne.n	80051cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	615a      	str	r2, [r3, #20]
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00

080051f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f023 0201 	bic.w	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f023 0302 	bic.w	r3, r3, #2
 8005238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a20      	ldr	r2, [pc, #128]	; (80052c8 <TIM_OC1_SetConfig+0xd8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC1_SetConfig+0x64>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <TIM_OC1_SetConfig+0xdc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10c      	bne.n	800526e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0308 	bic.w	r3, r3, #8
 800525a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 0304 	bic.w	r3, r3, #4
 800526c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <TIM_OC1_SetConfig+0xd8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_OC1_SetConfig+0x8e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a14      	ldr	r2, [pc, #80]	; (80052cc <TIM_OC1_SetConfig+0xdc>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d111      	bne.n	80052a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800528c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40013400 	.word	0x40013400

080052d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f023 0210 	bic.w	r2, r3, #16
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0320 	bic.w	r3, r3, #32
 800531a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a21      	ldr	r2, [pc, #132]	; (80053b0 <TIM_OC2_SetConfig+0xe0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC2_SetConfig+0x68>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <TIM_OC2_SetConfig+0xe4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d10d      	bne.n	8005354 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800533e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <TIM_OC2_SetConfig+0xe0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC2_SetConfig+0x94>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <TIM_OC2_SetConfig+0xe4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d113      	bne.n	800538c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800536a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40013400 	.word	0x40013400

080053b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0303 	bic.w	r3, r3, #3
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a21      	ldr	r2, [pc, #132]	; (8005498 <TIM_OC3_SetConfig+0xe0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_OC3_SetConfig+0x66>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a20      	ldr	r2, [pc, #128]	; (800549c <TIM_OC3_SetConfig+0xe4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10d      	bne.n	800543a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a16      	ldr	r2, [pc, #88]	; (8005498 <TIM_OC3_SetConfig+0xe0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC3_SetConfig+0x92>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a15      	ldr	r2, [pc, #84]	; (800549c <TIM_OC3_SetConfig+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d113      	bne.n	8005472 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40013400 	.word	0x40013400

080054a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	031b      	lsls	r3, r3, #12
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a11      	ldr	r2, [pc, #68]	; (8005540 <TIM_OC4_SetConfig+0xa0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC4_SetConfig+0x68>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a10      	ldr	r2, [pc, #64]	; (8005544 <TIM_OC4_SetConfig+0xa4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d109      	bne.n	800551c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800550e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40013400 	.word	0x40013400

08005548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 030a 	bic.w	r3, r3, #10
 8005584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0210 	bic.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	031b      	lsls	r3, r3, #12
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	621a      	str	r2, [r3, #32]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	f043 0307 	orr.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005636:	b480      	push	{r7}
 8005638:	b087      	sub	sp, #28
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	021a      	lsls	r2, r3, #8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	431a      	orrs	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	609a      	str	r2, [r3, #8]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	2201      	movs	r2, #1
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a1a      	ldr	r2, [r3, #32]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	43db      	mvns	r3, r3
 8005696:	401a      	ands	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e050      	b.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d018      	beq.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572a:	d00e      	beq.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a15      	ldr	r2, [pc, #84]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a14      	ldr	r2, [pc, #80]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a12      	ldr	r2, [pc, #72]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d10c      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	4313      	orrs	r3, r2
 800575a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40000400 	.word	0x40000400
 800578c:	40000800 	.word	0x40000800
 8005790:	40000c00 	.word	0x40000c00

08005794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e03d      	b.n	800582c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e042      	b.n	80058ce <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fb fe5d 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2224      	movs	r2, #36	; 0x24
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005878:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f82c 	bl	80058d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800588e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695a      	ldr	r2, [r3, #20]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800589e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005912:	f023 030c 	bic.w	r3, r3, #12
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	430b      	orrs	r3, r1
 800591e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2c      	ldr	r2, [pc, #176]	; (80059ec <UART_SetConfig+0x114>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d103      	bne.n	8005948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005940:	f7fe f874 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	e002      	b.n	800594e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fe f85c 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 800594c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009a      	lsls	r2, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <UART_SetConfig+0x118>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	0119      	lsls	r1, r3, #4
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009a      	lsls	r2, r3, #2
 8005978:	441a      	add	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	fbb2 f2f3 	udiv	r2, r2, r3
 8005984:	4b1a      	ldr	r3, [pc, #104]	; (80059f0 <UART_SetConfig+0x118>)
 8005986:	fba3 0302 	umull	r0, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	2064      	movs	r0, #100	; 0x64
 800598e:	fb00 f303 	mul.w	r3, r0, r3
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	3332      	adds	r3, #50	; 0x32
 8005998:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <UART_SetConfig+0x118>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059a4:	4419      	add	r1, r3
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009a      	lsls	r2, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059bc:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <UART_SetConfig+0x118>)
 80059be:	fba3 0302 	umull	r0, r3, r3, r2
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	2064      	movs	r0, #100	; 0x64
 80059c6:	fb00 f303 	mul.w	r3, r0, r3
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	3332      	adds	r3, #50	; 0x32
 80059d0:	4a07      	ldr	r2, [pc, #28]	; (80059f0 <UART_SetConfig+0x118>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	440a      	add	r2, r1
 80059e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40013800 	.word	0x40013800
 80059f0:	51eb851f 	.word	0x51eb851f

080059f4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	f023 0101 	bic.w	r1, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d102      	bne.n	8005a24 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e001      	b.n	8005a28 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005a34:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005a3a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005a40:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005a46:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005a4c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005a52:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005a58:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005a5e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005a64:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <FSMC_NORSRAM_Init+0xd0>)
 8005a84:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a8c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005a94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	ea02 0103 	and.w	r1, r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4319      	orrs	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	0008fb7f 	.word	0x0008fb7f

08005ac8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ade:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	431a      	orrs	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	431a      	orrs	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	051b      	lsls	r3, r3, #20
 8005b06:	431a      	orrs	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	3b02      	subs	r3, #2
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	431a      	orrs	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	3201      	adds	r2, #1
 8005b1c:	4319      	orrs	r1, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b44:	d11d      	bne.n	8005b82 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b4e:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	6811      	ldr	r1, [r2, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	6852      	ldr	r2, [r2, #4]
 8005b5a:	0112      	lsls	r2, r2, #4
 8005b5c:	4311      	orrs	r1, r2
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	6892      	ldr	r2, [r2, #8]
 8005b62:	0212      	lsls	r2, r2, #8
 8005b64:	4311      	orrs	r1, r2
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	6992      	ldr	r2, [r2, #24]
 8005b6a:	4311      	orrs	r1, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	68d2      	ldr	r2, [r2, #12]
 8005b70:	0412      	lsls	r2, r2, #16
 8005b72:	430a      	orrs	r2, r1
 8005b74:	ea43 0102 	orr.w	r1, r3, r2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b80:	e005      	b.n	8005b8e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	cff00000 	.word	0xcff00000

08005ba0 <memset>:
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4402      	add	r2, r0
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d100      	bne.n	8005baa <memset+0xa>
 8005ba8:	4770      	bx	lr
 8005baa:	f803 1b01 	strb.w	r1, [r3], #1
 8005bae:	e7f9      	b.n	8005ba4 <memset+0x4>

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	4d0c      	ldr	r5, [pc, #48]	; (8005be8 <__libc_init_array+0x38>)
 8005bb6:	4c0d      	ldr	r4, [pc, #52]	; (8005bec <__libc_init_array+0x3c>)
 8005bb8:	1b64      	subs	r4, r4, r5
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	42a6      	cmp	r6, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	f000 f81a 	bl	8005bf8 <_init>
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	4d0a      	ldr	r5, [pc, #40]	; (8005bf0 <__libc_init_array+0x40>)
 8005bc8:	4c0a      	ldr	r4, [pc, #40]	; (8005bf4 <__libc_init_array+0x44>)
 8005bca:	1b64      	subs	r4, r4, r5
 8005bcc:	10a4      	asrs	r4, r4, #2
 8005bce:	42a6      	cmp	r6, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd8:	4798      	blx	r3
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be2:	4798      	blx	r3
 8005be4:	3601      	adds	r6, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	08005c50 	.word	0x08005c50
 8005bec:	08005c50 	.word	0x08005c50
 8005bf0:	08005c50 	.word	0x08005c50
 8005bf4:	08005c54 	.word	0x08005c54

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
