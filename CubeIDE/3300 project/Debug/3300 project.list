
3300 project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e34  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006058  08006058  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006058  08006058  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000014  08006074  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08006074  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017486  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326b  00000000  00000000  00037506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123a  00000000  00000000  0003bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003166  00000000  00000000  0003d0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd6e  00000000  00000000  00040240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6de1  00000000  00000000  0005bfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063a0  00000000  00000000  00102d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00109130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000014 	.word	0x20000014
 8000200:	00000000 	.word	0x00000000
 8000204:	08006000 	.word	0x08006000

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000018 	.word	0x20000018
 8000220:	08006000 	.word	0x08006000

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2iz>:
 80005a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30f      	bcc.n	80005d2 <__aeabi_f2iz+0x2a>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d90d      	bls.n	80005d8 <__aeabi_f2iz+0x30>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005c8:	fa23 f002 	lsr.w	r0, r3, r2
 80005cc:	bf18      	it	ne
 80005ce:	4240      	negne	r0, r0
 80005d0:	4770      	bx	lr
 80005d2:	f04f 0000 	mov.w	r0, #0
 80005d6:	4770      	bx	lr
 80005d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005dc:	d101      	bne.n	80005e2 <__aeabi_f2iz+0x3a>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	d105      	bne.n	80005ee <__aeabi_f2iz+0x46>
 80005e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80005e6:	bf08      	it	eq
 80005e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005ec:	4770      	bx	lr
 80005ee:	f04f 0000 	mov.w	r0, #0
 80005f2:	4770      	bx	lr

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 face 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f84a 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fd1a 	bl	8001038 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fcfa 	bl	8000ffc <MX_DMA_Init>
  MX_FSMC_Init();
 8000608:	f000 fd98 	bl	800113c <MX_FSMC_Init>
  MX_I2C1_Init();
 800060c:	f000 f978 	bl	8000900 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000610:	f000 fa08 	bl	8000a24 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000614:	f000 fadc 	bl	8000bd0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000618:	f000 fc9c 	bl	8000f54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800061c:	f000 fcc4 	bl	8000fa8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000620:	f000 f898 	bl	8000754 <MX_ADC1_Init>
  MX_RTC_Init();
 8000624:	f000 f99a 	bl	800095c <MX_RTC_Init>
  MX_TIM1_Init();
 8000628:	f000 fa32 	bl	8000a90 <MX_TIM1_Init>
  MX_TIM5_Init();
 800062c:	f000 fc1c 	bl	8000e68 <MX_TIM5_Init>
  MX_CAN_Init();
 8000630:	f000 f932 	bl	8000898 <MX_CAN_Init>
  MX_TIM3_Init();
 8000634:	f000 fb18 	bl	8000c68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000638:	f000 fb96 	bl	8000d68 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800063c:	2100      	movs	r1, #0
 800063e:	480f      	ldr	r0, [pc, #60]	; (800067c <main+0x88>)
 8000640:	f004 fd1c 	bl	800507c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <main+0x8c>)
 8000648:	f004 fd18 	bl	800507c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800064c:	2104      	movs	r1, #4
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <main+0x8c>)
 8000650:	f004 fd14 	bl	800507c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000654:	2108      	movs	r1, #8
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <main+0x90>)
 8000658:	f004 fd10 	bl	800507c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800065c:	210c      	movs	r1, #12
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <main+0x90>)
 8000660:	f004 fd0c 	bl	800507c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 5;
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <main+0x94>)
 8000666:	2205      	movs	r2, #5
 8000668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 8);
 800066a:	2208      	movs	r2, #8
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <main+0x98>)
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <main+0x9c>)
 8000670:	f001 fc02 	bl	8001e78 <HAL_ADC_Start_DMA>
    HAL_Delay(1);
 8000674:	2001      	movs	r0, #1
 8000676:	f001 faf1 	bl	8001c5c <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 8);
 800067a:	e7f6      	b.n	800066a <main+0x76>
 800067c:	2000018c 	.word	0x2000018c
 8000680:	2000021c 	.word	0x2000021c
 8000684:	20000264 	.word	0x20000264
 8000688:	40012c00 	.word	0x40012c00
 800068c:	200003cc 	.word	0x200003cc
 8000690:	20000030 	.word	0x20000030

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 fc80 	bl	8005fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
 80006c6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 ffc2 	bl	8003678 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006fa:	f000 fdf3 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fa2e 	bl	8003b7c <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000726:	f000 fddd 	bl	80012e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800072a:	2303      	movs	r3, #3
 800072c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800072e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000732:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000738:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fbab 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000748:	f000 fdcc 	bl	80012e4 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3758      	adds	r7, #88	; 0x58
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b4a      	ldr	r3, [pc, #296]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000766:	4a4b      	ldr	r2, [pc, #300]	; (8000894 <MX_ADC1_Init+0x140>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800076a:	4b49      	ldr	r3, [pc, #292]	; (8000890 <MX_ADC1_Init+0x13c>)
 800076c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000772:	4b47      	ldr	r3, [pc, #284]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000774:	2200      	movs	r2, #0
 8000776:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000778:	4b45      	ldr	r3, [pc, #276]	; (8000890 <MX_ADC1_Init+0x13c>)
 800077a:	2200      	movs	r2, #0
 800077c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000780:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b42      	ldr	r3, [pc, #264]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800078c:	4b40      	ldr	r3, [pc, #256]	; (8000890 <MX_ADC1_Init+0x13c>)
 800078e:	2208      	movs	r2, #8
 8000790:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	483f      	ldr	r0, [pc, #252]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000794:	f001 fa86 	bl	8001ca4 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800079e:	f000 fda1 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007a2:	230a      	movs	r3, #10
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4837      	ldr	r0, [pc, #220]	; (8000890 <MX_ADC1_Init+0x13c>)
 80007b4:	f001 fd18 	bl	80021e8 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 fd91 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007c2:	230b      	movs	r3, #11
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4830      	ldr	r0, [pc, #192]	; (8000890 <MX_ADC1_Init+0x13c>)
 80007d0:	f001 fd0a 	bl	80021e8 <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007da:	f000 fd83 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007de:	230c      	movs	r3, #12
 80007e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4829      	ldr	r0, [pc, #164]	; (8000890 <MX_ADC1_Init+0x13c>)
 80007ec:	f001 fcfc 	bl	80021e8 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80007f6:	f000 fd75 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007fa:	230d      	movs	r3, #13
 80007fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007fe:	2304      	movs	r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4822      	ldr	r0, [pc, #136]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000808:	f001 fcee 	bl	80021e8 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000812:	f000 fd67 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000816:	2305      	movs	r3, #5
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800081a:	2305      	movs	r3, #5
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	481b      	ldr	r0, [pc, #108]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000824:	f001 fce0 	bl	80021e8 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800082e:	f000 fd59 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000832:	230e      	movs	r3, #14
 8000834:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000836:	2306      	movs	r3, #6
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000840:	f001 fcd2 	bl	80021e8 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800084a:	f000 fd4b 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000852:	2307      	movs	r3, #7
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_ADC1_Init+0x13c>)
 800085c:	f001 fcc4 	bl	80021e8 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000866:	f000 fd3d 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800086a:	2308      	movs	r3, #8
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800086e:	2308      	movs	r3, #8
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_ADC1_Init+0x13c>)
 8000878:	f001 fcb6 	bl	80021e8 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000882:	f000 fd2f 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000030 	.word	0x20000030
 8000894:	40012400 	.word	0x40012400

08000898 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_CAN_Init+0x60>)
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_CAN_Init+0x64>)
 80008a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_CAN_Init+0x60>)
 80008a4:	2210      	movs	r2, #16
 80008a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_CAN_Init+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_CAN_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_CAN_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_CAN_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_CAN_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_CAN_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_CAN_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_CAN_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_CAN_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_CAN_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_CAN_Init+0x60>)
 80008e6:	f001 fe81 	bl	80025ec <HAL_CAN_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80008f0:	f000 fcf8 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000a4 	.word	0x200000a4
 80008fc:	40006400 	.word	0x40006400

08000900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C1_Init+0x50>)
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <MX_I2C1_Init+0x54>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_I2C1_Init+0x50>)
 800090c:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_I2C1_Init+0x58>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C1_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2C1_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_I2C1_Init+0x50>)
 800091e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000922:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2C1_Init+0x50>)
 800093e:	f002 fd4b 	bl	80033d8 <HAL_I2C_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000948:	f000 fccc 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000cc 	.word	0x200000cc
 8000954:	40005400 	.word	0x40005400
 8000958:	000186a0 	.word	0x000186a0

0800095c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2100      	movs	r1, #0
 8000968:	460a      	mov	r2, r1
 800096a:	801a      	strh	r2, [r3, #0]
 800096c:	460a      	mov	r2, r1
 800096e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_RTC_Init+0xc0>)
 800097e:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <MX_RTC_Init+0xc4>)
 8000980:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <MX_RTC_Init+0xc0>)
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <MX_RTC_Init+0xc0>)
 800098c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000990:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000992:	4822      	ldr	r0, [pc, #136]	; (8000a1c <MX_RTC_Init+0xc0>)
 8000994:	f003 fc0e 	bl	80041b4 <HAL_RTC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 fca1 	bl	80012e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2201      	movs	r2, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	4819      	ldr	r0, [pc, #100]	; (8000a1c <MX_RTC_Init+0xc0>)
 80009b8:	f003 fc88 	bl	80042cc <HAL_RTC_SetTime>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80009c2:	f000 fc8f 	bl	80012e4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009c6:	2301      	movs	r3, #1
 80009c8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80009ca:	2301      	movs	r3, #1
 80009cc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2201      	movs	r2, #1
 80009dc:	4619      	mov	r1, r3
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <MX_RTC_Init+0xc0>)
 80009e0:	f003 fde4 	bl	80045ac <HAL_RTC_SetDate>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80009ea:	f000 fc7b 	bl	80012e4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_RTC_Init+0xc0>)
 8000a06:	f003 fe87 	bl	8004718 <HAL_RTC_SetAlarm>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000a10:	f000 fc68 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000120 	.word	0x20000120
 8000a20:	40002800 	.word	0x40002800

08000a24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <MX_SPI1_Init+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a76:	f004 f989 	bl	8004d8c <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a80:	f000 fc30 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000134 	.word	0x20000134
 8000a8c:	40013000 	.word	0x40013000

08000a90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b096      	sub	sp, #88	; 0x58
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 fa6d 	bl	8005fa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000ad0:	4a3e      	ldr	r2, [pc, #248]	; (8000bcc <MX_TIM1_Init+0x13c>)
 8000ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000ad6:	2206      	movs	r2, #6
 8000ad8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000ae0:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000ae2:	2263      	movs	r2, #99	; 0x63
 8000ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af8:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000afa:	f004 fa18 	bl	8004f2e <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b04:	f000 fbee 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b12:	4619      	mov	r1, r3
 8000b14:	482c      	ldr	r0, [pc, #176]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000b16:	f004 fc2d 	bl	8005374 <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b20:	f000 fbe0 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b24:	4828      	ldr	r0, [pc, #160]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000b26:	f004 fa51 	bl	8004fcc <HAL_TIM_PWM_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b30:	f000 fbd8 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b40:	4619      	mov	r1, r3
 8000b42:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000b44:	f004 ffbe 	bl	8005ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b4e:	f000 fbc9 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b52:	2360      	movs	r3, #96	; 0x60
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b62:	2304      	movs	r3, #4
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000b78:	f004 fb3a 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b82:	f000 fbaf 	bl	80012e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000baa:	f004 fff7 	bl	8005b9c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000bb4:	f000 fb96 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <MX_TIM1_Init+0x138>)
 8000bba:	f000 fe1d 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8000bbe:	bf00      	nop
 8000bc0:	3758      	adds	r7, #88	; 0x58
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000018c 	.word	0x2000018c
 8000bcc:	40012c00 	.word	0x40012c00

08000bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c14:	4813      	ldr	r0, [pc, #76]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c16:	f004 f98a 	bl	8004f2e <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c20:	f000 fb60 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c32:	f004 fb9f 	bl	8005374 <HAL_TIM_ConfigClockSource>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c3c:	f000 fb52 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_TIM2_Init+0x94>)
 8000c4e:	f004 ff39 	bl	8005ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c58:	f000 fb44 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200001d4 	.word	0x200001d4

08000c68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c98:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000c9a:	4a32      	ldr	r2, [pc, #200]	; (8000d64 <MX_TIM3_Init+0xfc>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000c9e:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000ca0:	2247      	movs	r2, #71	; 0x47
 8000ca2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000cac:	2263      	movs	r2, #99	; 0x63
 8000cae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cbc:	4828      	ldr	r0, [pc, #160]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000cbe:	f004 f936 	bl	8004f2e <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000cc8:	f000 fb0c 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4821      	ldr	r0, [pc, #132]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000cda:	f004 fb4b 	bl	8005374 <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000ce4:	f000 fafe 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce8:	481d      	ldr	r0, [pc, #116]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000cea:	f004 f96f 	bl	8004fcc <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000cf4:	f000 faf6 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4619      	mov	r1, r3
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000d08:	f004 fedc 	bl	8005ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000d12:	f000 fae7 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	; 0x60
 8000d18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000d2e:	f004 fa5f 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000d38:	f000 fad4 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000d44:	f004 fa54 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000d4e:	f000 fac9 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_TIM3_Init+0xf8>)
 8000d54:	f000 fd50 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8000d58:	bf00      	nop
 8000d5a:	3738      	adds	r7, #56	; 0x38
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000021c 	.word	0x2000021c
 8000d64:	40000400 	.word	0x40000400

08000d68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	; 0x38
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d98:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000d9a:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <MX_TIM4_Init+0xfc>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000da0:	2247      	movs	r2, #71	; 0x47
 8000da2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000dac:	2263      	movs	r2, #99	; 0x63
 8000dae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000dbe:	f004 f8b6 	bl	8004f2e <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000dc8:	f000 fa8c 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4821      	ldr	r0, [pc, #132]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000dda:	f004 facb 	bl	8005374 <HAL_TIM_ConfigClockSource>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000de4:	f000 fa7e 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000dea:	f004 f8ef 	bl	8004fcc <HAL_TIM_PWM_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000df4:	f000 fa76 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	4619      	mov	r1, r3
 8000e06:	4816      	ldr	r0, [pc, #88]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000e08:	f004 fe5c 	bl	8005ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000e12:	f000 fa67 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e16:	2360      	movs	r3, #96	; 0x60
 8000e18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2208      	movs	r2, #8
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000e2e:	f004 f9df 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000e38:	f000 fa54 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	220c      	movs	r2, #12
 8000e40:	4619      	mov	r1, r3
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000e44:	f004 f9d4 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000e4e:	f000 fa49 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <MX_TIM4_Init+0xf8>)
 8000e54:	f000 fcd0 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8000e58:	bf00      	nop
 8000e5a:	3738      	adds	r7, #56	; 0x38
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000264 	.word	0x20000264
 8000e64:	40000800 	.word	0x40000800

08000e68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e98:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000e9a:	4a2d      	ldr	r2, [pc, #180]	; (8000f50 <MX_TIM5_Init+0xe8>)
 8000e9c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ebe:	4823      	ldr	r0, [pc, #140]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000ec0:	f004 f835 	bl	8004f2e <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000eca:	f000 fa0b 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000edc:	f004 fa4a 	bl	8005374 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000ee6:	f000 f9fd 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000eea:	4818      	ldr	r0, [pc, #96]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000eec:	f004 f86e 	bl	8004fcc <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000ef6:	f000 f9f5 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4619      	mov	r1, r3
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000f0a:	f004 fddb 	bl	8005ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000f14:	f000 f9e6 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	; 0x60
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000f30:	f004 f95e 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000f3a:	f000 f9d3 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MX_TIM5_Init+0xe4>)
 8000f40:	f000 fc5a 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8000f44:	bf00      	nop
 8000f46:	3738      	adds	r7, #56	; 0x38
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200002ac 	.word	0x200002ac
 8000f50:	40000c00 	.word	0x40000c00

08000f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_USART1_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	f004 fe57 	bl	8005c3e <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f000 f9a5 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002f4 	.word	0x200002f4
 8000fa4:	40013800 	.word	0x40013800

08000fa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_USART2_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	f004 fe2d 	bl	8005c3e <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f000 f97b 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000033c 	.word	0x2000033c
 8000ff8:	40004400 	.word	0x40004400

08000ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_DMA_Init+0x38>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <MX_DMA_Init+0x38>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_DMA_Init+0x38>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200b      	movs	r0, #11
 8001020:	f001 fcb7 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001024:	200b      	movs	r0, #11
 8001026:	f001 fcd0 	bl	80029ca <HAL_NVIC_EnableIRQ>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800104c:	4b37      	ldr	r3, [pc, #220]	; (800112c <MX_GPIO_Init+0xf4>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a36      	ldr	r2, [pc, #216]	; (800112c <MX_GPIO_Init+0xf4>)
 8001052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b34      	ldr	r3, [pc, #208]	; (800112c <MX_GPIO_Init+0xf4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <MX_GPIO_Init+0xf4>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a30      	ldr	r2, [pc, #192]	; (800112c <MX_GPIO_Init+0xf4>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b2e      	ldr	r3, [pc, #184]	; (800112c <MX_GPIO_Init+0xf4>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_GPIO_Init+0xf4>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a2a      	ldr	r2, [pc, #168]	; (800112c <MX_GPIO_Init+0xf4>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_GPIO_Init+0xf4>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_GPIO_Init+0xf4>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a24      	ldr	r2, [pc, #144]	; (800112c <MX_GPIO_Init+0xf4>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_GPIO_Init+0xf4>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_GPIO_Init+0xf4>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <MX_GPIO_Init+0xf4>)
 80010b2:	f043 0320 	orr.w	r3, r3, #32
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_GPIO_Init+0xf4>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0320 	and.w	r3, r3, #32
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CPT_RST_Pin|CPT_INT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	211a      	movs	r1, #26
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <MX_GPIO_Init+0xf8>)
 80010ca:	f002 f96d 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <MX_GPIO_Init+0xfc>)
 80010d4:	f002 f968 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CPT_RST_Pin CPT_INT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CPT_RST_Pin|CPT_INT_Pin|LCD_RST_Pin;
 80010d8:	231a      	movs	r3, #26
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2302      	movs	r3, #2
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4810      	ldr	r0, [pc, #64]	; (8001130 <MX_GPIO_Init+0xf8>)
 80010f0:	f001 ffc6 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_CURRENT_ADC_Pin */
  GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f8:	2303      	movs	r3, #3
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_CURRENT_ADC_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4619      	mov	r1, r3
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_GPIO_Init+0x100>)
 8001104:	f001 ffbc 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001108:	2340      	movs	r3, #64	; 0x40
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2302      	movs	r3, #2
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_GPIO_Init+0xfc>)
 8001120:	f001 ffae 	bl	8003080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	40011800 	.word	0x40011800
 8001134:	40011400 	.word	0x40011400
 8001138:	40011000 	.word	0x40011000

0800113c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]
 8001152:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_FSMC_Init+0xbc>)
 8001156:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800115a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_FSMC_Init+0xbc>)
 800115e:	4a27      	ldr	r2, [pc, #156]	; (80011fc <MX_FSMC_Init+0xc0>)
 8001160:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <MX_FSMC_Init+0xbc>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_FSMC_Init+0xbc>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_FSMC_Init+0xbc>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_FSMC_Init+0xbc>)
 8001176:	2210      	movs	r2, #16
 8001178:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_FSMC_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_FSMC_Init+0xbc>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_FSMC_Init+0xbc>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_FSMC_Init+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_FSMC_Init+0xbc>)
 8001194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_FSMC_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_FSMC_Init+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_FSMC_Init+0xbc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_FSMC_Init+0xbc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011b2:	230f      	movs	r3, #15
 80011b4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011b6:	230f      	movs	r3, #15
 80011b8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011ba:	23ff      	movs	r3, #255	; 0xff
 80011bc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011be:	230f      	movs	r3, #15
 80011c0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011c2:	2310      	movs	r3, #16
 80011c4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011c6:	2311      	movs	r3, #17
 80011c8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <MX_FSMC_Init+0xbc>)
 80011d6:	f003 fe5d 	bl	8004e94 <HAL_SRAM_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80011e0:	f000 f880 	bl	80012e4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_FSMC_Init+0xc4>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <MX_FSMC_Init+0xc4>)
 80011ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ee:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000384 	.word	0x20000384
 80011fc:	a0000104 	.word	0xa0000104
 8001200:	40010000 	.word	0x40010000

08001204 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  asm("NOP");
 800120c:	bf00      	nop
  LDR_val[0] = adc_data[4] * 1.63f;
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001210:	891b      	ldrh	r3, [r3, #8]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f973 	bl	8000500 <__aeabi_i2f>
 800121a:	4603      	mov	r3, r0
 800121c:	492b      	ldr	r1, [pc, #172]	; (80012cc <HAL_ADC_ConvCpltCallback+0xc8>)
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f800 	bl	8000224 <__aeabi_fmul>
 8001224:	4603      	mov	r3, r0
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9be 	bl	80005a8 <__aeabi_f2iz>
 800122c:	4603      	mov	r3, r0
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001232:	801a      	strh	r2, [r3, #0]
  LDR_val[1] = adc_data[5];
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001236:	895b      	ldrh	r3, [r3, #10]
 8001238:	b29b      	uxth	r3, r3
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 800123e:	805a      	strh	r2, [r3, #2]
  LDR_val[2] = adc_data[6];
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001242:	899b      	ldrh	r3, [r3, #12]
 8001244:	b29b      	uxth	r3, r3
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 800124a:	809a      	strh	r2, [r3, #4]
  LDR_val[3] = adc_data[7];
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_ADC_ConvCpltCallback+0xc4>)
 800124e:	89db      	ldrh	r3, [r3, #14]
 8001250:	b29b      	uxth	r3, r3
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001256:	80da      	strh	r2, [r3, #6]
  SOLAR_TRACKER_track(LDR_val[0] + LDR_val[1], LDR_val[2] + LDR_val[3], &(TIM3->CCR1), &(TIM3->CCR2));
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001262:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4413      	add	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	b218      	sxth	r0, r3
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001270:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001278:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	b219      	sxth	r1, r3
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001288:	f000 f832 	bl	80012f0 <SOLAR_TRACKER_track>
  SOLAR_TRACKER_track(LDR_val[1] + LDR_val[2], LDR_val[0] + LDR_val[4], &(TIM4->CCR3), &(TIM4->CCR4));
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 800128e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b218      	sxth	r0, r3
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 80012a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_ADC_ConvCpltCallback+0xcc>)
 80012ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	b219      	sxth	r1, r3
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_ADC_ConvCpltCallback+0xd8>)
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_ADC_ConvCpltCallback+0xdc>)
 80012bc:	f000 f818 	bl	80012f0 <SOLAR_TRACKER_track>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200003cc 	.word	0x200003cc
 80012cc:	3fd0a3d7 	.word	0x3fd0a3d7
 80012d0:	200003dc 	.word	0x200003dc
 80012d4:	40000438 	.word	0x40000438
 80012d8:	40000434 	.word	0x40000434
 80012dc:	40000840 	.word	0x40000840
 80012e0:	4000083c 	.word	0x4000083c

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <SOLAR_TRACKER_track>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int SOLAR_TRACKER_init(void);
int SOLAR_TRACKER_calibrate(void);
int SOLAR_TRACKER_track(int16_t LDR_VAL_A, int16_t LDR_VAL_B, uint32_t *MOTOR_OUTPUT_A, uint32_t *MOTOR_OUTPUT_B) {
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60ba      	str	r2, [r7, #8]
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4603      	mov	r3, r0
 80012fc:	81fb      	strh	r3, [r7, #14]
 80012fe:	460b      	mov	r3, r1
 8001300:	81bb      	strh	r3, [r7, #12]
    if (LDR_VAL_A - LDR_VAL_B > diff_threshold) {
 8001302:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001306:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800130a:	1ad2      	subs	r2, r2, r3
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <SOLAR_TRACKER_track+0x74>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	dd08      	ble.n	8001326 <SOLAR_TRACKER_track+0x36>
        *MOTOR_OUTPUT_A = MOTOR_MAX;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <SOLAR_TRACKER_track+0x78>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = 0;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e017      	b.n	8001356 <SOLAR_TRACKER_track+0x66>
    } else if (LDR_VAL_B - LDR_VAL_A > diff_threshold) {
 8001326:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800132a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132e:	1ad2      	subs	r2, r2, r3
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <SOLAR_TRACKER_track+0x74>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	dd08      	ble.n	800134a <SOLAR_TRACKER_track+0x5a>
        *MOTOR_OUTPUT_A = 0;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = MOTOR_MAX;
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <SOLAR_TRACKER_track+0x78>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e005      	b.n	8001356 <SOLAR_TRACKER_track+0x66>
    } else {
        *MOTOR_OUTPUT_A = 0;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = 0;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
    }
 8001356:	bf00      	nop
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_MspInit+0x5c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x5c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_MspInit+0x60>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_MspInit+0x60>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000

080013d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a42      	ldr	r2, [pc, #264]	; (80014f4 <HAL_ADC_MspInit+0x124>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d17d      	bne.n	80014ec <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013f0:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 80013f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a3a      	ldr	r2, [pc, #232]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a34      	ldr	r2, [pc, #208]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_ADC_MspInit+0x128>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin|INPUT_VOLTAGE_ADC_Pin|OUTPUT_VOLTAGE_ADC_Pin|OUTPUT_CURRENT_ADC_Pin
 8001450:	233f      	movs	r3, #63	; 0x3f
 8001452:	61bb      	str	r3, [r7, #24]
                          |LDR2_ADC_Pin|LDR3_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001454:	2303      	movs	r3, #3
 8001456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4619      	mov	r1, r3
 800145e:	4827      	ldr	r0, [pc, #156]	; (80014fc <HAL_ADC_MspInit+0x12c>)
 8001460:	f001 fe0e 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR1_ADC_Pin;
 8001464:	2320      	movs	r3, #32
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR1_ADC_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	4619      	mov	r1, r3
 8001472:	4823      	ldr	r0, [pc, #140]	; (8001500 <HAL_ADC_MspInit+0x130>)
 8001474:	f001 fe04 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR4_ADC_Pin;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2303      	movs	r3, #3
 800147e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR4_ADC_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4619      	mov	r1, r3
 8001486:	481f      	ldr	r0, [pc, #124]	; (8001504 <HAL_ADC_MspInit+0x134>)
 8001488:	f001 fdfa 	bl	8003080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_ADC_MspInit+0x138>)
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <HAL_ADC_MspInit+0x13c>)
 8001490:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_ADC_MspInit+0x138>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_ADC_MspInit+0x138>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_ADC_MspInit+0x138>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_ADC_MspInit+0x138>)
 80014a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_ADC_MspInit+0x138>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_ADC_MspInit+0x138>)
 80014b6:	2220      	movs	r2, #32
 80014b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_ADC_MspInit+0x138>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <HAL_ADC_MspInit+0x138>)
 80014c2:	f001 fa9d 	bl	8002a00 <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80014cc:	f7ff ff0a 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_ADC_MspInit+0x138>)
 80014d4:	621a      	str	r2, [r3, #32]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_ADC_MspInit+0x138>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2012      	movs	r0, #18
 80014e2:	f001 fa56 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014e6:	2012      	movs	r0, #18
 80014e8:	f001 fa6f 	bl	80029ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40012400 	.word	0x40012400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40011000 	.word	0x40011000
 8001500:	40010800 	.word	0x40010800
 8001504:	40010c00 	.word	0x40010c00
 8001508:	20000060 	.word	0x20000060
 800150c:	40020008 	.word	0x40020008

08001510 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_CAN_MspInit+0x8c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d131      	bne.n	8001594 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_CAN_MspInit+0x90>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_CAN_MspInit+0x90>)
 8001536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800153a:	61d3      	str	r3, [r2, #28]
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_CAN_MspInit+0x90>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_CAN_MspInit+0x90>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_CAN_MspInit+0x90>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_CAN_MspInit+0x90>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001564:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4619      	mov	r1, r3
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <HAL_CAN_MspInit+0x94>)
 8001576:	f001 fd83 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800157a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_CAN_MspInit+0x94>)
 8001590:	f001 fd76 	bl	8003080 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40006400 	.word	0x40006400
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010800 	.word	0x40010800

080015a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <HAL_I2C_MspInit+0x70>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d123      	bne.n	8001610 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_I2C_MspInit+0x74>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a13      	ldr	r2, [pc, #76]	; (800161c <HAL_I2C_MspInit+0x74>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_I2C_MspInit+0x74>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = CPT_SCL_Pin|CPT_SDA_Pin;
 80015e0:	23c0      	movs	r3, #192	; 0xc0
 80015e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e4:	2312      	movs	r3, #18
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	480b      	ldr	r0, [pc, #44]	; (8001620 <HAL_I2C_MspInit+0x78>)
 80015f4:	f001 fd44 	bl	8003080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_I2C_MspInit+0x74>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_I2C_MspInit+0x74>)
 80015fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001602:	61d3      	str	r3, [r2, #28]
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_I2C_MspInit+0x74>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40005400 	.word	0x40005400
 800161c:	40021000 	.word	0x40021000
 8001620:	40010c00 	.word	0x40010c00

08001624 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_RTC_MspInit+0x3c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d110      	bne.n	8001658 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001636:	f002 f813 	bl	8003660 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_RTC_MspInit+0x40>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_RTC_MspInit+0x40>)
 8001640:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_RTC_MspInit+0x40>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_RTC_MspInit+0x44>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40002800 	.word	0x40002800
 8001664:	40021000 	.word	0x40021000
 8001668:	4242043c 	.word	0x4242043c

0800166c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_SPI_MspInit+0xa4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d13d      	bne.n	8001708 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_SPI_MspInit+0xa8>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <HAL_SPI_MspInit+0xa8>)
 8001692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <HAL_SPI_MspInit+0xa8>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_SPI_MspInit+0xa8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_SPI_MspInit+0xa8>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_SPI_MspInit+0xa8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80016bc:	2328      	movs	r3, #40	; 0x28
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4812      	ldr	r0, [pc, #72]	; (8001718 <HAL_SPI_MspInit+0xac>)
 80016d0:	f001 fcd6 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016d4:	2310      	movs	r3, #16
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <HAL_SPI_MspInit+0xac>)
 80016e8:	f001 fcca 	bl	8003080 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_SPI_MspInit+0xb0>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_SPI_MspInit+0xb0>)
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40013000 	.word	0x40013000
 8001714:	40021000 	.word	0x40021000
 8001718:	40010c00 	.word	0x40010c00
 800171c:	40010000 	.word	0x40010000

08001720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <HAL_TIM_Base_MspInit+0xc4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10c      	bne.n	800174c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 8001738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800174a:	e046      	b.n	80017da <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d10c      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	61d3      	str	r3, [r2, #28]
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
}
 800176e:	e034      	b.n	80017da <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_TIM_Base_MspInit+0xcc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10c      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a1a      	ldr	r2, [pc, #104]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
}
 8001792:	e022      	b.n	80017da <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <HAL_TIM_Base_MspInit+0xd0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10c      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
}
 80017b6:	e010      	b.n	80017da <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_TIM_Base_MspInit+0xd4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10b      	bne.n	80017da <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_TIM_Base_MspInit+0xc8>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
}
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40000800 	.word	0x40000800
 80017f4:	40000c00 	.word	0x40000c00

080017f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0318 	add.w	r3, r7, #24
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_TIM_MspPostInit+0x110>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d119      	bne.n	800184c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a3b      	ldr	r2, [pc, #236]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MPPT_PWM_Pin;
 8001830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MPPT_PWM_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 0318 	add.w	r3, r7, #24
 8001842:	4619      	mov	r1, r3
 8001844:	4832      	ldr	r0, [pc, #200]	; (8001910 <HAL_TIM_MspPostInit+0x118>)
 8001846:	f001 fc1b 	bl	8003080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800184a:	e059      	b.n	8001900 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a30      	ldr	r2, [pc, #192]	; (8001914 <HAL_TIM_MspPostInit+0x11c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d118      	bne.n	8001888 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a2c      	ldr	r2, [pc, #176]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6193      	str	r3, [r2, #24]
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_PITCH_1_Pin|PWM_PITCH_2_Pin;
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2302      	movs	r3, #2
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	4619      	mov	r1, r3
 8001880:	4823      	ldr	r0, [pc, #140]	; (8001910 <HAL_TIM_MspPostInit+0x118>)
 8001882:	f001 fbfd 	bl	8003080 <HAL_GPIO_Init>
}
 8001886:	e03b      	b.n	8001900 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_TIM_MspPostInit+0x120>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d119      	bne.n	80018c6 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_YAW_1_Pin|PWM_YAW_2_Pin;
 80018aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2302      	movs	r3, #2
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0318 	add.w	r3, r7, #24
 80018bc:	4619      	mov	r1, r3
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <HAL_TIM_MspPostInit+0x124>)
 80018c0:	f001 fbde 	bl	8003080 <HAL_GPIO_Init>
}
 80018c4:	e01c      	b.n	8001900 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM5)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_TIM_MspPostInit+0x128>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d117      	bne.n	8001900 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_TIM_MspPostInit+0x114>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_TIM_MspPostInit+0x118>)
 80018fc:	f001 fbc0 	bl	8003080 <HAL_GPIO_Init>
}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40021000 	.word	0x40021000
 8001910:	40010800 	.word	0x40010800
 8001914:	40000400 	.word	0x40000400
 8001918:	40000800 	.word	0x40000800
 800191c:	40010c00 	.word	0x40010c00
 8001920:	40000c00 	.word	0x40000c00

08001924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0318 	add.w	r3, r7, #24
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a37      	ldr	r2, [pc, #220]	; (8001a1c <HAL_UART_MspInit+0xf8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d132      	bne.n	80019aa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a35      	ldr	r2, [pc, #212]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	4619      	mov	r1, r3
 8001988:	4826      	ldr	r0, [pc, #152]	; (8001a24 <HAL_UART_MspInit+0x100>)
 800198a:	f001 fb79 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800198e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 0318 	add.w	r3, r7, #24
 80019a0:	4619      	mov	r1, r3
 80019a2:	4820      	ldr	r0, [pc, #128]	; (8001a24 <HAL_UART_MspInit+0x100>)
 80019a4:	f001 fb6c 	bl	8003080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a8:	e034      	b.n	8001a14 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_UART_MspInit+0x104>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d12f      	bne.n	8001a14 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 80019ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019be:	61d3      	str	r3, [r2, #28]
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_UART_MspInit+0xfc>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019e4:	2304      	movs	r3, #4
 80019e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <HAL_UART_MspInit+0x100>)
 80019f8:	f001 fb42 	bl	8003080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019fc:	2308      	movs	r3, #8
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0318 	add.w	r3, r7, #24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_UART_MspInit+0x100>)
 8001a10:	f001 fb36 	bl	8003080 <HAL_GPIO_Init>
}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40004400 	.word	0x40004400

08001a2c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_FSMC_MspInit+0x78>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d129      	bne.n	8001a9c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_FSMC_MspInit+0x78>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_FSMC_MspInit+0x7c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_FSMC_MspInit+0x7c>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_FSMC_MspInit+0x7c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a66:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a6a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480c      	ldr	r0, [pc, #48]	; (8001aac <HAL_FSMC_MspInit+0x80>)
 8001a7c:	f001 fb00 	bl	8003080 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a80:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001a84:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	4619      	mov	r1, r3
 8001a94:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <HAL_FSMC_MspInit+0x84>)
 8001a96:	f001 faf3 	bl	8003080 <HAL_GPIO_Init>
 8001a9a:	e000      	b.n	8001a9e <HAL_FSMC_MspInit+0x72>
    return;
 8001a9c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200003e4 	.word	0x200003e4
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40011800 	.word	0x40011800
 8001ab0:	40011400 	.word	0x40011400

08001ab4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001abc:	f7ff ffb6 	bl	8001a2c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 f889 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <DMA1_Channel1_IRQHandler+0x10>)
 8001b1e:	f001 f845 	bl	8002bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000060 	.word	0x20000060

08001b2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <ADC1_2_IRQHandler+0x10>)
 8001b32:	f000 fa7f 	bl	8002034 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000030 	.word	0x20000030

08001b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 8001b4c:	f7ff fff8 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b52:	490c      	ldr	r1, [pc, #48]	; (8001b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b54:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b68:	4c09      	ldr	r4, [pc, #36]	; (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b76:	f004 fa1f 	bl	8005fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7a:	f7fe fd3b 	bl	80005f4 <main>
  bx lr
 8001b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b88:	08006060 	.word	0x08006060
  ldr r2, =_sbss
 8001b8c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b90:	200003ec 	.word	0x200003ec

08001b94 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC3_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_Init+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_Init+0x28>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 fee7 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fbda 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 feff 	bl	80029e6 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 fec7 	bl	8002992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000010 	.word	0x20000010
 8001c20:	2000000c 	.word	0x2000000c

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x1c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_IncTick+0x20>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_IncTick+0x20>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000010 	.word	0x20000010
 8001c44:	200003e8 	.word	0x200003e8

08001c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <HAL_GetTick+0x10>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	200003e8 	.word	0x200003e8

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffe0 	bl	8001c48 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000010 	.word	0x20000010

08001ca4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0ce      	b.n	8001e64 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fb74 	bl	80013d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fbcf 	bl	800248c <ADC_ConversionStop_Disable>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 80a9 	bne.w	8001e52 <HAL_ADC_Init+0x1ae>
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 80a5 	bne.w	8001e52 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d10:	f023 0302 	bic.w	r3, r3, #2
 8001d14:	f043 0202 	orr.w	r2, r3, #2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4951      	ldr	r1, [pc, #324]	; (8001e6c <HAL_ADC_Init+0x1c8>)
 8001d26:	428b      	cmp	r3, r1
 8001d28:	d10a      	bne.n	8001d40 <HAL_ADC_Init+0x9c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d32:	d002      	beq.n	8001d3a <HAL_ADC_Init+0x96>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	e004      	b.n	8001d44 <HAL_ADC_Init+0xa0>
 8001d3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d3e:	e001      	b.n	8001d44 <HAL_ADC_Init+0xa0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7b1b      	ldrb	r3, [r3, #12]
 8001d4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d003      	beq.n	8001d66 <HAL_ADC_Init+0xc2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_ADC_Init+0xc8>
 8001d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6a:	e000      	b.n	8001d6e <HAL_ADC_Init+0xca>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7d1b      	ldrb	r3, [r3, #20]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d119      	bne.n	8001db0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7b1b      	ldrb	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	035a      	lsls	r2, r3, #13
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e00b      	b.n	8001db0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f043 0220 	orr.w	r2, r3, #32
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_ADC_Init+0x1cc>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de0:	d003      	beq.n	8001dea <HAL_ADC_Init+0x146>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d104      	bne.n	8001df4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	051b      	lsls	r3, r3, #20
 8001df2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_ADC_Init+0x1d0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	f043 0201 	orr.w	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e2e:	e018      	b.n	8001e62 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	f023 0312 	bic.w	r3, r3, #18
 8001e38:	f043 0210 	orr.w	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	f043 0201 	orr.w	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e50:	e007      	b.n	8001e62 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40013c00 	.word	0x40013c00
 8001e70:	ffe1f7fd 	.word	0xffe1f7fd
 8001e74:	ff1f0efe 	.word	0xff1f0efe

08001e78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a64      	ldr	r2, [pc, #400]	; (8002020 <HAL_ADC_Start_DMA+0x1a8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d004      	beq.n	8001e9c <HAL_ADC_Start_DMA+0x24>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_ADC_Start_DMA+0x1ac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d106      	bne.n	8001eaa <HAL_ADC_Start_DMA+0x32>
 8001e9c:	4b60      	ldr	r3, [pc, #384]	; (8002020 <HAL_ADC_Start_DMA+0x1a8>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 80b3 	bne.w	8002010 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_Start_DMA+0x40>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e0ae      	b.n	8002016 <HAL_ADC_Start_DMA+0x19e>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fa89 	bl	80023d8 <ADC_Enable>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 809a 	bne.w	8002006 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a4e      	ldr	r2, [pc, #312]	; (8002024 <HAL_ADC_Start_DMA+0x1ac>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d105      	bne.n	8001efc <HAL_ADC_Start_DMA+0x84>
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_ADC_Start_DMA+0x1a8>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d115      	bne.n	8001f28 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d026      	beq.n	8001f64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f26:	e01d      	b.n	8001f64 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a39      	ldr	r2, [pc, #228]	; (8002020 <HAL_ADC_Start_DMA+0x1a8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d004      	beq.n	8001f48 <HAL_ADC_Start_DMA+0xd0>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a38      	ldr	r2, [pc, #224]	; (8002024 <HAL_ADC_Start_DMA+0x1ac>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d10d      	bne.n	8001f64 <HAL_ADC_Start_DMA+0xec>
 8001f48:	4b35      	ldr	r3, [pc, #212]	; (8002020 <HAL_ADC_Start_DMA+0x1a8>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	f023 0206 	bic.w	r2, r3, #6
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <HAL_ADC_Start_DMA+0x1b0>)
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_ADC_Start_DMA+0x1b4>)
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <HAL_ADC_Start_DMA+0x1b8>)
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0202 	mvn.w	r2, #2
 8001fac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fbc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a18      	ldr	r0, [r3, #32]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	334c      	adds	r3, #76	; 0x4c
 8001fc8:	4619      	mov	r1, r3
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f000 fd8d 	bl	8002aec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fdc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fe0:	d108      	bne.n	8001ff4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ff0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ff2:	e00f      	b.n	8002014 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002002:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002004:	e006      	b.n	8002014 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800200e:	e001      	b.n	8002014 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002014:	7dfb      	ldrb	r3, [r7, #23]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40012400 	.word	0x40012400
 8002024:	40012800 	.word	0x40012800
 8002028:	0800250f 	.word	0x0800250f
 800202c:	0800258b 	.word	0x0800258b
 8002030:	080025a7 	.word	0x080025a7

08002034 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d03e      	beq.n	80020d4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d039      	beq.n	80020d4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002082:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002086:	d11d      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208c:	2b00      	cmp	r3, #0
 800208e:	d119      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0220 	bic.w	r2, r2, #32
 800209e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff f89d 	bl	8001204 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0212 	mvn.w	r2, #18
 80020d2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d04d      	beq.n	800217a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d048      	beq.n	800217a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800210a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800210e:	d012      	beq.n	8002136 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800211a:	2b00      	cmp	r3, #0
 800211c:	d125      	bne.n	800216a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002128:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800212c:	d11d      	bne.n	800216a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002132:	2b00      	cmp	r3, #0
 8002134:	d119      	bne.n	800216a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002144:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f043 0201 	orr.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fa35 	bl	80025da <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 020c 	mvn.w	r2, #12
 8002178:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f812 	bl	80021c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0201 	mvn.w	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x20>
 8002204:	2302      	movs	r3, #2
 8002206:	e0dc      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1da>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d81c      	bhi.n	8002252 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b05      	subs	r3, #5
 800222a:	221f      	movs	r2, #31
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b05      	subs	r3, #5
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	635a      	str	r2, [r3, #52]	; 0x34
 8002250:	e03c      	b.n	80022cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d81c      	bhi.n	8002294 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3b23      	subs	r3, #35	; 0x23
 800226c:	221f      	movs	r2, #31
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	4019      	ands	r1, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	3b23      	subs	r3, #35	; 0x23
 8002286:	fa00 f203 	lsl.w	r2, r0, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
 8002292:	e01b      	b.n	80022cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b41      	subs	r3, #65	; 0x41
 80022a6:	221f      	movs	r2, #31
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4019      	ands	r1, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	3b41      	subs	r3, #65	; 0x41
 80022c0:	fa00 f203 	lsl.w	r2, r0, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b09      	cmp	r3, #9
 80022d2:	d91c      	bls.n	800230e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	2207      	movs	r2, #7
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	4019      	ands	r1, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6898      	ldr	r0, [r3, #8]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	3b1e      	subs	r3, #30
 8002300:	fa00 f203 	lsl.w	r2, r0, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	e019      	b.n	8002342 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	4019      	ands	r1, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6898      	ldr	r0, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	fa00 f203 	lsl.w	r2, r0, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b10      	cmp	r3, #16
 8002348:	d003      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800234e:	2b11      	cmp	r3, #17
 8002350:	d132      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d125      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d126      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002378:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d11a      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	0c9a      	lsrs	r2, r3, #18
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002398:	e002      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	3b01      	subs	r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <HAL_ADC_ConfigChannel+0x1b2>
 80023a6:	e007      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40012400 	.word	0x40012400
 80023d0:	20000008 	.word	0x20000008
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d040      	beq.n	8002478 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <ADC_Enable+0xac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <ADC_Enable+0xb0>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0c9b      	lsrs	r3, r3, #18
 8002412:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002414:	e002      	b.n	800241c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3b01      	subs	r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f9      	bne.n	8002416 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002422:	f7ff fc11 	bl	8001c48 <HAL_GetTick>
 8002426:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002428:	e01f      	b.n	800246a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800242a:	f7ff fc0d 	bl	8001c48 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d918      	bls.n	800246a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d011      	beq.n	800246a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e007      	b.n	800247a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d1d8      	bne.n	800242a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008
 8002488:	431bde83 	.word	0x431bde83

0800248c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d12e      	bne.n	8002504 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0201 	bic.w	r2, r2, #1
 80024b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024b6:	f7ff fbc7 	bl	8001c48 <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024bc:	e01b      	b.n	80024f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024be:	f7ff fbc3 	bl	8001c48 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d914      	bls.n	80024f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d10d      	bne.n	80024f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e007      	b.n	8002506 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d0dc      	beq.n	80024be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002524:	2b00      	cmp	r3, #0
 8002526:	d127      	bne.n	8002578 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800253e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002542:	d115      	bne.n	8002570 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002548:	2b00      	cmp	r3, #0
 800254a:	d111      	bne.n	8002570 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7fe fe47 	bl	8001204 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002576:	e004      	b.n	8002582 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fe0a 	bl	80021b2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	f043 0204 	orr.w	r2, r3, #4
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f7ff fe02 	bl	80021d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0ed      	b.n	80027da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d102      	bne.n	8002610 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe ff80 	bl	8001510 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002620:	f7ff fb12 	bl	8001c48 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002626:	e012      	b.n	800264e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002628:	f7ff fb0e 	bl	8001c48 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d90b      	bls.n	800264e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0c5      	b.n	80027da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0e5      	beq.n	8002628 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0202 	bic.w	r2, r2, #2
 800266a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800266c:	f7ff faec 	bl	8001c48 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002672:	e012      	b.n	800269a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002674:	f7ff fae8 	bl	8001c48 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b0a      	cmp	r3, #10
 8002680:	d90b      	bls.n	800269a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2205      	movs	r2, #5
 8002692:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e09f      	b.n	80027da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e5      	bne.n	8002674 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7e1b      	ldrb	r3, [r3, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e007      	b.n	80026d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7e5b      	ldrb	r3, [r3, #25]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e007      	b.n	80026fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7e9b      	ldrb	r3, [r3, #26]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d108      	bne.n	8002716 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0220 	orr.w	r2, r2, #32
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e007      	b.n	8002726 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0220 	bic.w	r2, r2, #32
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7edb      	ldrb	r3, [r3, #27]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d108      	bne.n	8002740 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0210 	bic.w	r2, r2, #16
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e007      	b.n	8002750 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0210 	orr.w	r2, r2, #16
 800274e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7f1b      	ldrb	r3, [r3, #28]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d108      	bne.n	800276a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0208 	orr.w	r2, r2, #8
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e007      	b.n	800277a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0208 	bic.w	r2, r2, #8
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7f5b      	ldrb	r3, [r3, #29]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d108      	bne.n	8002794 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0204 	orr.w	r2, r2, #4
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e007      	b.n	80027a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0204 	bic.w	r2, r2, #4
 80027a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	ea42 0103 	orr.w	r1, r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4906      	ldr	r1, [pc, #24]	; (800287c <__NVIC_EnableIRQ+0x34>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f1c3 0307 	rsb	r3, r3, #7
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	bf28      	it	cs
 80028f2:	2304      	movcs	r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <NVIC_EncodePriority+0x30>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b03      	subs	r3, #3
 8002902:	e000      	b.n	8002906 <NVIC_EncodePriority+0x32>
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	401a      	ands	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43d9      	mvns	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	4313      	orrs	r3, r2
         );
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f7ff ff90 	bl	8002880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff2d 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a4:	f7ff ff42 	bl	800282c <__NVIC_GetPriorityGrouping>
 80029a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	6978      	ldr	r0, [r7, #20]
 80029b0:	f7ff ff90 	bl	80028d4 <NVIC_EncodePriority>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff5f 	bl	8002880 <__NVIC_SetPriority>
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff35 	bl	8002848 <__NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ffa2 	bl	8002938 <SysTick_Config>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e059      	b.n	8002aca <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_DMA_Init+0xd4>)
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d80f      	bhi.n	8002a42 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_DMA_Init+0xd8>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <HAL_DMA_Init+0xdc>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	009a      	lsls	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_DMA_Init+0xe0>)
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a40:	e00e      	b.n	8002a60 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_DMA_Init+0xe4>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a23      	ldr	r2, [pc, #140]	; (8002adc <HAL_DMA_Init+0xdc>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	009a      	lsls	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_Init+0xe8>)
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40020407 	.word	0x40020407
 8002ad8:	bffdfff8 	.word	0xbffdfff8
 8002adc:	cccccccd 	.word	0xcccccccd
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	bffdfbf8 	.word	0xbffdfbf8
 8002ae8:	40020400 	.word	0x40020400

08002aec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_DMA_Start_IT+0x20>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e04b      	b.n	8002ba4 <HAL_DMA_Start_IT+0xb8>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d13a      	bne.n	8002b96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fa6d 	bl	8003024 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 020e 	orr.w	r2, r2, #14
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e00f      	b.n	8002b84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0204 	bic.w	r2, r2, #4
 8002b72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 020a 	orr.w	r2, r2, #10
 8002b82:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e005      	b.n	8002ba2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	2204      	movs	r2, #4
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80f1 	beq.w	8002db8 <HAL_DMA_IRQHandler+0x20c>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80eb 	beq.w	8002db8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0204 	bic.w	r2, r2, #4
 8002bfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_DMA_IRQHandler+0x1d8>)
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d958      	bls.n	8002cbe <HAL_DMA_IRQHandler+0x112>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a5d      	ldr	r2, [pc, #372]	; (8002d88 <HAL_DMA_IRQHandler+0x1dc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04f      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x10a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a5c      	ldr	r2, [pc, #368]	; (8002d8c <HAL_DMA_IRQHandler+0x1e0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d048      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x106>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a5a      	ldr	r2, [pc, #360]	; (8002d90 <HAL_DMA_IRQHandler+0x1e4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d040      	beq.n	8002cac <HAL_DMA_IRQHandler+0x100>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a59      	ldr	r2, [pc, #356]	; (8002d94 <HAL_DMA_IRQHandler+0x1e8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d038      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xfa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a57      	ldr	r2, [pc, #348]	; (8002d98 <HAL_DMA_IRQHandler+0x1ec>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d030      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xf4>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a56      	ldr	r2, [pc, #344]	; (8002d9c <HAL_DMA_IRQHandler+0x1f0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d028      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xee>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_DMA_IRQHandler+0x1d8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d020      	beq.n	8002c94 <HAL_DMA_IRQHandler+0xe8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a52      	ldr	r2, [pc, #328]	; (8002da0 <HAL_DMA_IRQHandler+0x1f4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d019      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xe4>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_DMA_IRQHandler+0x1f8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d012      	beq.n	8002c8c <HAL_DMA_IRQHandler+0xe0>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a4f      	ldr	r2, [pc, #316]	; (8002da8 <HAL_DMA_IRQHandler+0x1fc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00a      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xda>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a4d      	ldr	r2, [pc, #308]	; (8002dac <HAL_DMA_IRQHandler+0x200>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d102      	bne.n	8002c80 <HAL_DMA_IRQHandler+0xd4>
 8002c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c7e:	e01b      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c84:	e018      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8a:	e015      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002c8c:	2340      	movs	r3, #64	; 0x40
 8002c8e:	e013      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002c90:	2304      	movs	r3, #4
 8002c92:	e011      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002c94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c98:	e00e      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c9e:	e00b      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002ca0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ca4:	e008      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002caa:	e005      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb0:	e002      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002cb2:	2340      	movs	r3, #64	; 0x40
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	4a3d      	ldr	r2, [pc, #244]	; (8002db0 <HAL_DMA_IRQHandler+0x204>)
 8002cba:	6053      	str	r3, [r2, #4]
 8002cbc:	e057      	b.n	8002d6e <HAL_DMA_IRQHandler+0x1c2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <HAL_DMA_IRQHandler+0x1dc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d04f      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x1bc>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2f      	ldr	r2, [pc, #188]	; (8002d8c <HAL_DMA_IRQHandler+0x1e0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d048      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x1b8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2e      	ldr	r2, [pc, #184]	; (8002d90 <HAL_DMA_IRQHandler+0x1e4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d040      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x1b2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	; (8002d94 <HAL_DMA_IRQHandler+0x1e8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d038      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x1ac>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <HAL_DMA_IRQHandler+0x1ec>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d030      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x1a6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <HAL_DMA_IRQHandler+0x1f0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d028      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x1a0>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <HAL_DMA_IRQHandler+0x1d8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d020      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x19a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <HAL_DMA_IRQHandler+0x1f4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d019      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x196>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <HAL_DMA_IRQHandler+0x1f8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d012      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x192>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_DMA_IRQHandler+0x1fc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00a      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x18c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_DMA_IRQHandler+0x200>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d102      	bne.n	8002d32 <HAL_DMA_IRQHandler+0x186>
 8002d2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d30:	e01b      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d36:	e018      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3c:	e015      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	e013      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e011      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d4a:	e00e      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d50:	e00b      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d56:	e008      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d5c:	e005      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d62:	e002      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d64:	2340      	movs	r3, #64	; 0x40
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1be>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_DMA_IRQHandler+0x208>)
 8002d6c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8136 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d80:	e130      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x438>
 8002d82:	bf00      	nop
 8002d84:	40020080 	.word	0x40020080
 8002d88:	40020008 	.word	0x40020008
 8002d8c:	4002001c 	.word	0x4002001c
 8002d90:	40020030 	.word	0x40020030
 8002d94:	40020044 	.word	0x40020044
 8002d98:	40020058 	.word	0x40020058
 8002d9c:	4002006c 	.word	0x4002006c
 8002da0:	40020408 	.word	0x40020408
 8002da4:	4002041c 	.word	0x4002041c
 8002da8:	40020430 	.word	0x40020430
 8002dac:	40020444 	.word	0x40020444
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80dd 	beq.w	8002f84 <HAL_DMA_IRQHandler+0x3d8>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80d7 	beq.w	8002f84 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 020a 	bic.w	r2, r2, #10
 8002df2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_DMA_IRQHandler+0x444>)
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d958      	bls.n	8002eba <HAL_DMA_IRQHandler+0x30e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a79      	ldr	r2, [pc, #484]	; (8002ff4 <HAL_DMA_IRQHandler+0x448>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d04f      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x306>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a78      	ldr	r2, [pc, #480]	; (8002ff8 <HAL_DMA_IRQHandler+0x44c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d048      	beq.n	8002eae <HAL_DMA_IRQHandler+0x302>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a76      	ldr	r2, [pc, #472]	; (8002ffc <HAL_DMA_IRQHandler+0x450>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d040      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x2fc>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a75      	ldr	r2, [pc, #468]	; (8003000 <HAL_DMA_IRQHandler+0x454>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d038      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2f6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a73      	ldr	r2, [pc, #460]	; (8003004 <HAL_DMA_IRQHandler+0x458>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d030      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x2f0>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a72      	ldr	r2, [pc, #456]	; (8003008 <HAL_DMA_IRQHandler+0x45c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d028      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x2ea>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a69      	ldr	r2, [pc, #420]	; (8002ff0 <HAL_DMA_IRQHandler+0x444>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d020      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2e4>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6e      	ldr	r2, [pc, #440]	; (800300c <HAL_DMA_IRQHandler+0x460>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d019      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x2e0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6c      	ldr	r2, [pc, #432]	; (8003010 <HAL_DMA_IRQHandler+0x464>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d012      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x2dc>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6b      	ldr	r2, [pc, #428]	; (8003014 <HAL_DMA_IRQHandler+0x468>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00a      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x2d6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a69      	ldr	r2, [pc, #420]	; (8003018 <HAL_DMA_IRQHandler+0x46c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d102      	bne.n	8002e7c <HAL_DMA_IRQHandler+0x2d0>
 8002e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e7a:	e01b      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e80:	e018      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e86:	e015      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002e88:	2320      	movs	r3, #32
 8002e8a:	e013      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e011      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e94:	e00e      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002e96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e9a:	e00b      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea0:	e008      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ea6:	e005      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eac:	e002      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e000      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x308>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	4a59      	ldr	r2, [pc, #356]	; (800301c <HAL_DMA_IRQHandler+0x470>)
 8002eb6:	6053      	str	r3, [r2, #4]
 8002eb8:	e057      	b.n	8002f6a <HAL_DMA_IRQHandler+0x3be>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a4d      	ldr	r2, [pc, #308]	; (8002ff4 <HAL_DMA_IRQHandler+0x448>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d04f      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x3b8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a4b      	ldr	r2, [pc, #300]	; (8002ff8 <HAL_DMA_IRQHandler+0x44c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d048      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x3b4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a4a      	ldr	r2, [pc, #296]	; (8002ffc <HAL_DMA_IRQHandler+0x450>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d040      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x3ae>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a48      	ldr	r2, [pc, #288]	; (8003000 <HAL_DMA_IRQHandler+0x454>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d038      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x3a8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a47      	ldr	r2, [pc, #284]	; (8003004 <HAL_DMA_IRQHandler+0x458>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d030      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x3a2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a45      	ldr	r2, [pc, #276]	; (8003008 <HAL_DMA_IRQHandler+0x45c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d028      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x39c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <HAL_DMA_IRQHandler+0x444>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d020      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x396>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a41      	ldr	r2, [pc, #260]	; (800300c <HAL_DMA_IRQHandler+0x460>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d019      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x392>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a40      	ldr	r2, [pc, #256]	; (8003010 <HAL_DMA_IRQHandler+0x464>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d012      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x38e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a3e      	ldr	r2, [pc, #248]	; (8003014 <HAL_DMA_IRQHandler+0x468>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00a      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x388>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a3d      	ldr	r2, [pc, #244]	; (8003018 <HAL_DMA_IRQHandler+0x46c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d102      	bne.n	8002f2e <HAL_DMA_IRQHandler+0x382>
 8002f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f2c:	e01b      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f32:	e018      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f38:	e015      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e013      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e011      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f46:	e00e      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f4c:	e00b      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f52:	e008      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f58:	e005      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f5e:	e002      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f60:	2320      	movs	r3, #32
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_IRQHandler+0x3ba>
 8002f64:	2302      	movs	r3, #2
 8002f66:	4a2e      	ldr	r2, [pc, #184]	; (8003020 <HAL_DMA_IRQHandler+0x474>)
 8002f68:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d034      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f82:	e02f      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2208      	movs	r2, #8
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d028      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x43a>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d023      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 020e 	bic.w	r2, r2, #14
 8002fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
    }
  }
  return;
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
}
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40020080 	.word	0x40020080
 8002ff4:	40020008 	.word	0x40020008
 8002ff8:	4002001c 	.word	0x4002001c
 8002ffc:	40020030 	.word	0x40020030
 8003000:	40020044 	.word	0x40020044
 8003004:	40020058 	.word	0x40020058
 8003008:	4002006c 	.word	0x4002006c
 800300c:	40020408 	.word	0x40020408
 8003010:	4002041c 	.word	0x4002041c
 8003014:	40020430 	.word	0x40020430
 8003018:	40020444 	.word	0x40020444
 800301c:	40020400 	.word	0x40020400
 8003020:	40020000 	.word	0x40020000

08003024 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d108      	bne.n	8003064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003062:	e007      	b.n	8003074 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003080:	b480      	push	{r7}
 8003082:	b08b      	sub	sp, #44	; 0x2c
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003092:	e179      	b.n	8003388 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003094:	2201      	movs	r2, #1
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f040 8168 	bne.w	8003382 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a96      	ldr	r2, [pc, #600]	; (8003310 <HAL_GPIO_Init+0x290>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030bc:	4a94      	ldr	r2, [pc, #592]	; (8003310 <HAL_GPIO_Init+0x290>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d875      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030c2:	4a94      	ldr	r2, [pc, #592]	; (8003314 <HAL_GPIO_Init+0x294>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d058      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030c8:	4a92      	ldr	r2, [pc, #584]	; (8003314 <HAL_GPIO_Init+0x294>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d86f      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030ce:	4a92      	ldr	r2, [pc, #584]	; (8003318 <HAL_GPIO_Init+0x298>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d052      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030d4:	4a90      	ldr	r2, [pc, #576]	; (8003318 <HAL_GPIO_Init+0x298>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d869      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030da:	4a90      	ldr	r2, [pc, #576]	; (800331c <HAL_GPIO_Init+0x29c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d04c      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030e0:	4a8e      	ldr	r2, [pc, #568]	; (800331c <HAL_GPIO_Init+0x29c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d863      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030e6:	4a8e      	ldr	r2, [pc, #568]	; (8003320 <HAL_GPIO_Init+0x2a0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d046      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030ec:	4a8c      	ldr	r2, [pc, #560]	; (8003320 <HAL_GPIO_Init+0x2a0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d85d      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030f2:	2b12      	cmp	r3, #18
 80030f4:	d82a      	bhi.n	800314c <HAL_GPIO_Init+0xcc>
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d859      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <HAL_GPIO_Init+0x80>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	0800317b 	.word	0x0800317b
 8003104:	08003155 	.word	0x08003155
 8003108:	08003167 	.word	0x08003167
 800310c:	080031a9 	.word	0x080031a9
 8003110:	080031af 	.word	0x080031af
 8003114:	080031af 	.word	0x080031af
 8003118:	080031af 	.word	0x080031af
 800311c:	080031af 	.word	0x080031af
 8003120:	080031af 	.word	0x080031af
 8003124:	080031af 	.word	0x080031af
 8003128:	080031af 	.word	0x080031af
 800312c:	080031af 	.word	0x080031af
 8003130:	080031af 	.word	0x080031af
 8003134:	080031af 	.word	0x080031af
 8003138:	080031af 	.word	0x080031af
 800313c:	080031af 	.word	0x080031af
 8003140:	080031af 	.word	0x080031af
 8003144:	0800315d 	.word	0x0800315d
 8003148:	08003171 	.word	0x08003171
 800314c:	4a75      	ldr	r2, [pc, #468]	; (8003324 <HAL_GPIO_Init+0x2a4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003152:	e02c      	b.n	80031ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	623b      	str	r3, [r7, #32]
          break;
 800315a:	e029      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	3304      	adds	r3, #4
 8003162:	623b      	str	r3, [r7, #32]
          break;
 8003164:	e024      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	3308      	adds	r3, #8
 800316c:	623b      	str	r3, [r7, #32]
          break;
 800316e:	e01f      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	330c      	adds	r3, #12
 8003176:	623b      	str	r3, [r7, #32]
          break;
 8003178:	e01a      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003182:	2304      	movs	r3, #4
 8003184:	623b      	str	r3, [r7, #32]
          break;
 8003186:	e013      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003190:	2308      	movs	r3, #8
 8003192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	611a      	str	r2, [r3, #16]
          break;
 800319a:	e009      	b.n	80031b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800319c:	2308      	movs	r3, #8
 800319e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	615a      	str	r2, [r3, #20]
          break;
 80031a6:	e003      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
          break;
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          break;
 80031ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	d801      	bhi.n	80031ba <HAL_GPIO_Init+0x13a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	e001      	b.n	80031be <HAL_GPIO_Init+0x13e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d802      	bhi.n	80031cc <HAL_GPIO_Init+0x14c>
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	e002      	b.n	80031d2 <HAL_GPIO_Init+0x152>
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	3b08      	subs	r3, #8
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	210f      	movs	r1, #15
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	6a39      	ldr	r1, [r7, #32]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80c1 	beq.w	8003382 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003200:	4b49      	ldr	r3, [pc, #292]	; (8003328 <HAL_GPIO_Init+0x2a8>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	4a48      	ldr	r2, [pc, #288]	; (8003328 <HAL_GPIO_Init+0x2a8>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6193      	str	r3, [r2, #24]
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_GPIO_Init+0x2a8>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003218:	4a44      	ldr	r2, [pc, #272]	; (800332c <HAL_GPIO_Init+0x2ac>)
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <HAL_GPIO_Init+0x2b0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01f      	beq.n	8003284 <HAL_GPIO_Init+0x204>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <HAL_GPIO_Init+0x2b4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d019      	beq.n	8003280 <HAL_GPIO_Init+0x200>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3a      	ldr	r2, [pc, #232]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_GPIO_Init+0x1fc>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a39      	ldr	r2, [pc, #228]	; (800333c <HAL_GPIO_Init+0x2bc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00d      	beq.n	8003278 <HAL_GPIO_Init+0x1f8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_GPIO_Init+0x2c0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <HAL_GPIO_Init+0x1f4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a37      	ldr	r2, [pc, #220]	; (8003344 <HAL_GPIO_Init+0x2c4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d101      	bne.n	8003270 <HAL_GPIO_Init+0x1f0>
 800326c:	2305      	movs	r3, #5
 800326e:	e00a      	b.n	8003286 <HAL_GPIO_Init+0x206>
 8003270:	2306      	movs	r3, #6
 8003272:	e008      	b.n	8003286 <HAL_GPIO_Init+0x206>
 8003274:	2304      	movs	r3, #4
 8003276:	e006      	b.n	8003286 <HAL_GPIO_Init+0x206>
 8003278:	2303      	movs	r3, #3
 800327a:	e004      	b.n	8003286 <HAL_GPIO_Init+0x206>
 800327c:	2302      	movs	r3, #2
 800327e:	e002      	b.n	8003286 <HAL_GPIO_Init+0x206>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_GPIO_Init+0x206>
 8003284:	2300      	movs	r3, #0
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	f002 0203 	and.w	r2, r2, #3
 800328c:	0092      	lsls	r2, r2, #2
 800328e:	4093      	lsls	r3, r2
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003296:	4925      	ldr	r1, [pc, #148]	; (800332c <HAL_GPIO_Init+0x2ac>)
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4924      	ldr	r1, [pc, #144]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]
 80032bc:	e006      	b.n	80032cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	4920      	ldr	r1, [pc, #128]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d006      	beq.n	80032e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	491a      	ldr	r1, [pc, #104]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4916      	ldr	r1, [pc, #88]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d025      	beq.n	800334c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	4910      	ldr	r1, [pc, #64]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
 800330c:	e025      	b.n	800335a <HAL_GPIO_Init+0x2da>
 800330e:	bf00      	nop
 8003310:	10320000 	.word	0x10320000
 8003314:	10310000 	.word	0x10310000
 8003318:	10220000 	.word	0x10220000
 800331c:	10210000 	.word	0x10210000
 8003320:	10120000 	.word	0x10120000
 8003324:	10110000 	.word	0x10110000
 8003328:	40021000 	.word	0x40021000
 800332c:	40010000 	.word	0x40010000
 8003330:	40010800 	.word	0x40010800
 8003334:	40010c00 	.word	0x40010c00
 8003338:	40011000 	.word	0x40011000
 800333c:	40011400 	.word	0x40011400
 8003340:	40011800 	.word	0x40011800
 8003344:	40011c00 	.word	0x40011c00
 8003348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_GPIO_Init+0x324>)
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	43db      	mvns	r3, r3
 8003354:	4913      	ldr	r1, [pc, #76]	; (80033a4 <HAL_GPIO_Init+0x324>)
 8003356:	4013      	ands	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_GPIO_Init+0x324>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	490e      	ldr	r1, [pc, #56]	; (80033a4 <HAL_GPIO_Init+0x324>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
 8003372:	e006      	b.n	8003382 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_GPIO_Init+0x324>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	43db      	mvns	r3, r3
 800337c:	4909      	ldr	r1, [pc, #36]	; (80033a4 <HAL_GPIO_Init+0x324>)
 800337e:	4013      	ands	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	3301      	adds	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f47f ae7e 	bne.w	8003094 <HAL_GPIO_Init+0x14>
  }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	372c      	adds	r7, #44	; 0x2c
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e12b      	b.n	8003642 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe f8d2 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800342a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800343a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800343c:	f000 fce6 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8003440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4a81      	ldr	r2, [pc, #516]	; (800364c <HAL_I2C_Init+0x274>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d807      	bhi.n	800345c <HAL_I2C_Init+0x84>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a80      	ldr	r2, [pc, #512]	; (8003650 <HAL_I2C_Init+0x278>)
 8003450:	4293      	cmp	r3, r2
 8003452:	bf94      	ite	ls
 8003454:	2301      	movls	r3, #1
 8003456:	2300      	movhi	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e006      	b.n	800346a <HAL_I2C_Init+0x92>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a7d      	ldr	r2, [pc, #500]	; (8003654 <HAL_I2C_Init+0x27c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	bf94      	ite	ls
 8003464:	2301      	movls	r3, #1
 8003466:	2300      	movhi	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0e7      	b.n	8003642 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a78      	ldr	r2, [pc, #480]	; (8003658 <HAL_I2C_Init+0x280>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	0c9b      	lsrs	r3, r3, #18
 800347c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a6a      	ldr	r2, [pc, #424]	; (800364c <HAL_I2C_Init+0x274>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d802      	bhi.n	80034ac <HAL_I2C_Init+0xd4>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3301      	adds	r3, #1
 80034aa:	e009      	b.n	80034c0 <HAL_I2C_Init+0xe8>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	4a69      	ldr	r2, [pc, #420]	; (800365c <HAL_I2C_Init+0x284>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	3301      	adds	r3, #1
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	495c      	ldr	r1, [pc, #368]	; (800364c <HAL_I2C_Init+0x274>)
 80034dc:	428b      	cmp	r3, r1
 80034de:	d819      	bhi.n	8003514 <HAL_I2C_Init+0x13c>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e59      	subs	r1, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ee:	1c59      	adds	r1, r3, #1
 80034f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034f4:	400b      	ands	r3, r1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_I2C_Init+0x138>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1e59      	subs	r1, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fbb1 f3f3 	udiv	r3, r1, r3
 8003508:	3301      	adds	r3, #1
 800350a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350e:	e051      	b.n	80035b4 <HAL_I2C_Init+0x1dc>
 8003510:	2304      	movs	r3, #4
 8003512:	e04f      	b.n	80035b4 <HAL_I2C_Init+0x1dc>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d111      	bne.n	8003540 <HAL_I2C_Init+0x168>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1e58      	subs	r0, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	440b      	add	r3, r1
 800352a:	fbb0 f3f3 	udiv	r3, r0, r3
 800352e:	3301      	adds	r3, #1
 8003530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e012      	b.n	8003566 <HAL_I2C_Init+0x18e>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e58      	subs	r0, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	0099      	lsls	r1, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	fbb0 f3f3 	udiv	r3, r0, r3
 8003556:	3301      	adds	r3, #1
 8003558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Init+0x196>
 800356a:	2301      	movs	r3, #1
 800356c:	e022      	b.n	80035b4 <HAL_I2C_Init+0x1dc>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10e      	bne.n	8003594 <HAL_I2C_Init+0x1bc>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1e58      	subs	r0, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	440b      	add	r3, r1
 8003584:	fbb0 f3f3 	udiv	r3, r0, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	e00f      	b.n	80035b4 <HAL_I2C_Init+0x1dc>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1e58      	subs	r0, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	0099      	lsls	r1, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035aa:	3301      	adds	r3, #1
 80035ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	6809      	ldr	r1, [r1, #0]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6911      	ldr	r1, [r2, #16]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68d2      	ldr	r2, [r2, #12]
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	000186a0 	.word	0x000186a0
 8003650:	001e847f 	.word	0x001e847f
 8003654:	003d08ff 	.word	0x003d08ff
 8003658:	431bde83 	.word	0x431bde83
 800365c:	10624dd3 	.word	0x10624dd3

08003660 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	420e0020 	.word	0x420e0020

08003678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e272      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8087 	beq.w	80037a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003698:	4b92      	ldr	r3, [pc, #584]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d00c      	beq.n	80036be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a4:	4b8f      	ldr	r3, [pc, #572]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d112      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5e>
 80036b0:	4b8c      	ldr	r3, [pc, #560]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d10b      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036be:	4b89      	ldr	r3, [pc, #548]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d06c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x12c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d168      	bne.n	80037a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e24c      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x76>
 80036e0:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a7f      	ldr	r2, [pc, #508]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e02e      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x98>
 80036f6:	4b7b      	ldr	r3, [pc, #492]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7a      	ldr	r2, [pc, #488]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b78      	ldr	r3, [pc, #480]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a77      	ldr	r2, [pc, #476]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e01d      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0xbc>
 800371a:	4b72      	ldr	r3, [pc, #456]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a71      	ldr	r2, [pc, #452]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6e      	ldr	r2, [pc, #440]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 8003734:	4b6b      	ldr	r3, [pc, #428]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6a      	ldr	r2, [pc, #424]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a67      	ldr	r2, [pc, #412]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fe fa78 	bl	8001c48 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800375c:	f7fe fa74 	bl	8001c48 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e200      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0xe4>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe fa64 	bl	8001c48 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe fa60 	bl	8001c48 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e1ec      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x10c>
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d063      	beq.n	800387a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037b2:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037be:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d11c      	bne.n	8003804 <HAL_RCC_OscConfig+0x18c>
 80037ca:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d116      	bne.n	8003804 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_RCC_OscConfig+0x176>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d001      	beq.n	80037ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e1c0      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4939      	ldr	r1, [pc, #228]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003802:	e03a      	b.n	800387a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fa19 	bl	8001c48 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fe fa15 	bl	8001c48 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e1a1      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4927      	ldr	r1, [pc, #156]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
 800384c:	e015      	b.n	800387a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe f9f8 	bl	8001c48 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385c:	f7fe f9f4 	bl	8001c48 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e180      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03a      	beq.n	80038fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d019      	beq.n	80038c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <HAL_RCC_OscConfig+0x274>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7fe f9d8 	bl	8001c48 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389c:	f7fe f9d4 	bl	8001c48 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e160      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ba:	2001      	movs	r0, #1
 80038bc:	f000 face 	bl	8003e5c <RCC_Delay>
 80038c0:	e01c      	b.n	80038fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_RCC_OscConfig+0x274>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fe f9be 	bl	8001c48 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ce:	e00f      	b.n	80038f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fe f9ba 	bl	8001c48 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d908      	bls.n	80038f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e146      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	42420000 	.word	0x42420000
 80038ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b92      	ldr	r3, [pc, #584]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e9      	bne.n	80038d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a6 	beq.w	8003a56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4a87      	ldr	r2, [pc, #540]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	61d3      	str	r3, [r2, #28]
 8003926:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d118      	bne.n	8003974 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003942:	4b7f      	ldr	r3, [pc, #508]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7e      	ldr	r2, [pc, #504]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394e:	f7fe f97b 	bl	8001c48 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003956:	f7fe f977 	bl	8001c48 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	; 0x64
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e103      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d106      	bne.n	800398a <HAL_RCC_OscConfig+0x312>
 800397c:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6213      	str	r3, [r2, #32]
 8003988:	e02d      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x334>
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	6213      	str	r3, [r2, #32]
 800399e:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a66      	ldr	r2, [pc, #408]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	6213      	str	r3, [r2, #32]
 80039aa:	e01c      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d10c      	bne.n	80039ce <HAL_RCC_OscConfig+0x356>
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4a60      	ldr	r2, [pc, #384]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	6213      	str	r3, [r2, #32]
 80039c0:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4a5d      	ldr	r2, [pc, #372]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6213      	str	r3, [r2, #32]
 80039cc:	e00b      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 80039ce:	4b5b      	ldr	r3, [pc, #364]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a5a      	ldr	r2, [pc, #360]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	4b58      	ldr	r3, [pc, #352]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a57      	ldr	r2, [pc, #348]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d015      	beq.n	8003a1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7fe f92b 	bl	8001c48 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fe f927 	bl	8001c48 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0b1      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ee      	beq.n	80039f6 <HAL_RCC_OscConfig+0x37e>
 8003a18:	e014      	b.n	8003a44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1a:	f7fe f915 	bl	8001c48 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a22:	f7fe f911 	bl	8001c48 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e09b      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ee      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	4a3b      	ldr	r2, [pc, #236]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8087 	beq.w	8003b6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a60:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d061      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d146      	bne.n	8003b02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a74:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fe f8e5 	bl	8001c48 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7fe f8e1 	bl	8001c48 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e06d      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a94:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d108      	bne.n	8003abc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4921      	ldr	r1, [pc, #132]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003abc:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a19      	ldr	r1, [r3, #32]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	430b      	orrs	r3, r1
 8003ace:	491b      	ldr	r1, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fe f8b5 	bl	8001c48 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fe f8b1 	bl	8001c48 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e03d      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x46a>
 8003b00:	e035      	b.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fe f89e 	bl	8001c48 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe f89a 	bl	8001c48 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e026      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x498>
 8003b2e:	e01e      	b.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e019      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
 8003b44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x500>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0d0      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	4965      	ldr	r1, [pc, #404]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0b8      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003be2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	494d      	ldr	r1, [pc, #308]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d040      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d115      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e07f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e073      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e06b      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4936      	ldr	r1, [pc, #216]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fd ffec 	bl	8001c48 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7fd ffe8 	bl	8001c48 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e053      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 020c 	and.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1eb      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d210      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 0207 	bic.w	r2, r3, #7
 8003cb2:	4922      	ldr	r1, [pc, #136]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e032      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4916      	ldr	r1, [pc, #88]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d0a:	f000 f821 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	490a      	ldr	r1, [pc, #40]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	5ccb      	ldrb	r3, [r1, r3]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1cc>)
 8003d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1d0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd ff4a 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08006018 	.word	0x08006018
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	2000000c 	.word	0x2000000c

08003d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d002      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x30>
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x36>
 8003d7e:	e027      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d82:	613b      	str	r3, [r7, #16]
      break;
 8003d84:	e027      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0c9b      	lsrs	r3, r3, #18
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	4a17      	ldr	r2, [pc, #92]	; (8003dec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d90:	5cd3      	ldrb	r3, [r2, r3]
 8003d92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d010      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0c5b      	lsrs	r3, r3, #17
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003db2:	fb03 f202 	mul.w	r2, r3, r2
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e004      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	613b      	str	r3, [r7, #16]
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dd2:	613b      	str	r3, [r7, #16]
      break;
 8003dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd6:	693b      	ldr	r3, [r7, #16]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	007a1200 	.word	0x007a1200
 8003dec:	08006030 	.word	0x08006030
 8003df0:	08006040 	.word	0x08006040
 8003df4:	003d0900 	.word	0x003d0900

08003df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	20000008 	.word	0x20000008

08003e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e10:	f7ff fff2 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	4903      	ldr	r1, [pc, #12]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e22:	5ccb      	ldrb	r3, [r1, r3]
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	08006028 	.word	0x08006028

08003e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e38:	f7ff ffde 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0adb      	lsrs	r3, r3, #11
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08006028 	.word	0x08006028

08003e5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <RCC_Delay+0x34>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <RCC_Delay+0x38>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0a5b      	lsrs	r3, r3, #9
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e78:	bf00      	nop
  }
  while (Delay --);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1e5a      	subs	r2, r3, #1
 8003e7e:	60fa      	str	r2, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f9      	bne.n	8003e78 <RCC_Delay+0x1c>
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	20000008 	.word	0x20000008
 8003e94:	10624dd3 	.word	0x10624dd3

08003e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d07d      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb8:	4b4f      	ldr	r3, [pc, #316]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec4:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	4a4b      	ldr	r2, [pc, #300]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ece:	61d3      	str	r3, [r2, #28]
 8003ed0:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d118      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eec:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a42      	ldr	r2, [pc, #264]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef8:	f7fd fea6 	bl	8001c48 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	e008      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f00:	f7fd fea2 	bl	8001c48 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e06d      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f1e:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02e      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d027      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f46:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f52:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d014      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fd fe71 	bl	8001c48 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fd fe6d 	bl	8001c48 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e036      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ee      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4917      	ldr	r1, [pc, #92]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa4:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	490b      	ldr	r1, [pc, #44]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	42420440 	.word	0x42420440

08004004 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	2b0f      	cmp	r3, #15
 8004026:	f200 80af 	bhi.w	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004107 	.word	0x08004107
 8004034:	0800416d 	.word	0x0800416d
 8004038:	08004189 	.word	0x08004189
 800403c:	080040f7 	.word	0x080040f7
 8004040:	08004189 	.word	0x08004189
 8004044:	08004189 	.word	0x08004189
 8004048:	08004189 	.word	0x08004189
 800404c:	080040ff 	.word	0x080040ff
 8004050:	08004189 	.word	0x08004189
 8004054:	08004189 	.word	0x08004189
 8004058:	08004189 	.word	0x08004189
 800405c:	08004189 	.word	0x08004189
 8004060:	08004189 	.word	0x08004189
 8004064:	08004189 	.word	0x08004189
 8004068:	08004189 	.word	0x08004189
 800406c:	08004071 	.word	0x08004071
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004070:	4b4a      	ldr	r3, [pc, #296]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004076:	4b49      	ldr	r3, [pc, #292]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8084 	beq.w	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	0c9b      	lsrs	r3, r3, #18
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	4a44      	ldr	r2, [pc, #272]	; (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800408e:	5cd3      	ldrb	r3, [r2, r3]
 8004090:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800409c:	4b3f      	ldr	r3, [pc, #252]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	0c5b      	lsrs	r3, r3, #17
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	4a3f      	ldr	r2, [pc, #252]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
 80040aa:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80040b6:	4a3c      	ldr	r2, [pc, #240]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	e004      	b.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80040cc:	fb02 f303 	mul.w	r3, r2, r3
 80040d0:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80040d2:	4b32      	ldr	r3, [pc, #200]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040de:	d102      	bne.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80040e4:	e052      	b.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	61bb      	str	r3, [r7, #24]
      break;
 80040f4:	e04a      	b.n	800418c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80040f6:	f7ff fe2b 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 80040fa:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80040fc:	e049      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80040fe:	f7ff fe27 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8004102:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004104:	e045      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004106:	4b25      	ldr	r3, [pc, #148]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d108      	bne.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8004122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e01f      	b.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d109      	bne.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004136:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8004142:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e00f      	b.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004154:	d11c      	bne.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d016      	beq.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8004162:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004166:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004168:	e012      	b.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800416a:	e011      	b.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800416c:	f7ff fe62 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	0b9b      	lsrs	r3, r3, #14
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	3301      	adds	r3, #1
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	61bb      	str	r3, [r7, #24]
      break;
 8004186:	e004      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004190:	bf00      	nop
    }
  }
  return (frequency);
 8004192:	69bb      	ldr	r3, [r7, #24]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3720      	adds	r7, #32
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40021000 	.word	0x40021000
 80041a0:	08006044 	.word	0x08006044
 80041a4:	08006054 	.word	0x08006054
 80041a8:	007a1200 	.word	0x007a1200
 80041ac:	003d0900 	.word	0x003d0900
 80041b0:	aaaaaaab 	.word	0xaaaaaaab

080041b4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e07a      	b.n	80042c0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7c5b      	ldrb	r3, [r3, #17]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fd fa22 	bl	8001624 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fb2f 	bl	800484a <HAL_RTC_WaitForSynchro>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2204      	movs	r2, #4
 80041f6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e061      	b.n	80042c0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fbe8 	bl	80049d2 <RTC_EnterInitMode>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e056      	b.n	80042c0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0207 	bic.w	r2, r2, #7
 8004220:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800422a:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <HAL_RTC_Init+0x114>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <HAL_RTC_Init+0x114>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004236:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_RTC_Init+0x114>)
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4921      	ldr	r1, [pc, #132]	; (80042c8 <HAL_RTC_Init+0x114>)
 8004244:	4313      	orrs	r3, r2
 8004246:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d003      	beq.n	800425a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e00e      	b.n	8004278 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800425a:	2001      	movs	r0, #1
 800425c:	f7ff fed2 	bl	8004004 <HAL_RCCEx_GetPeriphCLKFreq>
 8004260:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2204      	movs	r2, #4
 800426c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e026      	b.n	80042c0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b01      	subs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	0c1a      	lsrs	r2, r3, #16
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f002 020f 	and.w	r2, r2, #15
 8004284:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	b292      	uxth	r2, r2
 800428e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fbc6 	bl	8004a22 <RTC_ExitInitMode>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2204      	movs	r2, #4
 80042a0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e00c      	b.n	80042c0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80042be:	2300      	movs	r3, #0
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40006c00 	.word	0x40006c00

080042cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_RTC_SetTime+0x20>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e080      	b.n	80043f2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	7c1b      	ldrb	r3, [r3, #16]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_RTC_SetTime+0x30>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e07a      	b.n	80043f2 <HAL_RTC_SetTime+0x126>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2202      	movs	r2, #2
 8004306:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d113      	bne.n	8004336 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004318:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	4619      	mov	r1, r3
 8004322:	460b      	mov	r3, r1
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a5b      	subs	r3, r3, r1
 8004328:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800432a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004330:	4413      	add	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e01e      	b.n	8004374 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fbb6 	bl	8004aac <RTC_Bcd2ToByte>
 8004340:	4603      	mov	r3, r0
 8004342:	461a      	mov	r2, r3
 8004344:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004348:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	785b      	ldrb	r3, [r3, #1]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fbab 	bl	8004aac <RTC_Bcd2ToByte>
 8004356:	4603      	mov	r3, r0
 8004358:	461a      	mov	r2, r3
 800435a:	4613      	mov	r3, r2
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004362:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	789b      	ldrb	r3, [r3, #2]
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fb9f 	bl	8004aac <RTC_Bcd2ToByte>
 800436e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004370:	4423      	add	r3, r4
 8004372:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fac4 	bl	8004904 <RTC_WriteTimeCounter>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2204      	movs	r2, #4
 8004386:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e02f      	b.n	80043f2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0205 	bic.w	r2, r2, #5
 80043a0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fad5 	bl	8004952 <RTC_ReadAlarmCounter>
 80043a8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d018      	beq.n	80043e4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d214      	bcs.n	80043e4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80043c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80043c4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043c6:	6939      	ldr	r1, [r7, #16]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fadb 	bl	8004984 <RTC_WriteAlarmCounter>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2204      	movs	r2, #4
 80043d8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e006      	b.n	80043f2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd90      	pop	{r4, r7, pc}
	...

080043fc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_RTC_GetTime+0x28>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b5      	b.n	8004594 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e0ac      	b.n	8004594 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fa32 	bl	80048a4 <RTC_ReadTimeCounter>
 8004440:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4a55      	ldr	r2, [pc, #340]	; (800459c <HAL_RTC_GetTime+0x1a0>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0adb      	lsrs	r3, r3, #11
 800444c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4b52      	ldr	r3, [pc, #328]	; (800459c <HAL_RTC_GetTime+0x1a0>)
 8004452:	fba3 1302 	umull	r1, r3, r3, r2
 8004456:	0adb      	lsrs	r3, r3, #11
 8004458:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	4a4f      	ldr	r2, [pc, #316]	; (80045a0 <HAL_RTC_GetTime+0x1a4>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4a4a      	ldr	r2, [pc, #296]	; (800459c <HAL_RTC_GetTime+0x1a0>)
 8004474:	fba2 1203 	umull	r1, r2, r2, r3
 8004478:	0ad2      	lsrs	r2, r2, #11
 800447a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800447e:	fb01 f202 	mul.w	r2, r1, r2
 8004482:	1a9a      	subs	r2, r3, r2
 8004484:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <HAL_RTC_GetTime+0x1a4>)
 8004486:	fba3 1302 	umull	r1, r3, r3, r2
 800448a:	0959      	lsrs	r1, r3, #5
 800448c:	460b      	mov	r3, r1
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a5b      	subs	r3, r3, r1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	1ad1      	subs	r1, r2, r3
 8004496:	b2ca      	uxtb	r2, r1
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b17      	cmp	r3, #23
 80044a0:	d955      	bls.n	800454e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4a3f      	ldr	r2, [pc, #252]	; (80045a4 <HAL_RTC_GetTime+0x1a8>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80044ae:	6939      	ldr	r1, [r7, #16]
 80044b0:	4b3c      	ldr	r3, [pc, #240]	; (80045a4 <HAL_RTC_GetTime+0x1a8>)
 80044b2:	fba3 2301 	umull	r2, r3, r3, r1
 80044b6:	091a      	lsrs	r2, r3, #4
 80044b8:	4613      	mov	r3, r2
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	1aca      	subs	r2, r1, r3
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fa42 	bl	8004952 <RTC_ReadAlarmCounter>
 80044ce:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d008      	beq.n	80044ea <HAL_RTC_GetTime+0xee>
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d904      	bls.n	80044ea <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e002      	b.n	80044f0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295
 80044ee:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4a2d      	ldr	r2, [pc, #180]	; (80045a8 <HAL_RTC_GetTime+0x1ac>)
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80044fe:	69b9      	ldr	r1, [r7, #24]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f9ff 	bl	8004904 <RTC_WriteTimeCounter>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e041      	b.n	8004594 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d00c      	beq.n	8004532 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	4413      	add	r3, r2
 800451e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004520:	69f9      	ldr	r1, [r7, #28]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fa2e 	bl	8004984 <RTC_WriteAlarmCounter>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e030      	b.n	8004594 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004532:	69f9      	ldr	r1, [r7, #28]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fa25 	bl	8004984 <RTC_WriteAlarmCounter>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e027      	b.n	8004594 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004544:	6979      	ldr	r1, [r7, #20]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 facd 	bl	8004ae6 <RTC_DateUpdate>
 800454c:	e003      	b.n	8004556 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fa86 	bl	8004a72 <RTC_ByteToBcd2>
 8004566:	4603      	mov	r3, r0
 8004568:	461a      	mov	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fa7d 	bl	8004a72 <RTC_ByteToBcd2>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	789b      	ldrb	r3, [r3, #2]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fa74 	bl	8004a72 <RTC_ByteToBcd2>
 800458a:	4603      	mov	r3, r0
 800458c:	461a      	mov	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3720      	adds	r7, #32
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	91a2b3c5 	.word	0x91a2b3c5
 80045a0:	88888889 	.word	0x88888889
 80045a4:	aaaaaaab 	.word	0xaaaaaaab
 80045a8:	00015180 	.word	0x00015180

080045ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RTC_SetDate+0x24>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e097      	b.n	8004704 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	7c1b      	ldrb	r3, [r3, #16]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_RTC_SetDate+0x34>
 80045dc:	2302      	movs	r3, #2
 80045de:	e091      	b.n	8004704 <HAL_RTC_SetDate+0x158>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2202      	movs	r2, #2
 80045ea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	78da      	ldrb	r2, [r3, #3]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	785a      	ldrb	r2, [r3, #1]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	789a      	ldrb	r2, [r3, #2]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	739a      	strb	r2, [r3, #14]
 800460a:	e01a      	b.n	8004642 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	78db      	ldrb	r3, [r3, #3]
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fa4b 	bl	8004aac <RTC_Bcd2ToByte>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fa42 	bl	8004aac <RTC_Bcd2ToByte>
 8004628:	4603      	mov	r3, r0
 800462a:	461a      	mov	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	789b      	ldrb	r3, [r3, #2]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fa39 	bl	8004aac <RTC_Bcd2ToByte>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	7bdb      	ldrb	r3, [r3, #15]
 8004646:	4618      	mov	r0, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	7b59      	ldrb	r1, [r3, #13]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	7b9b      	ldrb	r3, [r3, #14]
 8004650:	461a      	mov	r2, r3
 8004652:	f000 fb23 	bl	8004c9c <RTC_WeekDayNum>
 8004656:	4603      	mov	r3, r0
 8004658:	461a      	mov	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	7b1a      	ldrb	r2, [r3, #12]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f91c 	bl	80048a4 <RTC_ReadTimeCounter>
 800466c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4a26      	ldr	r2, [pc, #152]	; (800470c <HAL_RTC_SetDate+0x160>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	0adb      	lsrs	r3, r3, #11
 8004678:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b18      	cmp	r3, #24
 800467e:	d93a      	bls.n	80046f6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_RTC_SetDate+0x164>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_RTC_SetDate+0x168>)
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004696:	69f9      	ldr	r1, [r7, #28]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f933 	bl	8004904 <RTC_WriteTimeCounter>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2204      	movs	r2, #4
 80046a8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e027      	b.n	8004704 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f94c 	bl	8004952 <RTC_ReadAlarmCounter>
 80046ba:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d018      	beq.n	80046f6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d214      	bcs.n	80046f6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80046d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046d6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046d8:	69b9      	ldr	r1, [r7, #24]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f952 	bl	8004984 <RTC_WriteAlarmCounter>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2204      	movs	r2, #4
 80046ea:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e006      	b.n	8004704 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	91a2b3c5 	.word	0x91a2b3c5
 8004710:	aaaaaaab 	.word	0xaaaaaaab
 8004714:	00015180 	.word	0x00015180

08004718 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	2100      	movs	r1, #0
 800472e:	460a      	mov	r2, r1
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	460a      	mov	r2, r1
 8004734:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_RTC_SetAlarm+0x2a>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07d      	b.n	8004842 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	7c1b      	ldrb	r3, [r3, #16]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_RTC_SetAlarm+0x3a>
 800474e:	2302      	movs	r3, #2
 8004750:	e077      	b.n	8004842 <HAL_RTC_SetAlarm+0x12a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2202      	movs	r2, #2
 800475c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	2200      	movs	r2, #0
 8004764:	4619      	mov	r1, r3
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fe48 	bl	80043fc <HAL_RTC_GetTime>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e065      	b.n	8004842 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004776:	7d3b      	ldrb	r3, [r7, #20]
 8004778:	461a      	mov	r2, r3
 800477a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800477e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004782:	7d7b      	ldrb	r3, [r7, #21]
 8004784:	4619      	mov	r1, r3
 8004786:	460b      	mov	r3, r1
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a5b      	subs	r3, r3, r1
 800478c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800478e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004790:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004792:	4413      	add	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d113      	bne.n	80047c4 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80047a6:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	4619      	mov	r1, r3
 80047b0:	460b      	mov	r3, r1
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	1a5b      	subs	r3, r3, r1
 80047b6:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80047b8:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80047be:	4413      	add	r3, r2
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e01e      	b.n	8004802 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f96f 	bl	8004aac <RTC_Bcd2ToByte>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80047d6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	785b      	ldrb	r3, [r3, #1]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f964 	bl	8004aac <RTC_Bcd2ToByte>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80047f0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	789b      	ldrb	r3, [r3, #2]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f958 	bl	8004aac <RTC_Bcd2ToByte>
 80047fc:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80047fe:	4423      	add	r3, r4
 8004800:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	429a      	cmp	r2, r3
 8004808:	d205      	bcs.n	8004816 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004810:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004814:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004816:	69f9      	ldr	r1, [r7, #28]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f8b3 	bl	8004984 <RTC_WriteAlarmCounter>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2204      	movs	r2, #4
 8004828:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e006      	b.n	8004842 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3724      	adds	r7, #36	; 0x24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd90      	pop	{r4, r7, pc}

0800484a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e01d      	b.n	800489c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0208 	bic.w	r2, r2, #8
 800486e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004870:	f7fd f9ea 	bl	8001c48 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004876:	e009      	b.n	800488c <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004878:	f7fd f9e6 	bl	8001c48 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004886:	d901      	bls.n	800488c <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e007      	b.n	800489c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ee      	beq.n	8004878 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	827b      	strh	r3, [r7, #18]
 80048b0:	2300      	movs	r3, #0
 80048b2:	823b      	strh	r3, [r7, #16]
 80048b4:	2300      	movs	r3, #0
 80048b6:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80048d4:	8a7a      	ldrh	r2, [r7, #18]
 80048d6:	8a3b      	ldrh	r3, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d008      	beq.n	80048ee <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80048dc:	8a3b      	ldrh	r3, [r7, #16]
 80048de:	041a      	lsls	r2, r3, #16
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e004      	b.n	80048f8 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80048ee:	8a7b      	ldrh	r3, [r7, #18]
 80048f0:	041a      	lsls	r2, r3, #16
 80048f2:	89fb      	ldrh	r3, [r7, #14]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80048f8:	697b      	ldr	r3, [r7, #20]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f85d 	bl	80049d2 <RTC_EnterInitMode>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
 8004922:	e011      	b.n	8004948 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	0c12      	lsrs	r2, r2, #16
 800492c:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	b292      	uxth	r2, r2
 8004936:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f872 	bl	8004a22 <RTC_ExitInitMode>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	81fb      	strh	r3, [r7, #14]
 800495e:	2300      	movs	r3, #0
 8004960:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004972:	89fb      	ldrh	r3, [r7, #14]
 8004974:	041a      	lsls	r2, r3, #16
 8004976:	89bb      	ldrh	r3, [r7, #12]
 8004978:	4313      	orrs	r3, r2
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f81d 	bl	80049d2 <RTC_EnterInitMode>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	e011      	b.n	80049c8 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	0c12      	lsrs	r2, r2, #16
 80049ac:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	b292      	uxth	r2, r2
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f832 	bl	8004a22 <RTC_ExitInitMode>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80049de:	f7fd f933 	bl	8001c48 <HAL_GetTick>
 80049e2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049e4:	e009      	b.n	80049fa <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049e6:	f7fd f92f 	bl	8001c48 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049f4:	d901      	bls.n	80049fa <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e00f      	b.n	8004a1a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0ee      	beq.n	80049e6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0210 	orr.w	r2, r2, #16
 8004a16:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0210 	bic.w	r2, r2, #16
 8004a3c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a3e:	f7fd f903 	bl	8001c48 <HAL_GetTick>
 8004a42:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a44:	e009      	b.n	8004a5a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a46:	f7fd f8ff 	bl	8001c48 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a54:	d901      	bls.n	8004a5a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e007      	b.n	8004a6a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0ee      	beq.n	8004a46 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	4603      	mov	r3, r0
 8004a7a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004a80:	e005      	b.n	8004a8e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	3b0a      	subs	r3, #10
 8004a8c:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	2b09      	cmp	r3, #9
 8004a92:	d8f6      	bhi.n	8004a82 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	b2db      	uxtb	r3, r3
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	b2db      	uxtb	r3, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b086      	sub	sp, #24
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	7bdb      	ldrb	r3, [r3, #15]
 8004b04:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	7b5b      	ldrb	r3, [r3, #13]
 8004b0a:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	7b9b      	ldrb	r3, [r3, #14]
 8004b10:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	e06f      	b.n	8004bf8 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d011      	beq.n	8004b42 <RTC_DateUpdate+0x5c>
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d00e      	beq.n	8004b42 <RTC_DateUpdate+0x5c>
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d00b      	beq.n	8004b42 <RTC_DateUpdate+0x5c>
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b07      	cmp	r3, #7
 8004b2e:	d008      	beq.n	8004b42 <RTC_DateUpdate+0x5c>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d005      	beq.n	8004b42 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b0a      	cmp	r3, #10
 8004b3a:	d002      	beq.n	8004b42 <RTC_DateUpdate+0x5c>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d117      	bne.n	8004b72 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b1e      	cmp	r3, #30
 8004b46:	d803      	bhi.n	8004b50 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004b4e:	e050      	b.n	8004bf2 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d005      	beq.n	8004b62 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004b60:	e047      	b.n	8004bf2 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004b62:	2301      	movs	r3, #1
 8004b64:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b66:	2301      	movs	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
          year++;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004b70:	e03f      	b.n	8004bf2 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d008      	beq.n	8004b8a <RTC_DateUpdate+0xa4>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d005      	beq.n	8004b8a <RTC_DateUpdate+0xa4>
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b09      	cmp	r3, #9
 8004b82:	d002      	beq.n	8004b8a <RTC_DateUpdate+0xa4>
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b0b      	cmp	r3, #11
 8004b88:	d10c      	bne.n	8004ba4 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b1d      	cmp	r3, #29
 8004b8e:	d803      	bhi.n	8004b98 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b96:	e02c      	b.n	8004bf2 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004ba2:	e026      	b.n	8004bf2 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d123      	bne.n	8004bf2 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b1b      	cmp	r3, #27
 8004bae:	d803      	bhi.n	8004bb8 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e01c      	b.n	8004bf2 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b1c      	cmp	r3, #28
 8004bbc:	d111      	bne.n	8004be2 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f838 	bl	8004c38 <RTC_IsLeapYear>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e00d      	b.n	8004bf2 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e007      	b.n	8004bf2 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b1d      	cmp	r3, #29
 8004be6:	d104      	bne.n	8004bf2 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3301      	adds	r3, #1
 8004bec:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d38b      	bcc.n	8004b18 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f000 f83a 	bl	8004c9c <RTC_WeekDayNum>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	731a      	strb	r2, [r3, #12]
}
 8004c30:	bf00      	nop
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e01d      	b.n	8004c8e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <RTC_IsLeapYear+0x60>)
 8004c56:	fba2 1203 	umull	r1, r2, r2, r3
 8004c5a:	0952      	lsrs	r2, r2, #5
 8004c5c:	2164      	movs	r1, #100	; 0x64
 8004c5e:	fb01 f202 	mul.w	r2, r1, r2
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e00f      	b.n	8004c8e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <RTC_IsLeapYear+0x60>)
 8004c72:	fba2 1203 	umull	r1, r2, r2, r3
 8004c76:	09d2      	lsrs	r2, r2, #7
 8004c78:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004c7c:	fb01 f202 	mul.w	r2, r1, r2
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004c8c:	2300      	movs	r3, #0
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	51eb851f 	.word	0x51eb851f

08004c9c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004cba:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d82d      	bhi.n	8004d1e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	4a2c      	ldr	r2, [pc, #176]	; (8004d80 <RTC_WeekDayNum+0xe4>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	085a      	lsrs	r2, r3, #1
 8004cd6:	78bb      	ldrb	r3, [r7, #2]
 8004cd8:	441a      	add	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	441a      	add	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4926      	ldr	r1, [pc, #152]	; (8004d84 <RTC_WeekDayNum+0xe8>)
 8004cec:	fba1 1303 	umull	r1, r3, r1, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4922      	ldr	r1, [pc, #136]	; (8004d84 <RTC_WeekDayNum+0xe8>)
 8004cfa:	fba1 1303 	umull	r1, r3, r1, r3
 8004cfe:	09db      	lsrs	r3, r3, #7
 8004d00:	4413      	add	r3, r2
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <RTC_WeekDayNum+0xec>)
 8004d06:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0a:	1ad1      	subs	r1, r2, r3
 8004d0c:	0849      	lsrs	r1, r1, #1
 8004d0e:	440b      	add	r3, r1
 8004d10:	0899      	lsrs	r1, r3, #2
 8004d12:	460b      	mov	r3, r1
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a5b      	subs	r3, r3, r1
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e029      	b.n	8004d72 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	4613      	mov	r3, r2
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <RTC_WeekDayNum+0xe4>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	085a      	lsrs	r2, r3, #1
 8004d32:	78bb      	ldrb	r3, [r7, #2]
 8004d34:	441a      	add	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	441a      	add	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	441a      	add	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4910      	ldr	r1, [pc, #64]	; (8004d84 <RTC_WeekDayNum+0xe8>)
 8004d44:	fba1 1303 	umull	r1, r3, r1, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	490d      	ldr	r1, [pc, #52]	; (8004d84 <RTC_WeekDayNum+0xe8>)
 8004d50:	fba1 1303 	umull	r1, r3, r1, r3
 8004d54:	09db      	lsrs	r3, r3, #7
 8004d56:	4413      	add	r3, r2
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <RTC_WeekDayNum+0xec>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	1ad1      	subs	r1, r2, r3
 8004d62:	0849      	lsrs	r1, r1, #1
 8004d64:	440b      	add	r3, r1
 8004d66:	0899      	lsrs	r1, r3, #2
 8004d68:	460b      	mov	r3, r1
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	1a5b      	subs	r3, r3, r1
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	b2db      	uxtb	r3, r3
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	38e38e39 	.word	0x38e38e39
 8004d84:	51eb851f 	.word	0x51eb851f
 8004d88:	24924925 	.word	0x24924925

08004d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e076      	b.n	8004e8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dae:	d009      	beq.n	8004dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	61da      	str	r2, [r3, #28]
 8004db6:	e005      	b.n	8004dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc fc44 	bl	800166c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	ea42 0103 	orr.w	r1, r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	0c1a      	lsrs	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f002 0204 	and.w	r2, r2, #4
 8004e6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d004      	beq.n	8004eb0 <HAL_SRAM_Init+0x1c>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d101      	bne.n	8004eb4 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e038      	b.n	8004f26 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7fc fdf3 	bl	8001ab4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f000 ff8f 	bl	8005dfc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	f000 fff1 	bl	8005ed0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6858      	ldr	r0, [r3, #4]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	f001 f81c 	bl	8005f38 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	6892      	ldr	r2, [r2, #8]
 8004f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	6892      	ldr	r2, [r2, #8]
 8004f14:	f041 0101 	orr.w	r1, r1, #1
 8004f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e041      	b.n	8004fc4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7fc fbe3 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 fac9 	bl	8005504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e041      	b.n	8005062 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f839 	bl	800506a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 fa7a 	bl	8005504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_TIM_PWM_Start+0x24>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e022      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d109      	bne.n	80050ba <HAL_TIM_PWM_Start+0x3e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	e015      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d109      	bne.n	80050d4 <HAL_TIM_PWM_Start+0x58>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e008      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e072      	b.n	80051d4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0x82>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fc:	e013      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0x92>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800510c:	e00b      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start+0xa2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511c:	e003      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2201      	movs	r2, #1
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fca4 	bl	8005a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a28      	ldr	r2, [pc, #160]	; (80051dc <HAL_TIM_PWM_Start+0x160>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIM_PWM_Start+0xcc>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a27      	ldr	r2, [pc, #156]	; (80051e0 <HAL_TIM_PWM_Start+0x164>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d101      	bne.n	800514c <HAL_TIM_PWM_Start+0xd0>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <HAL_TIM_PWM_Start+0xd2>
 800514c:	2300      	movs	r3, #0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005160:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <HAL_TIM_PWM_Start+0x160>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d018      	beq.n	800519e <HAL_TIM_PWM_Start+0x122>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <HAL_TIM_PWM_Start+0x164>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_TIM_PWM_Start+0x122>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d00e      	beq.n	800519e <HAL_TIM_PWM_Start+0x122>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_TIM_PWM_Start+0x168>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_TIM_PWM_Start+0x122>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <HAL_TIM_PWM_Start+0x16c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_TIM_PWM_Start+0x122>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a14      	ldr	r2, [pc, #80]	; (80051ec <HAL_TIM_PWM_Start+0x170>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d111      	bne.n	80051c2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d010      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	e007      	b.n	80051d2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00

080051f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800520a:	2302      	movs	r3, #2
 800520c:	e0ae      	b.n	800536c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b0c      	cmp	r3, #12
 800521a:	f200 809f 	bhi.w	800535c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005259 	.word	0x08005259
 8005228:	0800535d 	.word	0x0800535d
 800522c:	0800535d 	.word	0x0800535d
 8005230:	0800535d 	.word	0x0800535d
 8005234:	08005299 	.word	0x08005299
 8005238:	0800535d 	.word	0x0800535d
 800523c:	0800535d 	.word	0x0800535d
 8005240:	0800535d 	.word	0x0800535d
 8005244:	080052db 	.word	0x080052db
 8005248:	0800535d 	.word	0x0800535d
 800524c:	0800535d 	.word	0x0800535d
 8005250:	0800535d 	.word	0x0800535d
 8005254:	0800531b 	.word	0x0800531b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f9ca 	bl	80055f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0208 	orr.w	r2, r2, #8
 8005272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0204 	bic.w	r2, r2, #4
 8005282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6999      	ldr	r1, [r3, #24]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	619a      	str	r2, [r3, #24]
      break;
 8005296:	e064      	b.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fa1a 	bl	80056d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6999      	ldr	r1, [r3, #24]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	021a      	lsls	r2, r3, #8
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	619a      	str	r2, [r3, #24]
      break;
 80052d8:	e043      	b.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fa6d 	bl	80057c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0208 	orr.w	r2, r2, #8
 80052f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0204 	bic.w	r2, r2, #4
 8005304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69d9      	ldr	r1, [r3, #28]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	61da      	str	r2, [r3, #28]
      break;
 8005318:	e023      	b.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fac1 	bl	80058a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69d9      	ldr	r1, [r3, #28]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	021a      	lsls	r2, r3, #8
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	61da      	str	r2, [r3, #28]
      break;
 800535a:	e002      	b.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	75fb      	strb	r3, [r7, #23]
      break;
 8005360:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536a:	7dfb      	ldrb	r3, [r7, #23]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIM_ConfigClockSource+0x1c>
 800538c:	2302      	movs	r3, #2
 800538e:	e0b4      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x186>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c8:	d03e      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0xd4>
 80053ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ce:	f200 8087 	bhi.w	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d6:	f000 8086 	beq.w	80054e6 <HAL_TIM_ConfigClockSource+0x172>
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d87f      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e0:	2b70      	cmp	r3, #112	; 0x70
 80053e2:	d01a      	beq.n	800541a <HAL_TIM_ConfigClockSource+0xa6>
 80053e4:	2b70      	cmp	r3, #112	; 0x70
 80053e6:	d87b      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e8:	2b60      	cmp	r3, #96	; 0x60
 80053ea:	d050      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x11a>
 80053ec:	2b60      	cmp	r3, #96	; 0x60
 80053ee:	d877      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f0:	2b50      	cmp	r3, #80	; 0x50
 80053f2:	d03c      	beq.n	800546e <HAL_TIM_ConfigClockSource+0xfa>
 80053f4:	2b50      	cmp	r3, #80	; 0x50
 80053f6:	d873      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d058      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x13a>
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d86f      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b30      	cmp	r3, #48	; 0x30
 8005402:	d064      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x15a>
 8005404:	2b30      	cmp	r3, #48	; 0x30
 8005406:	d86b      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b20      	cmp	r3, #32
 800540a:	d060      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x15a>
 800540c:	2b20      	cmp	r3, #32
 800540e:	d867      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d05c      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x15a>
 8005414:	2b10      	cmp	r3, #16
 8005416:	d05a      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x15a>
 8005418:	e062      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800542a:	f000 fb08 	bl	8005a3e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800543c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	609a      	str	r2, [r3, #8]
      break;
 8005446:	e04f      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005458:	f000 faf1 	bl	8005a3e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546a:	609a      	str	r2, [r3, #8]
      break;
 800546c:	e03c      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fa68 	bl	8005950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2150      	movs	r1, #80	; 0x50
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fabf 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 800548c:	e02c      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fa86 	bl	80059ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2160      	movs	r1, #96	; 0x60
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 faaf 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 80054ac:	e01c      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 fa48 	bl	8005950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2140      	movs	r1, #64	; 0x40
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa9f 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 80054cc:	e00c      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f000 fa96 	bl	8005a0a <TIM_ITRx_SetConfig>
      break;
 80054de:	e003      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
      break;
 80054e4:	e000      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <TIM_Base_SetConfig+0xe0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a32      	ldr	r2, [pc, #200]	; (80055e8 <TIM_Base_SetConfig+0xe4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00f      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d00b      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a2f      	ldr	r2, [pc, #188]	; (80055ec <TIM_Base_SetConfig+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a2e      	ldr	r2, [pc, #184]	; (80055f0 <TIM_Base_SetConfig+0xec>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <TIM_Base_SetConfig+0xf0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d108      	bne.n	8005556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <TIM_Base_SetConfig+0xe0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x82>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <TIM_Base_SetConfig+0xe4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x82>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x82>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a1e      	ldr	r2, [pc, #120]	; (80055ec <TIM_Base_SetConfig+0xe8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x82>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <TIM_Base_SetConfig+0xec>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x82>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <TIM_Base_SetConfig+0xf0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <TIM_Base_SetConfig+0xe0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_Base_SetConfig+0xc8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <TIM_Base_SetConfig+0xe4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d103      	bne.n	80055d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	615a      	str	r2, [r3, #20]
}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00

080055f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f023 0201 	bic.w	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 0302 	bic.w	r3, r3, #2
 8005640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a20      	ldr	r2, [pc, #128]	; (80056d0 <TIM_OC1_SetConfig+0xd8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <TIM_OC1_SetConfig+0x64>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <TIM_OC1_SetConfig+0xdc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d10c      	bne.n	8005676 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 0308 	bic.w	r3, r3, #8
 8005662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <TIM_OC1_SetConfig+0xd8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_OC1_SetConfig+0x8e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <TIM_OC1_SetConfig+0xdc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d111      	bne.n	80056aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800568c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40013400 	.word	0x40013400

080056d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	f023 0210 	bic.w	r2, r3, #16
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0320 	bic.w	r3, r3, #32
 8005722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <TIM_OC2_SetConfig+0xe0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_OC2_SetConfig+0x68>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a20      	ldr	r2, [pc, #128]	; (80057bc <TIM_OC2_SetConfig+0xe4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10d      	bne.n	800575c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a16      	ldr	r2, [pc, #88]	; (80057b8 <TIM_OC2_SetConfig+0xe0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC2_SetConfig+0x94>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a15      	ldr	r2, [pc, #84]	; (80057bc <TIM_OC2_SetConfig+0xe4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d113      	bne.n	8005794 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800577a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400

080057c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a21      	ldr	r2, [pc, #132]	; (80058a0 <TIM_OC3_SetConfig+0xe0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_OC3_SetConfig+0x66>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a20      	ldr	r2, [pc, #128]	; (80058a4 <TIM_OC3_SetConfig+0xe4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10d      	bne.n	8005842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800582c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <TIM_OC3_SetConfig+0xe0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_OC3_SetConfig+0x92>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <TIM_OC3_SetConfig+0xe4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d113      	bne.n	800587a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40013400 	.word	0x40013400

080058a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a11      	ldr	r2, [pc, #68]	; (8005948 <TIM_OC4_SetConfig+0xa0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC4_SetConfig+0x68>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a10      	ldr	r2, [pc, #64]	; (800594c <TIM_OC4_SetConfig+0xa4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d109      	bne.n	8005924 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40013400 	.word	0x40013400

08005950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 030a 	bic.w	r3, r3, #10
 800598c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0210 	bic.w	r2, r3, #16
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	031b      	lsls	r3, r3, #12
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	621a      	str	r2, [r3, #32]
}
 8005a00:	bf00      	nop
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f043 0307 	orr.w	r3, r3, #7
 8005a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr

08005a3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b087      	sub	sp, #28
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	021a      	lsls	r2, r3, #8
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	609a      	str	r2, [r3, #8]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2201      	movs	r2, #1
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1a      	ldr	r2, [r3, #32]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1a      	ldr	r2, [r3, #32]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e050      	b.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1b      	ldr	r2, [pc, #108]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b32:	d00e      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a12      	ldr	r2, [pc, #72]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10c      	bne.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00

08005b9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e03d      	b.n	8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e042      	b.n	8005cd6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d106      	bne.n	8005c6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fb fe5d 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2224      	movs	r2, #36	; 0x24
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f82c 	bl	8005ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d1a:	f023 030c 	bic.w	r3, r3, #12
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2c      	ldr	r2, [pc, #176]	; (8005df4 <UART_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d103      	bne.n	8005d50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fe f874 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	e002      	b.n	8005d56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d50:	f7fe f85c 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8005d54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009a      	lsls	r2, r3, #2
 8005d60:	441a      	add	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <UART_SetConfig+0x118>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	0119      	lsls	r1, r3, #4
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009a      	lsls	r2, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d8c:	4b1a      	ldr	r3, [pc, #104]	; (8005df8 <UART_SetConfig+0x118>)
 8005d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	2064      	movs	r0, #100	; 0x64
 8005d96:	fb00 f303 	mul.w	r3, r0, r3
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	3332      	adds	r3, #50	; 0x32
 8005da0:	4a15      	ldr	r2, [pc, #84]	; (8005df8 <UART_SetConfig+0x118>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dac:	4419      	add	r1, r3
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009a      	lsls	r2, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <UART_SetConfig+0x118>)
 8005dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	2064      	movs	r0, #100	; 0x64
 8005dce:	fb00 f303 	mul.w	r3, r0, r3
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	3332      	adds	r3, #50	; 0x32
 8005dd8:	4a07      	ldr	r2, [pc, #28]	; (8005df8 <UART_SetConfig+0x118>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	440a      	add	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005dec:	bf00      	nop
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40013800 	.word	0x40013800
 8005df8:	51eb851f 	.word	0x51eb851f

08005dfc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	f023 0101 	bic.w	r1, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d102      	bne.n	8005e2c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005e26:	2340      	movs	r3, #64	; 0x40
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e001      	b.n	8005e30 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005e3c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005e42:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005e48:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005e4e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005e54:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005e5a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005e60:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005e66:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005e6c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <FSMC_NORSRAM_Init+0xd0>)
 8005e8c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e94:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005e9c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	ea02 0103 	and.w	r1, r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4319      	orrs	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	0008fb7f 	.word	0x0008fb7f

08005ed0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	041b      	lsls	r3, r3, #16
 8005f04:	431a      	orrs	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	051b      	lsls	r3, r3, #20
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	3b02      	subs	r3, #2
 8005f16:	061b      	lsls	r3, r3, #24
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	3201      	adds	r2, #1
 8005f24:	4319      	orrs	r1, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f4c:	d11d      	bne.n	8005f8a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f56:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	6852      	ldr	r2, [r2, #4]
 8005f62:	0112      	lsls	r2, r2, #4
 8005f64:	4311      	orrs	r1, r2
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	6892      	ldr	r2, [r2, #8]
 8005f6a:	0212      	lsls	r2, r2, #8
 8005f6c:	4311      	orrs	r1, r2
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	6992      	ldr	r2, [r2, #24]
 8005f72:	4311      	orrs	r1, r2
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	68d2      	ldr	r2, [r2, #12]
 8005f78:	0412      	lsls	r2, r2, #16
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	ea43 0102 	orr.w	r1, r3, r2
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005f88:	e005      	b.n	8005f96 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	cff00000 	.word	0xcff00000

08005fa8 <memset>:
 8005fa8:	4603      	mov	r3, r0
 8005faa:	4402      	add	r2, r0
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d100      	bne.n	8005fb2 <memset+0xa>
 8005fb0:	4770      	bx	lr
 8005fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb6:	e7f9      	b.n	8005fac <memset+0x4>

08005fb8 <__libc_init_array>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	2600      	movs	r6, #0
 8005fbc:	4d0c      	ldr	r5, [pc, #48]	; (8005ff0 <__libc_init_array+0x38>)
 8005fbe:	4c0d      	ldr	r4, [pc, #52]	; (8005ff4 <__libc_init_array+0x3c>)
 8005fc0:	1b64      	subs	r4, r4, r5
 8005fc2:	10a4      	asrs	r4, r4, #2
 8005fc4:	42a6      	cmp	r6, r4
 8005fc6:	d109      	bne.n	8005fdc <__libc_init_array+0x24>
 8005fc8:	f000 f81a 	bl	8006000 <_init>
 8005fcc:	2600      	movs	r6, #0
 8005fce:	4d0a      	ldr	r5, [pc, #40]	; (8005ff8 <__libc_init_array+0x40>)
 8005fd0:	4c0a      	ldr	r4, [pc, #40]	; (8005ffc <__libc_init_array+0x44>)
 8005fd2:	1b64      	subs	r4, r4, r5
 8005fd4:	10a4      	asrs	r4, r4, #2
 8005fd6:	42a6      	cmp	r6, r4
 8005fd8:	d105      	bne.n	8005fe6 <__libc_init_array+0x2e>
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe0:	4798      	blx	r3
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7ee      	b.n	8005fc4 <__libc_init_array+0xc>
 8005fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fea:	4798      	blx	r3
 8005fec:	3601      	adds	r6, #1
 8005fee:	e7f2      	b.n	8005fd6 <__libc_init_array+0x1e>
 8005ff0:	08006058 	.word	0x08006058
 8005ff4:	08006058 	.word	0x08006058
 8005ff8:	08006058 	.word	0x08006058
 8005ffc:	0800605c 	.word	0x0800605c

08006000 <_init>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr

0800600c <_fini>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	bf00      	nop
 8006010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006012:	bc08      	pop	{r3}
 8006014:	469e      	mov	lr, r3
 8006016:	4770      	bx	lr
