
3300 project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d8  080068d8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080068d8  080068d8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068d8  080068d8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080068e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000001c  080068fc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080068fc  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a69  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000334a  00000000  00000000  00037af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  0003ae40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000125a  00000000  00000000  0003c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003373  00000000  00000000  0003d7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c686  00000000  00000000  00040b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6ea4  00000000  00000000  0005d1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000641c  00000000  00000000  00104090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0010a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	00000000 	.word	0x00000000
 8000204:	08006880 	.word	0x08006880

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000020 	.word	0x20000020
 8000220:	08006880 	.word	0x08006880

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2iz>:
 80005a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30f      	bcc.n	80005d2 <__aeabi_f2iz+0x2a>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d90d      	bls.n	80005d8 <__aeabi_f2iz+0x30>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005c8:	fa23 f002 	lsr.w	r0, r3, r2
 80005cc:	bf18      	it	ne
 80005ce:	4240      	negne	r0, r0
 80005d0:	4770      	bx	lr
 80005d2:	f04f 0000 	mov.w	r0, #0
 80005d6:	4770      	bx	lr
 80005d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005dc:	d101      	bne.n	80005e2 <__aeabi_f2iz+0x3a>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	d105      	bne.n	80005ee <__aeabi_f2iz+0x46>
 80005e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80005e6:	bf08      	it	eq
 80005e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005ec:	4770      	bx	lr
 80005ee:	f04f 0000 	mov.w	r0, #0
 80005f2:	4770      	bx	lr

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 fc14 	bl	8001e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f84a 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fd7a 	bl	80010f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fd5a 	bl	80010bc <MX_DMA_Init>
  MX_FSMC_Init();
 8000608:	f000 fdf8 	bl	80011fc <MX_FSMC_Init>
  MX_I2C1_Init();
 800060c:	f000 f9be 	bl	800098c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000610:	f000 fa4e 	bl	8000ab0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000614:	f000 fb3c 	bl	8000c90 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000618:	f000 fcfc 	bl	8001014 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800061c:	f000 fd24 	bl	8001068 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000620:	f000 f898 	bl	8000754 <MX_ADC1_Init>
  MX_RTC_Init();
 8000624:	f000 f9e0 	bl	80009e8 <MX_RTC_Init>
  MX_TIM1_Init();
 8000628:	f000 fa78 	bl	8000b1c <MX_TIM1_Init>
  MX_TIM5_Init();
 800062c:	f000 fc7c 	bl	8000f28 <MX_TIM5_Init>
  MX_CAN_Init();
 8000630:	f000 f978 	bl	8000924 <MX_CAN_Init>
  MX_TIM3_Init();
 8000634:	f000 fb78 	bl	8000d28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000638:	f000 fbf6 	bl	8000e28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800063c:	2100      	movs	r1, #0
 800063e:	4810      	ldr	r0, [pc, #64]	; (8000680 <main+0x8c>)
 8000640:	f004 ffc2 	bl	80055c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <main+0x90>)
 8000648:	f004 ffbe 	bl	80055c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800064c:	2104      	movs	r1, #4
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <main+0x90>)
 8000650:	f004 ffba 	bl	80055c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000654:	2108      	movs	r1, #8
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <main+0x94>)
 8000658:	f004 ffb6 	bl	80055c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800065c:	210c      	movs	r1, #12
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <main+0x94>)
 8000660:	f004 ffb2 	bl	80055c8 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000664:	2104      	movs	r1, #4
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <main+0x8c>)
 8000668:	f004 fe4e 	bl	8005308 <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 14);
 800066c:	220e      	movs	r2, #14
 800066e:	4907      	ldr	r1, [pc, #28]	; (800068c <main+0x98>)
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <main+0x9c>)
 8000672:	f001 fd47 	bl	8002104 <HAL_ADC_Start_DMA>
    HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f001 fc36 	bl	8001ee8 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 14);
 800067c:	e7f6      	b.n	800066c <main+0x78>
 800067e:	bf00      	nop
 8000680:	20000194 	.word	0x20000194
 8000684:	20000224 	.word	0x20000224
 8000688:	2000026c 	.word	0x2000026c
 800068c:	200003d4 	.word	0x200003d4
 8000690:	20000038 	.word	0x20000038

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 f8c0 	bl	8006828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
 80006c6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80006e4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80006e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 f908 	bl	8003904 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006fa:	f000 fe96 	bl	800142a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fb74 	bl	8003e08 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000726:	f000 fe80 	bl	800142a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800072a:	2303      	movs	r3, #3
 800072c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800072e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000732:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000734:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000738:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fcf1 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000748:	f000 fe6f 	bl	800142a <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3758      	adds	r7, #88	; 0x58
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b6d      	ldr	r3, [pc, #436]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000766:	4a6e      	ldr	r2, [pc, #440]	; (8000920 <MX_ADC1_Init+0x1cc>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800076a:	4b6c      	ldr	r3, [pc, #432]	; (800091c <MX_ADC1_Init+0x1c8>)
 800076c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000772:	4b6a      	ldr	r3, [pc, #424]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000774:	2200      	movs	r2, #0
 8000776:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000778:	4b68      	ldr	r3, [pc, #416]	; (800091c <MX_ADC1_Init+0x1c8>)
 800077a:	2200      	movs	r2, #0
 800077c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077e:	4b67      	ldr	r3, [pc, #412]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000780:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b65      	ldr	r3, [pc, #404]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 14;
 800078c:	4b63      	ldr	r3, [pc, #396]	; (800091c <MX_ADC1_Init+0x1c8>)
 800078e:	220e      	movs	r2, #14
 8000790:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	4862      	ldr	r0, [pc, #392]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000794:	f001 fbcc 	bl	8001f30 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800079e:	f000 fe44 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007a2:	230a      	movs	r3, #10
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	485a      	ldr	r0, [pc, #360]	; (800091c <MX_ADC1_Init+0x1c8>)
 80007b4:	f001 fe5e 	bl	8002474 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 fe34 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4854      	ldr	r0, [pc, #336]	; (800091c <MX_ADC1_Init+0x1c8>)
 80007cc:	f001 fe52 	bl	8002474 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007d6:	f000 fe28 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007da:	2303      	movs	r3, #3
 80007dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	484e      	ldr	r0, [pc, #312]	; (800091c <MX_ADC1_Init+0x1c8>)
 80007e4:	f001 fe46 	bl	8002474 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007ee:	f000 fe1c 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4848      	ldr	r0, [pc, #288]	; (800091c <MX_ADC1_Init+0x1c8>)
 80007fc:	f001 fe3a 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000806:	f000 fe10 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800080a:	2305      	movs	r3, #5
 800080c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4842      	ldr	r0, [pc, #264]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000814:	f001 fe2e 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800081e:	f000 fe04 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000822:	2306      	movs	r3, #6
 8000824:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	483c      	ldr	r0, [pc, #240]	; (800091c <MX_ADC1_Init+0x1c8>)
 800082c:	f001 fe22 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000836:	f000 fdf8 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800083a:	2307      	movs	r3, #7
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4836      	ldr	r0, [pc, #216]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000844:	f001 fe16 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800084e:	f000 fdec 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000852:	2308      	movs	r3, #8
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4830      	ldr	r0, [pc, #192]	; (800091c <MX_ADC1_Init+0x1c8>)
 800085c:	f001 fe0a 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000866:	f000 fde0 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800086a:	230b      	movs	r3, #11
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800086e:	2309      	movs	r3, #9
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4829      	ldr	r0, [pc, #164]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000878:	f001 fdfc 	bl	8002474 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000882:	f000 fdd2 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000886:	230c      	movs	r3, #12
 8000888:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800088a:	230a      	movs	r3, #10
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4822      	ldr	r0, [pc, #136]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000894:	f001 fdee 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800089e:	f000 fdc4 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008a2:	2305      	movs	r3, #5
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80008a6:	230b      	movs	r3, #11
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	481b      	ldr	r0, [pc, #108]	; (800091c <MX_ADC1_Init+0x1c8>)
 80008b0:	f001 fde0 	bl	8002474 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80008ba:	f000 fdb6 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008be:	230e      	movs	r3, #14
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80008c2:	230c      	movs	r3, #12
 80008c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4814      	ldr	r0, [pc, #80]	; (800091c <MX_ADC1_Init+0x1c8>)
 80008cc:	f001 fdd2 	bl	8002474 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80008d6:	f000 fda8 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008da:	230f      	movs	r3, #15
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80008de:	230d      	movs	r3, #13
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_ADC1_Init+0x1c8>)
 80008e8:	f001 fdc4 	bl	8002474 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 80008f2:	f000 fd9a 	bl	800142a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008f6:	2308      	movs	r3, #8
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80008fa:	230e      	movs	r3, #14
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_ADC1_Init+0x1c8>)
 8000904:	f001 fdb6 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 800090e:	f000 fd8c 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000038 	.word	0x20000038
 8000920:	40012400 	.word	0x40012400

08000924 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_CAN_Init+0x60>)
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <MX_CAN_Init+0x64>)
 800092c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_CAN_Init+0x60>)
 8000930:	2210      	movs	r2, #16
 8000932:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_CAN_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_CAN_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_CAN_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_CAN_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_CAN_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_CAN_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_CAN_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_CAN_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_CAN_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_CAN_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_CAN_Init+0x60>)
 8000972:	f001 ff81 	bl	8002878 <HAL_CAN_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 fd55 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000ac 	.word	0x200000ac
 8000988:	40006400 	.word	0x40006400

0800098c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_I2C1_Init+0x50>)
 8000992:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_I2C1_Init+0x54>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_I2C1_Init+0x50>)
 8000998:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_I2C1_Init+0x58>)
 800099a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_I2C1_Init+0x50>)
 80009aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_I2C1_Init+0x50>)
 80009ca:	f002 fe4b 	bl	8003664 <HAL_I2C_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d4:	f000 fd29 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000d4 	.word	0x200000d4
 80009e0:	40005400 	.word	0x40005400
 80009e4:	000186a0 	.word	0x000186a0

080009e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2100      	movs	r1, #0
 80009f4:	460a      	mov	r2, r1
 80009f6:	801a      	strh	r2, [r3, #0]
 80009f8:	460a      	mov	r2, r1
 80009fa:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_RTC_Init+0xc0>)
 8000a0a:	4a28      	ldr	r2, [pc, #160]	; (8000aac <MX_RTC_Init+0xc4>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_RTC_Init+0xc0>)
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_RTC_Init+0xc0>)
 8000a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a1e:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <MX_RTC_Init+0xc0>)
 8000a20:	f003 fd0e 	bl	8004440 <HAL_RTC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 fcfe 	bl	800142a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <MX_RTC_Init+0xc0>)
 8000a44:	f003 fd88 	bl	8004558 <HAL_RTC_SetTime>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 fcec 	bl	800142a <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a52:	2301      	movs	r3, #1
 8000a54:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000a56:	2301      	movs	r3, #1
 8000a58:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2201      	movs	r2, #1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <MX_RTC_Init+0xc0>)
 8000a6c:	f003 fee4 	bl	8004838 <HAL_RTC_SetDate>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000a76:	f000 fcd8 	bl	800142a <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_RTC_Init+0xc0>)
 8000a92:	f003 ff87 	bl	80049a4 <HAL_RTC_SetAlarm>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000a9c:	f000 fcc5 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000128 	.word	0x20000128
 8000aac:	40002800 	.word	0x40002800

08000ab0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <MX_SPI1_Init+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000afc:	220a      	movs	r2, #10
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000b02:	f004 fa89 	bl	8005018 <HAL_SPI_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b0c:	f000 fc8d 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000013c 	.word	0x2000013c
 8000b18:	40013000 	.word	0x40013000

08000b1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b096      	sub	sp, #88	; 0x58
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2220      	movs	r2, #32
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 fe67 	bl	8006828 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000b5c:	4a4b      	ldr	r2, [pc, #300]	; (8000c8c <MX_TIM1_Init+0x170>)
 8000b5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8000b60:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000b62:	2205      	movs	r2, #5
 8000b64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000b6c:	4b46      	ldr	r3, [pc, #280]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000b6e:	2263      	movs	r2, #99	; 0x63
 8000b70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b84:	4840      	ldr	r0, [pc, #256]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000b86:	f004 fb18 	bl	80051ba <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b90:	f000 fc4b 	bl	800142a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4839      	ldr	r0, [pc, #228]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000ba2:	f004 fff1 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000bac:	f000 fc3d 	bl	800142a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bb0:	4835      	ldr	r0, [pc, #212]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000bb2:	f004 fcb1 	bl	8005518 <HAL_TIM_PWM_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000bbc:	f000 fc35 	bl	800142a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000bc0:	4831      	ldr	r0, [pc, #196]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000bc2:	f004 fb49 	bl	8005258 <HAL_TIM_OC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000bcc:	f000 fc2d 	bl	800142a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bdc:	4619      	mov	r1, r3
 8000bde:	482a      	ldr	r0, [pc, #168]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000be0:	f005 fb9e 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000bea:	f000 fc1e 	bl	800142a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bee:	2360      	movs	r3, #96	; 0x60
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	481d      	ldr	r0, [pc, #116]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000c14:	f004 fef6 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000c1e:	f000 fc04 	bl	800142a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8000c26:	2332      	movs	r3, #50	; 0x32
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	2204      	movs	r2, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	4814      	ldr	r0, [pc, #80]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000c38:	f004 fe88 	bl	800594c <HAL_TIM_OC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c42:	f000 fbf2 	bl	800142a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000c6a:	f005 fbc5 	bl	80063f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000c74:	f000 fbd9 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM1_Init+0x16c>)
 8000c7a:	f000 fef9 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 8000c7e:	bf00      	nop
 8000c80:	3758      	adds	r7, #88	; 0x58
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000194 	.word	0x20000194
 8000c8c:	40012c00 	.word	0x40012c00

08000c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cd6:	f004 fa70 	bl	80051ba <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ce0:	f000 fba3 	bl	800142a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cf2:	f004 ff49 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cfc:	f000 fb95 	bl	800142a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000d0e:	f005 fb07 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 fb87 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200001dc 	.word	0x200001dc

08000d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d58:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000d5a:	4a32      	ldr	r2, [pc, #200]	; (8000e24 <MX_TIM3_Init+0xfc>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000d5e:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000d60:	2247      	movs	r2, #71	; 0x47
 8000d62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000d6c:	2263      	movs	r2, #99	; 0x63
 8000d6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000d7e:	f004 fa1c 	bl	80051ba <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000d88:	f000 fb4f 	bl	800142a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4821      	ldr	r0, [pc, #132]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000d9a:	f004 fef5 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000da4:	f000 fb41 	bl	800142a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000daa:	f004 fbb5 	bl	8005518 <HAL_TIM_PWM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000db4:	f000 fb39 	bl	800142a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4816      	ldr	r0, [pc, #88]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000dc8:	f005 faaa 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000dd2:	f000 fb2a 	bl	800142a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd6:	2360      	movs	r3, #96	; 0x60
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000dee:	f004 fe09 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000df8:	f000 fb17 	bl	800142a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000e04:	f004 fdfe 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000e0e:	f000 fb0c 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <MX_TIM3_Init+0xf8>)
 8000e14:	f000 fe2c 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 8000e18:	bf00      	nop
 8000e1a:	3738      	adds	r7, #56	; 0x38
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000224 	.word	0x20000224
 8000e24:	40000400 	.word	0x40000400

08000e28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08e      	sub	sp, #56	; 0x38
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000e5a:	4a32      	ldr	r2, [pc, #200]	; (8000f24 <MX_TIM4_Init+0xfc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000e60:	2247      	movs	r2, #71	; 0x47
 8000e62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000e6c:	2263      	movs	r2, #99	; 0x63
 8000e6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e7c:	4828      	ldr	r0, [pc, #160]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000e7e:	f004 f99c 	bl	80051ba <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000e88:	f000 facf 	bl	800142a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4821      	ldr	r0, [pc, #132]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000e9a:	f004 fe75 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000ea4:	f000 fac1 	bl	800142a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ea8:	481d      	ldr	r0, [pc, #116]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000eaa:	f004 fb35 	bl	8005518 <HAL_TIM_PWM_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000eb4:	f000 fab9 	bl	800142a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4816      	ldr	r0, [pc, #88]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000ec8:	f005 fa2a 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000ed2:	f000 faaa 	bl	800142a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed6:	2360      	movs	r3, #96	; 0x60
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2208      	movs	r2, #8
 8000eea:	4619      	mov	r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000eee:	f004 fd89 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000ef8:	f000 fa97 	bl	800142a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	220c      	movs	r2, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000f04:	f004 fd7e 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000f0e:	f000 fa8c 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <MX_TIM4_Init+0xf8>)
 8000f14:	f000 fdac 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 8000f18:	bf00      	nop
 8000f1a:	3738      	adds	r7, #56	; 0x38
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000026c 	.word	0x2000026c
 8000f24:	40000800 	.word	0x40000800

08000f28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <MX_TIM5_Init+0xe4>)
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	; (8001010 <MX_TIM5_Init+0xe8>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_TIM5_Init+0xe4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_TIM5_Init+0xe4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_TIM5_Init+0xe4>)
 8000f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_TIM5_Init+0xe4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <MX_TIM5_Init+0xe4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f7e:	4823      	ldr	r0, [pc, #140]	; (800100c <MX_TIM5_Init+0xe4>)
 8000f80:	f004 f91b 	bl	80051ba <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000f8a:	f000 fa4e 	bl	800142a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481c      	ldr	r0, [pc, #112]	; (800100c <MX_TIM5_Init+0xe4>)
 8000f9c:	f004 fdf4 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000fa6:	f000 fa40 	bl	800142a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <MX_TIM5_Init+0xe4>)
 8000fac:	f004 fab4 	bl	8005518 <HAL_TIM_PWM_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000fb6:	f000 fa38 	bl	800142a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4810      	ldr	r0, [pc, #64]	; (800100c <MX_TIM5_Init+0xe4>)
 8000fca:	f005 f9a9 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000fd4:	f000 fa29 	bl	800142a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	; 0x60
 8000fda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2204      	movs	r2, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM5_Init+0xe4>)
 8000ff0:	f004 fd08 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000ffa:	f000 fa16 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ffe:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM5_Init+0xe4>)
 8001000:	f000 fd36 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 8001004:	bf00      	nop
 8001006:	3738      	adds	r7, #56	; 0x38
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200002b4 	.word	0x200002b4
 8001010:	40000c00 	.word	0x40000c00

08001014 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART1_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800104c:	f005 fa37 	bl	80064be <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f000 f9e8 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200002fc 	.word	0x200002fc
 8001064:	40013800 	.word	0x40013800

08001068 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_USART2_UART_Init+0x50>)
 8001070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_USART2_UART_Init+0x4c>)
 80010a0:	f005 fa0d 	bl	80064be <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010aa:	f000 f9be 	bl	800142a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000344 	.word	0x20000344
 80010b8:	40004400 	.word	0x40004400

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_DMA_Init+0x38>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <MX_DMA_Init+0x38>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_DMA_Init+0x38>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	200b      	movs	r0, #11
 80010e0:	f001 fd9d 	bl	8002c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010e4:	200b      	movs	r0, #11
 80010e6:	f001 fdb6 	bl	8002c56 <HAL_NVIC_EnableIRQ>

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_GPIO_Init+0xf4>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a36      	ldr	r2, [pc, #216]	; (80011ec <MX_GPIO_Init+0xf4>)
 8001112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_GPIO_Init+0xf4>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_GPIO_Init+0xf4>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a30      	ldr	r2, [pc, #192]	; (80011ec <MX_GPIO_Init+0xf4>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_GPIO_Init+0xf4>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_GPIO_Init+0xf4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <MX_GPIO_Init+0xf4>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_GPIO_Init+0xf4>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_GPIO_Init+0xf4>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a24      	ldr	r2, [pc, #144]	; (80011ec <MX_GPIO_Init+0xf4>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MX_GPIO_Init+0xf4>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_GPIO_Init+0xf4>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <MX_GPIO_Init+0xf4>)
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_GPIO_Init+0xf4>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CPT_RST_Pin|CPT_INT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	211a      	movs	r1, #26
 8001188:	4819      	ldr	r0, [pc, #100]	; (80011f0 <MX_GPIO_Init+0xf8>)
 800118a:	f002 fa53 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <MX_GPIO_Init+0xfc>)
 8001194:	f002 fa4e 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CPT_RST_Pin CPT_INT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CPT_RST_Pin|CPT_INT_Pin|LCD_RST_Pin;
 8001198:	231a      	movs	r3, #26
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2302      	movs	r3, #2
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <MX_GPIO_Init+0xf8>)
 80011b0:	f002 f8ac 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_CURRENT_ADC_Pin */
  GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_CURRENT_ADC_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_GPIO_Init+0x100>)
 80011c4:	f002 f8a2 	bl	800330c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011c8:	2340      	movs	r3, #64	; 0x40
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2302      	movs	r3, #2
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_GPIO_Init+0xfc>)
 80011e0:	f002 f894 	bl	800330c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40011800 	.word	0x40011800
 80011f4:	40011400 	.word	0x40011400
 80011f8:	40011000 	.word	0x40011000

080011fc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001216:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800121a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_FSMC_Init+0xbc>)
 800121e:	4a27      	ldr	r2, [pc, #156]	; (80012bc <MX_FSMC_Init+0xc0>)
 8001220:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_FSMC_Init+0xbc>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001236:	2210      	movs	r2, #16
 8001238:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_FSMC_Init+0xbc>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_FSMC_Init+0xbc>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001254:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_FSMC_Init+0xbc>)
 800125c:	2200      	movs	r2, #0
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001262:	2200      	movs	r2, #0
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001268:	2200      	movs	r2, #0
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_FSMC_Init+0xbc>)
 800126e:	2200      	movs	r2, #0
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001272:	230f      	movs	r3, #15
 8001274:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001276:	230f      	movs	r3, #15
 8001278:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800127a:	23ff      	movs	r3, #255	; 0xff
 800127c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800127e:	230f      	movs	r3, #15
 8001280:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001282:	2310      	movs	r3, #16
 8001284:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001286:	2311      	movs	r3, #17
 8001288:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <MX_FSMC_Init+0xbc>)
 8001296:	f003 ff43 	bl	8005120 <HAL_SRAM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80012a0:	f000 f8c3 	bl	800142a <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_FSMC_Init+0xc4>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <MX_FSMC_Init+0xc4>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ae:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000038c 	.word	0x2000038c
 80012bc:	a0000104 	.word	0xa0000104
 80012c0:	40010000 	.word	0x40010000

080012c4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
  asm("NOP");
 80012cc:	bf00      	nop
  LDR_val[0] = adc_data[10] * 1.63f;
 80012ce:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x130>)
 80012d0:	8a9b      	ldrh	r3, [r3, #20]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f913 	bl	8000500 <__aeabi_i2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	4946      	ldr	r1, [pc, #280]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x134>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ffa0 	bl	8000224 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f95e 	bl	80005a8 <__aeabi_f2iz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b42      	ldr	r3, [pc, #264]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 80012f2:	801a      	strh	r2, [r3, #0]
  LDR_val[1] = adc_data[11];
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x130>)
 80012f6:	8adb      	ldrh	r3, [r3, #22]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 80012fe:	805a      	strh	r2, [r3, #2]
  LDR_val[2] = adc_data[12];
 8001300:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x130>)
 8001302:	8b1b      	ldrh	r3, [r3, #24]
 8001304:	b29b      	uxth	r3, r3
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 800130a:	809a      	strh	r2, [r3, #4]
  LDR_val[3] = adc_data[13];
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x130>)
 800130e:	8b5b      	ldrh	r3, [r3, #26]
 8001310:	b29b      	uxth	r3, r3
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 8001316:	80da      	strh	r2, [r3, #6]
  CUR_IN = 4096;
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <HAL_ADC_ConvCpltCallback+0x13c>)
 800131a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800131e:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < 8; ++i) {
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e019      	b.n	800135a <HAL_ADC_ConvCpltCallback+0x96>
    CUR_IN = CUR_IN < adc_data[i] ? CUR_IN : adc_data[i];
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_ADC_ConvCpltCallback+0x13c>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4619      	mov	r1, r3
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x130>)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4299      	cmp	r1, r3
 800133a:	db06      	blt.n	800134a <HAL_ADC_ConvCpltCallback+0x86>
 800133c:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x130>)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001344:	b29b      	uxth	r3, r3
 8001346:	b21b      	sxth	r3, r3
 8001348:	e002      	b.n	8001350 <HAL_ADC_ConvCpltCallback+0x8c>
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_ADC_ConvCpltCallback+0x13c>)
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	4a2b      	ldr	r2, [pc, #172]	; (8001400 <HAL_ADC_ConvCpltCallback+0x13c>)
 8001352:	8013      	strh	r3, [r2, #0]
  for (int i = 0; i < 8; ++i) {
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b07      	cmp	r3, #7
 800135e:	dde2      	ble.n	8001326 <HAL_ADC_ConvCpltCallback+0x62>
  }
  SOLAR_TRACKER_track(LDR_val[0] + LDR_val[1], LDR_val[2] + LDR_val[3], &(TIM3->CCR1), &(TIM3->CCR2));
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 8001362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 800136a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4413      	add	r3, r2
 8001372:	b29b      	uxth	r3, r3
 8001374:	b218      	sxth	r0, r3
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 8001378:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 8001380:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	b219      	sxth	r1, r3
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_ADC_ConvCpltCallback+0x140>)
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_ADC_ConvCpltCallback+0x144>)
 8001390:	f000 f8e2 	bl	8001558 <SOLAR_TRACKER_track>
  SOLAR_TRACKER_track(LDR_val[1] + LDR_val[2], LDR_val[0] + LDR_val[4], &(TIM4->CCR3), &(TIM4->CCR4));
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 8001396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800139a:	b29a      	uxth	r2, r3
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 800139e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b218      	sxth	r0, r3
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_ADC_ConvCpltCallback+0x138>)
 80013b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b219      	sxth	r1, r3
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_ADC_ConvCpltCallback+0x148>)
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <HAL_ADC_ConvCpltCallback+0x14c>)
 80013c4:	f000 f8c8 	bl	8001558 <SOLAR_TRACKER_track>
  MPPT_calculate(adc_data[8], CUR_IN, adc_data[9], 0, &(TIM1->CCR1));
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x130>)
 80013ca:	8a1b      	ldrh	r3, [r3, #16]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_ADC_ConvCpltCallback+0x13c>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x130>)
 80013da:	8a5b      	ldrh	r3, [r3, #18]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_ADC_ConvCpltCallback+0x150>)
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	f000 f829 	bl	800143c <MPPT_calculate>
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200003d4 	.word	0x200003d4
 80013f8:	3fd0a3d7 	.word	0x3fd0a3d7
 80013fc:	200003f4 	.word	0x200003f4
 8001400:	200003f0 	.word	0x200003f0
 8001404:	40000438 	.word	0x40000438
 8001408:	40000434 	.word	0x40000434
 800140c:	40000840 	.word	0x40000840
 8001410:	4000083c 	.word	0x4000083c
 8001414:	40012c34 	.word	0x40012c34

08001418 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  //   HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
  //   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
  //   HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 14);
  //   HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  // }
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142e:	b672      	cpsid	i
}
 8001430:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 fd58 	bl	8001ee8 <HAL_Delay>
 8001438:	e7fb      	b.n	8001432 <Error_Handler+0x8>
	...

0800143c <MPPT_calculate>:
int prev_PWR_OUT = 0;
uint32_t prev_PWM_OUTPUT[2] = {0, 0};
int max_output_voltage = 1727; // corresponds to 12.6V
uint32_t max_PWM_OUTPUT = 20;

void MPPT_calculate(int VOL_IN, int CUR_IN, int VOL_OUT, int CUR_OUT, uint32_t *PWM_OUTPUT) {
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
    // MPPT algorithm
    
    long PWR_IN = VOL_IN * CUR_IN;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	61bb      	str	r3, [r7, #24]
    // long PWR_OUT = VOL_OUT * CUR_OUT;
    int PWR_IN_isIncreased = PWR_IN >= prev_PWR_IN;
 8001454:	4b38      	ldr	r3, [pc, #224]	; (8001538 <MPPT_calculate+0xfc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	429a      	cmp	r2, r3
 800145c:	bfac      	ite	ge
 800145e:	2301      	movge	r3, #1
 8001460:	2300      	movlt	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	617b      	str	r3, [r7, #20]
    // int PWR_OUT_isIncreased = PWR_OUT >= prev_PWR_OUT;
    int PWM_wasIncreased = prev_PWM_OUTPUT[0] >= prev_PWM_OUTPUT[1];
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <MPPT_calculate+0x100>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <MPPT_calculate+0x100>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	bf2c      	ite	cs
 8001472:	2301      	movcs	r3, #1
 8001474:	2300      	movcc	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	613b      	str	r3, [r7, #16]
    int _PWM_OUTPUT = *PWM_OUTPUT;
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	61fb      	str	r3, [r7, #28]
    if (PWR_IN_isIncreased && PWM_wasIncreased) {
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <MPPT_calculate+0x58>
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <MPPT_calculate+0x58>
        _PWM_OUTPUT += 1;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	3301      	adds	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e01c      	b.n	80014ce <MPPT_calculate+0x92>
    } else if (!PWR_IN_isIncreased && !PWM_wasIncreased) {
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <MPPT_calculate+0x6c>
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <MPPT_calculate+0x6c>
        _PWM_OUTPUT += 1;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e012      	b.n	80014ce <MPPT_calculate+0x92>
    } else if (PWR_IN_isIncreased && !PWM_wasIncreased) {
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <MPPT_calculate+0x80>
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d103      	bne.n	80014bc <MPPT_calculate+0x80>
        _PWM_OUTPUT -= 1;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e008      	b.n	80014ce <MPPT_calculate+0x92>
    } else if (!PWR_IN_isIncreased && PWM_wasIncreased) {
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <MPPT_calculate+0x92>
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <MPPT_calculate+0x92>
        _PWM_OUTPUT -= 1;
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
    }
    if (VOL_OUT > max_output_voltage) {
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MPPT_calculate+0x104>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dd02      	ble.n	80014de <MPPT_calculate+0xa2>
        _PWM_OUTPUT -= 2;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	3b02      	subs	r3, #2
 80014dc:	61fb      	str	r3, [r7, #28]
    }
    if (_PWM_OUTPUT > (int)max_PWM_OUTPUT) {
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MPPT_calculate+0x108>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	dd02      	ble.n	80014f0 <MPPT_calculate+0xb4>
        _PWM_OUTPUT = max_PWM_OUTPUT;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MPPT_calculate+0x108>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	61fb      	str	r3, [r7, #28]
    }
    if (_PWM_OUTPUT < 0) {
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da01      	bge.n	80014fa <MPPT_calculate+0xbe>
        _PWM_OUTPUT = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    }
    prev_VOL_IN = VOL_IN;
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <MPPT_calculate+0x10c>)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6013      	str	r3, [r2, #0]
    prev_CUR_IN = CUR_IN;
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <MPPT_calculate+0x110>)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	6013      	str	r3, [r2, #0]
    prev_VOL_OUT = VOL_OUT;
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <MPPT_calculate+0x114>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6013      	str	r3, [r2, #0]
    prev_CUR_OUT = CUR_OUT;
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <MPPT_calculate+0x118>)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6013      	str	r3, [r2, #0]
    prev_PWR_IN = PWR_IN;
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <MPPT_calculate+0xfc>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6013      	str	r3, [r2, #0]
    // prev_PWR_OUT = PWR_OUT;
    prev_PWM_OUTPUT[1] = prev_PWM_OUTPUT[0];
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <MPPT_calculate+0x100>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <MPPT_calculate+0x100>)
 800151e:	6053      	str	r3, [r2, #4]
    prev_PWM_OUTPUT[0] = _PWM_OUTPUT;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <MPPT_calculate+0x100>)
 8001524:	6013      	str	r3, [r2, #0]
    
    *PWM_OUTPUT = _PWM_OUTPUT;
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	bf00      	nop
 800152e:	3724      	adds	r7, #36	; 0x24
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000404 	.word	0x20000404
 800153c:	20000410 	.word	0x20000410
 8001540:	20000000 	.word	0x20000000
 8001544:	20000004 	.word	0x20000004
 8001548:	200003fc 	.word	0x200003fc
 800154c:	20000400 	.word	0x20000400
 8001550:	20000408 	.word	0x20000408
 8001554:	2000040c 	.word	0x2000040c

08001558 <SOLAR_TRACKER_track>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int SOLAR_TRACKER_init(void);
int SOLAR_TRACKER_calibrate(void);
int SOLAR_TRACKER_track(int16_t LDR_VAL_A, int16_t LDR_VAL_B, uint32_t *MOTOR_OUTPUT_A, uint32_t *MOTOR_OUTPUT_B) {
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60ba      	str	r2, [r7, #8]
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4603      	mov	r3, r0
 8001564:	81fb      	strh	r3, [r7, #14]
 8001566:	460b      	mov	r3, r1
 8001568:	81bb      	strh	r3, [r7, #12]
    if (LDR_VAL_A - LDR_VAL_B > diff_threshold) {
 800156a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800156e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001572:	1ad2      	subs	r2, r2, r3
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <SOLAR_TRACKER_track+0x74>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	dd08      	ble.n	800158e <SOLAR_TRACKER_track+0x36>
        *MOTOR_OUTPUT_A = MOTOR_MAX;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <SOLAR_TRACKER_track+0x78>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = 0;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e017      	b.n	80015be <SOLAR_TRACKER_track+0x66>
    } else if (LDR_VAL_B - LDR_VAL_A > diff_threshold) {
 800158e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001592:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <SOLAR_TRACKER_track+0x74>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	dd08      	ble.n	80015b2 <SOLAR_TRACKER_track+0x5a>
        *MOTOR_OUTPUT_A = 0;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = MOTOR_MAX;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <SOLAR_TRACKER_track+0x78>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e005      	b.n	80015be <SOLAR_TRACKER_track+0x66>
    } else {
        *MOTOR_OUTPUT_A = 0;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
    }
 80015be:	bf00      	nop
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	2000000c 	.word	0x2000000c

080015d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_MspInit+0x5c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_MspInit+0x5c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_MspInit+0x5c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_MspInit+0x5c>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_MspInit+0x5c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x5c>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_MspInit+0x60>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_MspInit+0x60>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000

08001638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a42      	ldr	r2, [pc, #264]	; (800175c <HAL_ADC_MspInit+0x124>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d17d      	bne.n	8001754 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_ADC_MspInit+0x128>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a40      	ldr	r2, [pc, #256]	; (8001760 <HAL_ADC_MspInit+0x128>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <HAL_ADC_MspInit+0x128>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_ADC_MspInit+0x128>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a3a      	ldr	r2, [pc, #232]	; (8001760 <HAL_ADC_MspInit+0x128>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b38      	ldr	r3, [pc, #224]	; (8001760 <HAL_ADC_MspInit+0x128>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <HAL_ADC_MspInit+0x128>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a34      	ldr	r2, [pc, #208]	; (8001760 <HAL_ADC_MspInit+0x128>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_ADC_MspInit+0x128>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_ADC_MspInit+0x128>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a2e      	ldr	r2, [pc, #184]	; (8001760 <HAL_ADC_MspInit+0x128>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <HAL_ADC_MspInit+0x128>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin|INPUT_VOLTAGE_ADC_Pin|OUTPUT_VOLTAGE_ADC_Pin|OUTPUT_CURRENT_ADC_Pin
 80016b8:	233f      	movs	r3, #63	; 0x3f
 80016ba:	61bb      	str	r3, [r7, #24]
                          |LDR2_ADC_Pin|LDR3_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016bc:	2303      	movs	r3, #3
 80016be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	4619      	mov	r1, r3
 80016c6:	4827      	ldr	r0, [pc, #156]	; (8001764 <HAL_ADC_MspInit+0x12c>)
 80016c8:	f001 fe20 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR1_ADC_Pin;
 80016cc:	2320      	movs	r3, #32
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d0:	2303      	movs	r3, #3
 80016d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR1_ADC_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	4619      	mov	r1, r3
 80016da:	4823      	ldr	r0, [pc, #140]	; (8001768 <HAL_ADC_MspInit+0x130>)
 80016dc:	f001 fe16 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR4_ADC_Pin;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e4:	2303      	movs	r3, #3
 80016e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR4_ADC_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0318 	add.w	r3, r7, #24
 80016ec:	4619      	mov	r1, r3
 80016ee:	481f      	ldr	r0, [pc, #124]	; (800176c <HAL_ADC_MspInit+0x134>)
 80016f0:	f001 fe0c 	bl	800330c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_ADC_MspInit+0x138>)
 80016f6:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_ADC_MspInit+0x13c>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_ADC_MspInit+0x138>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_ADC_MspInit+0x138>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_ADC_MspInit+0x138>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_ADC_MspInit+0x138>)
 800170e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001712:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_ADC_MspInit+0x138>)
 8001716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_ADC_MspInit+0x138>)
 800171e:	2220      	movs	r2, #32
 8001720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_ADC_MspInit+0x138>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001728:	4811      	ldr	r0, [pc, #68]	; (8001770 <HAL_ADC_MspInit+0x138>)
 800172a:	f001 faaf 	bl	8002c8c <HAL_DMA_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001734:	f7ff fe79 	bl	800142a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_ADC_MspInit+0x138>)
 800173c:	621a      	str	r2, [r3, #32]
 800173e:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_ADC_MspInit+0x138>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2012      	movs	r0, #18
 800174a:	f001 fa68 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800174e:	2012      	movs	r0, #18
 8001750:	f001 fa81 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40012400 	.word	0x40012400
 8001760:	40021000 	.word	0x40021000
 8001764:	40011000 	.word	0x40011000
 8001768:	40010800 	.word	0x40010800
 800176c:	40010c00 	.word	0x40010c00
 8001770:	20000068 	.word	0x20000068
 8001774:	40020008 	.word	0x40020008

08001778 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_CAN_MspInit+0x8c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d131      	bne.n	80017fc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_CAN_MspInit+0x90>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <HAL_CAN_MspInit+0x90>)
 800179e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a2:	61d3      	str	r3, [r2, #28]
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_CAN_MspInit+0x90>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_CAN_MspInit+0x90>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <HAL_CAN_MspInit+0x90>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_CAN_MspInit+0x90>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4619      	mov	r1, r3
 80017dc:	480b      	ldr	r0, [pc, #44]	; (800180c <HAL_CAN_MspInit+0x94>)
 80017de:	f001 fd95 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_CAN_MspInit+0x94>)
 80017f8:	f001 fd88 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40006400 	.word	0x40006400
 8001808:	40021000 	.word	0x40021000
 800180c:	40010800 	.word	0x40010800

08001810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_I2C_MspInit+0x70>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d123      	bne.n	8001878 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_I2C_MspInit+0x74>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a13      	ldr	r2, [pc, #76]	; (8001884 <HAL_I2C_MspInit+0x74>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_I2C_MspInit+0x74>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = CPT_SCL_Pin|CPT_SDA_Pin;
 8001848:	23c0      	movs	r3, #192	; 0xc0
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184c:	2312      	movs	r3, #18
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	480b      	ldr	r0, [pc, #44]	; (8001888 <HAL_I2C_MspInit+0x78>)
 800185c:	f001 fd56 	bl	800330c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_I2C_MspInit+0x74>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_I2C_MspInit+0x74>)
 8001866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800186a:	61d3      	str	r3, [r2, #28]
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_I2C_MspInit+0x74>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005400 	.word	0x40005400
 8001884:	40021000 	.word	0x40021000
 8001888:	40010c00 	.word	0x40010c00

0800188c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_RTC_MspInit+0x3c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d110      	bne.n	80018c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800189e:	f002 f825 	bl	80038ec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RTC_MspInit+0x40>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RTC_MspInit+0x40>)
 80018a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_RTC_MspInit+0x40>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RTC_MspInit+0x44>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40002800 	.word	0x40002800
 80018cc:	40021000 	.word	0x40021000
 80018d0:	4242043c 	.word	0x4242043c

080018d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_SPI_MspInit+0xa4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d13d      	bne.n	8001970 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_SPI_MspInit+0xa8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a20      	ldr	r2, [pc, #128]	; (800197c <HAL_SPI_MspInit+0xa8>)
 80018fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_SPI_MspInit+0xa8>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_SPI_MspInit+0xa8>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_SPI_MspInit+0xa8>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_SPI_MspInit+0xa8>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001924:	2328      	movs	r3, #40	; 0x28
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <HAL_SPI_MspInit+0xac>)
 8001938:	f001 fce8 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800193c:	2310      	movs	r3, #16
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	480c      	ldr	r0, [pc, #48]	; (8001980 <HAL_SPI_MspInit+0xac>)
 8001950:	f001 fcdc 	bl	800330c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_SPI_MspInit+0xb0>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	4a06      	ldr	r2, [pc, #24]	; (8001984 <HAL_SPI_MspInit+0xb0>)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40013000 	.word	0x40013000
 800197c:	40021000 	.word	0x40021000
 8001980:	40010c00 	.word	0x40010c00
 8001984:	40010000 	.word	0x40010000

08001988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a31      	ldr	r2, [pc, #196]	; (8001a5c <HAL_TIM_Base_MspInit+0xd4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d114      	bne.n	80019c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 80019a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a4:	6193      	str	r3, [r2, #24]
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2102      	movs	r1, #2
 80019b6:	201b      	movs	r0, #27
 80019b8:	f001 f931 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019bc:	201b      	movs	r0, #27
 80019be:	f001 f94a 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019c2:	e046      	b.n	8001a52 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019cc:	d10c      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
}
 80019e6:	e034      	b.n	8001a52 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <HAL_TIM_Base_MspInit+0xdc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10c      	bne.n	8001a0c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
}
 8001a0a:	e022      	b.n	8001a52 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_TIM_Base_MspInit+0xe0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
}
 8001a2e:	e010      	b.n	8001a52 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_TIM_Base_MspInit+0xe4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10b      	bne.n	8001a52 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_TIM_Base_MspInit+0xd8>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40000800 	.word	0x40000800
 8001a6c:	40000c00 	.word	0x40000c00

08001a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a3d      	ldr	r2, [pc, #244]	; (8001b80 <HAL_TIM_MspPostInit+0x110>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d119      	bne.n	8001ac4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MPPT_PWM_Pin;
 8001aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MPPT_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	4619      	mov	r1, r3
 8001abc:	4832      	ldr	r0, [pc, #200]	; (8001b88 <HAL_TIM_MspPostInit+0x118>)
 8001abe:	f001 fc25 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ac2:	e059      	b.n	8001b78 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a30      	ldr	r2, [pc, #192]	; (8001b8c <HAL_TIM_MspPostInit+0x11c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d118      	bne.n	8001b00 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_PITCH_1_Pin|PWM_PITCH_2_Pin;
 8001ae6:	23c0      	movs	r3, #192	; 0xc0
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2302      	movs	r3, #2
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	4619      	mov	r1, r3
 8001af8:	4823      	ldr	r0, [pc, #140]	; (8001b88 <HAL_TIM_MspPostInit+0x118>)
 8001afa:	f001 fc07 	bl	800330c <HAL_GPIO_Init>
}
 8001afe:	e03b      	b.n	8001b78 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <HAL_TIM_MspPostInit+0x120>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d119      	bne.n	8001b3e <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_YAW_1_Pin|PWM_YAW_2_Pin;
 8001b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	4619      	mov	r1, r3
 8001b36:	4817      	ldr	r0, [pc, #92]	; (8001b94 <HAL_TIM_MspPostInit+0x124>)
 8001b38:	f001 fbe8 	bl	800330c <HAL_GPIO_Init>
}
 8001b3c:	e01c      	b.n	8001b78 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM5)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <HAL_TIM_MspPostInit+0x128>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d117      	bne.n	8001b78 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_TIM_MspPostInit+0x114>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <HAL_TIM_MspPostInit+0x118>)
 8001b74:	f001 fbca 	bl	800330c <HAL_GPIO_Init>
}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800
 8001b94:	40010c00 	.word	0x40010c00
 8001b98:	40000c00 	.word	0x40000c00

08001b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_UART_MspInit+0xf8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d132      	bne.n	8001c22 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a35      	ldr	r2, [pc, #212]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4826      	ldr	r0, [pc, #152]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c02:	f001 fb83 	bl	800330c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4820      	ldr	r0, [pc, #128]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c1c:	f001 fb76 	bl	800330c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c20:	e034      	b.n	8001c8c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_UART_MspInit+0x104>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d12f      	bne.n	8001c8c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480b      	ldr	r0, [pc, #44]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c70:	f001 fb4c 	bl	800330c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c74:	2308      	movs	r3, #8
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c88:	f001 fb40 	bl	800330c <HAL_GPIO_Init>
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40004400 	.word	0x40004400

08001ca4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_FSMC_MspInit+0x78>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d129      	bne.n	8001d14 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_FSMC_MspInit+0x78>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_FSMC_MspInit+0x7c>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_FSMC_MspInit+0x7c>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6153      	str	r3, [r2, #20]
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_FSMC_MspInit+0x7c>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001cde:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001ce2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <HAL_FSMC_MspInit+0x80>)
 8001cf4:	f001 fb0a 	bl	800330c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cf8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001cfc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4806      	ldr	r0, [pc, #24]	; (8001d28 <HAL_FSMC_MspInit+0x84>)
 8001d0e:	f001 fafd 	bl	800330c <HAL_GPIO_Init>
 8001d12:	e000      	b.n	8001d16 <HAL_FSMC_MspInit+0x72>
    return;
 8001d14:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000418 	.word	0x20000418
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40011800 	.word	0x40011800
 8001d28:	40011400 	.word	0x40011400

08001d2c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001d34:	f7ff ffb6 	bl	8001ca4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d86:	f000 f893 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <DMA1_Channel1_IRQHandler+0x10>)
 8001d96:	f001 f84f 	bl	8002e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000068 	.word	0x20000068

08001da4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <ADC1_2_IRQHandler+0x10>)
 8001daa:	f000 fa89 	bl	80022c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000038 	.word	0x20000038

08001db8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <TIM1_CC_IRQHandler+0x10>)
 8001dbe:	f003 fcbd 	bl	800573c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000194 	.word	0x20000194

08001dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 8001dd8:	f7ff fff8 	bl	8001dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ddc:	480b      	ldr	r0, [pc, #44]	; (8001e0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dde:	490c      	ldr	r1, [pc, #48]	; (8001e10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001de0:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001df4:	4c09      	ldr	r4, [pc, #36]	; (8001e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f004 fd19 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e06:	f7fe fbf5 	bl	80005f4 <main>
  bx lr
 8001e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001e14:	080068e0 	.word	0x080068e0
  ldr r2, =_sbss
 8001e18:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001e1c:	20000420 	.word	0x20000420

08001e20 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC3_IRQHandler>
	...

08001e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x28>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x28>)
 8001e2e:	f043 0310 	orr.w	r3, r3, #16
 8001e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 fee7 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fbc8 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40022000 	.word	0x40022000

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 feff 	bl	8002c72 <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f000 fec7 	bl	8002c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000010 	.word	0x20000010
 8001ea8:	20000018 	.word	0x20000018
 8001eac:	20000014 	.word	0x20000014

08001eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_IncTick+0x1c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_IncTick+0x20>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_IncTick+0x20>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000018 	.word	0x20000018
 8001ed0:	2000041c 	.word	0x2000041c

08001ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <HAL_GetTick+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	2000041c 	.word	0x2000041c

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_Delay+0x44>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffe0 	bl	8001ed4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
  {
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000018 	.word	0x20000018

08001f30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0ce      	b.n	80020f0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fb62 	bl	8001638 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fbcf 	bl	8002718 <ADC_ConversionStop_Disable>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80a9 	bne.w	80020de <HAL_ADC_Init+0x1ae>
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80a5 	bne.w	80020de <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f9c:	f023 0302 	bic.w	r3, r3, #2
 8001fa0:	f043 0202 	orr.w	r2, r3, #2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4951      	ldr	r1, [pc, #324]	; (80020f8 <HAL_ADC_Init+0x1c8>)
 8001fb2:	428b      	cmp	r3, r1
 8001fb4:	d10a      	bne.n	8001fcc <HAL_ADC_Init+0x9c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001fbe:	d002      	beq.n	8001fc6 <HAL_ADC_Init+0x96>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	e004      	b.n	8001fd0 <HAL_ADC_Init+0xa0>
 8001fc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001fca:	e001      	b.n	8001fd0 <HAL_ADC_Init+0xa0>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7b1b      	ldrb	r3, [r3, #12]
 8001fd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe8:	d003      	beq.n	8001ff2 <HAL_ADC_Init+0xc2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_ADC_Init+0xc8>
 8001ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_Init+0xca>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7d1b      	ldrb	r3, [r3, #20]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d119      	bne.n	800203c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7b1b      	ldrb	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	3b01      	subs	r3, #1
 8002016:	035a      	lsls	r2, r3, #13
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e00b      	b.n	800203c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_ADC_Init+0x1cc>)
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	430b      	orrs	r3, r1
 8002062:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206c:	d003      	beq.n	8002076 <HAL_ADC_Init+0x146>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d104      	bne.n	8002080 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	3b01      	subs	r3, #1
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	430a      	orrs	r2, r1
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_ADC_Init+0x1d0>)
 800209c:	4013      	ands	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d10b      	bne.n	80020bc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ba:	e018      	b.n	80020ee <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f023 0312 	bic.w	r3, r3, #18
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020dc:	e007      	b.n	80020ee <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40013c00 	.word	0x40013c00
 80020fc:	ffe1f7fd 	.word	0xffe1f7fd
 8002100:	ff1f0efe 	.word	0xff1f0efe

08002104 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a64      	ldr	r2, [pc, #400]	; (80022ac <HAL_ADC_Start_DMA+0x1a8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d004      	beq.n	8002128 <HAL_ADC_Start_DMA+0x24>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_ADC_Start_DMA+0x1ac>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d106      	bne.n	8002136 <HAL_ADC_Start_DMA+0x32>
 8002128:	4b60      	ldr	r3, [pc, #384]	; (80022ac <HAL_ADC_Start_DMA+0x1a8>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f040 80b3 	bne.w	800229c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_ADC_Start_DMA+0x40>
 8002140:	2302      	movs	r3, #2
 8002142:	e0ae      	b.n	80022a2 <HAL_ADC_Start_DMA+0x19e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fa89 	bl	8002664 <ADC_Enable>
 8002152:	4603      	mov	r3, r0
 8002154:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f040 809a 	bne.w	8002292 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a4e      	ldr	r2, [pc, #312]	; (80022b0 <HAL_ADC_Start_DMA+0x1ac>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d105      	bne.n	8002188 <HAL_ADC_Start_DMA+0x84>
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <HAL_ADC_Start_DMA+0x1a8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d115      	bne.n	80021b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d026      	beq.n	80021f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b2:	e01d      	b.n	80021f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a39      	ldr	r2, [pc, #228]	; (80022ac <HAL_ADC_Start_DMA+0x1a8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_ADC_Start_DMA+0xd0>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_ADC_Start_DMA+0x1ac>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d10d      	bne.n	80021f0 <HAL_ADC_Start_DMA+0xec>
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_ADC_Start_DMA+0x1a8>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f023 0206 	bic.w	r2, r3, #6
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
 8002208:	e002      	b.n	8002210 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <HAL_ADC_Start_DMA+0x1b0>)
 800221e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <HAL_ADC_Start_DMA+0x1b4>)
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_ADC_Start_DMA+0x1b8>)
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0202 	mvn.w	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002248:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a18      	ldr	r0, [r3, #32]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	334c      	adds	r3, #76	; 0x4c
 8002254:	4619      	mov	r1, r3
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f000 fd8d 	bl	8002d78 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002268:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800226c:	d108      	bne.n	8002280 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800227c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800227e:	e00f      	b.n	80022a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800228e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002290:	e006      	b.n	80022a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800229a:	e001      	b.n	80022a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40012400 	.word	0x40012400
 80022b0:	40012800 	.word	0x40012800
 80022b4:	0800279b 	.word	0x0800279b
 80022b8:	08002817 	.word	0x08002817
 80022bc:	08002833 	.word	0x08002833

080022c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d03e      	beq.n	8002360 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d039      	beq.n	8002360 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800230e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002312:	d11d      	bne.n	8002350 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002318:	2b00      	cmp	r3, #0
 800231a:	d119      	bne.n	8002350 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0220 	bic.w	r2, r2, #32
 800232a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	f043 0201 	orr.w	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7fe ffb7 	bl	80012c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f06f 0212 	mvn.w	r2, #18
 800235e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d04d      	beq.n	8002406 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d048      	beq.n	8002406 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002396:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800239a:	d012      	beq.n	80023c2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d125      	bne.n	80023f6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023b8:	d11d      	bne.n	80023f6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d119      	bne.n	80023f6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fa35 	bl	8002866 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 020c 	mvn.w	r2, #12
 8002404:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f812 	bl	8002450 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0201 	mvn.w	r2, #1
 8002434:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x20>
 8002490:	2302      	movs	r3, #2
 8002492:	e0dc      	b.n	800264e <HAL_ADC_ConfigChannel+0x1da>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d81c      	bhi.n	80024de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b05      	subs	r3, #5
 80024b6:	221f      	movs	r2, #31
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	4019      	ands	r1, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b05      	subs	r3, #5
 80024d0:	fa00 f203 	lsl.w	r2, r0, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
 80024dc:	e03c      	b.n	8002558 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d81c      	bhi.n	8002520 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b23      	subs	r3, #35	; 0x23
 80024f8:	221f      	movs	r2, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	4019      	ands	r1, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b23      	subs	r3, #35	; 0x23
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
 800251e:	e01b      	b.n	8002558 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	3b41      	subs	r3, #65	; 0x41
 8002532:	221f      	movs	r2, #31
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4019      	ands	r1, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	3b41      	subs	r3, #65	; 0x41
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b09      	cmp	r3, #9
 800255e:	d91c      	bls.n	800259a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	3b1e      	subs	r3, #30
 8002572:	2207      	movs	r2, #7
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	4019      	ands	r1, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6898      	ldr	r0, [r3, #8]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	3b1e      	subs	r3, #30
 800258c:	fa00 f203 	lsl.w	r2, r0, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	e019      	b.n	80025ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6919      	ldr	r1, [r3, #16]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	2207      	movs	r2, #7
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	4019      	ands	r1, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6898      	ldr	r0, [r3, #8]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d003      	beq.n	80025de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025da:	2b11      	cmp	r3, #17
 80025dc:	d132      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_ADC_ConfigChannel+0x1e4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d125      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d126      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002604:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b10      	cmp	r3, #16
 800260c:	d11a      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_ADC_ConfigChannel+0x1e8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_ADC_ConfigChannel+0x1ec>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	0c9a      	lsrs	r2, r3, #18
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002624:	e002      	b.n	800262c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x1b2>
 8002632:	e007      	b.n	8002644 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012400 	.word	0x40012400
 800265c:	20000010 	.word	0x20000010
 8002660:	431bde83 	.word	0x431bde83

08002664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d040      	beq.n	8002704 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <ADC_Enable+0xac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <ADC_Enable+0xb0>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	0c9b      	lsrs	r3, r3, #18
 800269e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026a0:	e002      	b.n	80026a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f9      	bne.n	80026a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ae:	f7ff fc11 	bl	8001ed4 <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026b4:	e01f      	b.n	80026f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026b6:	f7ff fc0d 	bl	8001ed4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d918      	bls.n	80026f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d011      	beq.n	80026f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e007      	b.n	8002706 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d1d8      	bne.n	80026b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000010 	.word	0x20000010
 8002714:	431bde83 	.word	0x431bde83

08002718 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d12e      	bne.n	8002790 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002742:	f7ff fbc7 	bl	8001ed4 <HAL_GetTick>
 8002746:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002748:	e01b      	b.n	8002782 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800274a:	f7ff fbc3 	bl	8001ed4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d914      	bls.n	8002782 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10d      	bne.n	8002782 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f043 0210 	orr.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e007      	b.n	8002792 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d0dc      	beq.n	800274a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d127      	bne.n	8002804 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027ce:	d115      	bne.n	80027fc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7fe fd61 	bl	80012c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002802:	e004      	b.n	800280e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff fe0a 	bl	800243e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff fe02 	bl	8002462 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0ed      	b.n	8002a66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe ff6e 	bl	8001778 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ac:	f7ff fb12 	bl	8001ed4 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028b2:	e012      	b.n	80028da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028b4:	f7ff fb0e 	bl	8001ed4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b0a      	cmp	r3, #10
 80028c0:	d90b      	bls.n	80028da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2205      	movs	r2, #5
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0c5      	b.n	8002a66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0e5      	beq.n	80028b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0202 	bic.w	r2, r2, #2
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f8:	f7ff faec 	bl	8001ed4 <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028fe:	e012      	b.n	8002926 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002900:	f7ff fae8 	bl	8001ed4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b0a      	cmp	r3, #10
 800290c:	d90b      	bls.n	8002926 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2205      	movs	r2, #5
 800291e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e09f      	b.n	8002a66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e5      	bne.n	8002900 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7e1b      	ldrb	r3, [r3, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d108      	bne.n	800294e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e007      	b.n	800295e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7e5b      	ldrb	r3, [r3, #25]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d108      	bne.n	8002978 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e007      	b.n	8002988 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002986:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7e9b      	ldrb	r3, [r3, #26]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d108      	bne.n	80029a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e007      	b.n	80029b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0220 	bic.w	r2, r2, #32
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7edb      	ldrb	r3, [r3, #27]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d108      	bne.n	80029cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0210 	bic.w	r2, r2, #16
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e007      	b.n	80029dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0210 	orr.w	r2, r2, #16
 80029da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7f1b      	ldrb	r3, [r3, #28]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d108      	bne.n	80029f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e007      	b.n	8002a06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0208 	bic.w	r2, r2, #8
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7f5b      	ldrb	r3, [r3, #29]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d108      	bne.n	8002a20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0204 	orr.w	r2, r2, #4
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e007      	b.n	8002a30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0204 	bic.w	r2, r2, #4
 8002a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	ea42 0103 	orr.w	r1, r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	1e5a      	subs	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4906      	ldr	r1, [pc, #24]	; (8002b08 <__NVIC_EnableIRQ+0x34>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
         );
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd4:	d301      	bcc.n	8002bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00f      	b.n	8002bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <SysTick_Config+0x40>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be2:	210f      	movs	r1, #15
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f7ff ff90 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SysTick_Config+0x40>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <SysTick_Config+0x40>)
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff2d 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c30:	f7ff ff42 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7ff ff90 	bl	8002b60 <NVIC_EncodePriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff5f 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff35 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffa2 	bl	8002bc4 <SysTick_Config>
 8002c80:	4603      	mov	r3, r0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e059      	b.n	8002d56 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_DMA_Init+0xd4>)
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d80f      	bhi.n	8002cce <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_DMA_Init+0xd8>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	; (8002d68 <HAL_DMA_Init+0xdc>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	009a      	lsls	r2, r3, #2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <HAL_DMA_Init+0xe0>)
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ccc:	e00e      	b.n	8002cec <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_DMA_Init+0xe4>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_DMA_Init+0xdc>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	009a      	lsls	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_DMA_Init+0xe8>)
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	40020407 	.word	0x40020407
 8002d64:	bffdfff8 	.word	0xbffdfff8
 8002d68:	cccccccd 	.word	0xcccccccd
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	bffdfbf8 	.word	0xbffdfbf8
 8002d74:	40020400 	.word	0x40020400

08002d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Start_IT+0x20>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e04b      	b.n	8002e30 <HAL_DMA_Start_IT+0xb8>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d13a      	bne.n	8002e22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fa6d 	bl	80032b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 020e 	orr.w	r2, r2, #14
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e00f      	b.n	8002e10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0204 	bic.w	r2, r2, #4
 8002dfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 020a 	orr.w	r2, r2, #10
 8002e0e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e005      	b.n	8002e2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2204      	movs	r2, #4
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80f1 	beq.w	8003044 <HAL_DMA_IRQHandler+0x20c>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80eb 	beq.w	8003044 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0204 	bic.w	r2, r2, #4
 8002e8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <HAL_DMA_IRQHandler+0x1d8>)
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d958      	bls.n	8002f4a <HAL_DMA_IRQHandler+0x112>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5d      	ldr	r2, [pc, #372]	; (8003014 <HAL_DMA_IRQHandler+0x1dc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d04f      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x10a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a5c      	ldr	r2, [pc, #368]	; (8003018 <HAL_DMA_IRQHandler+0x1e0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d048      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x106>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a5a      	ldr	r2, [pc, #360]	; (800301c <HAL_DMA_IRQHandler+0x1e4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d040      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x100>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a59      	ldr	r2, [pc, #356]	; (8003020 <HAL_DMA_IRQHandler+0x1e8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d038      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xfa>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a57      	ldr	r2, [pc, #348]	; (8003024 <HAL_DMA_IRQHandler+0x1ec>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d030      	beq.n	8002f2c <HAL_DMA_IRQHandler+0xf4>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a56      	ldr	r2, [pc, #344]	; (8003028 <HAL_DMA_IRQHandler+0x1f0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d028      	beq.n	8002f26 <HAL_DMA_IRQHandler+0xee>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a4d      	ldr	r2, [pc, #308]	; (8003010 <HAL_DMA_IRQHandler+0x1d8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d020      	beq.n	8002f20 <HAL_DMA_IRQHandler+0xe8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a52      	ldr	r2, [pc, #328]	; (800302c <HAL_DMA_IRQHandler+0x1f4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d019      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xe4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a50      	ldr	r2, [pc, #320]	; (8003030 <HAL_DMA_IRQHandler+0x1f8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d012      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xe0>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a4f      	ldr	r2, [pc, #316]	; (8003034 <HAL_DMA_IRQHandler+0x1fc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00a      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xda>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a4d      	ldr	r2, [pc, #308]	; (8003038 <HAL_DMA_IRQHandler+0x200>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d102      	bne.n	8002f0c <HAL_DMA_IRQHandler+0xd4>
 8002f06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f0a:	e01b      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f10:	e018      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f16:	e015      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f18:	2340      	movs	r3, #64	; 0x40
 8002f1a:	e013      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	e011      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f24:	e00e      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f2a:	e00b      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f30:	e008      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f36:	e005      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f3c:	e002      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f3e:	2340      	movs	r3, #64	; 0x40
 8002f40:	e000      	b.n	8002f44 <HAL_DMA_IRQHandler+0x10c>
 8002f42:	2304      	movs	r3, #4
 8002f44:	4a3d      	ldr	r2, [pc, #244]	; (800303c <HAL_DMA_IRQHandler+0x204>)
 8002f46:	6053      	str	r3, [r2, #4]
 8002f48:	e057      	b.n	8002ffa <HAL_DMA_IRQHandler+0x1c2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a31      	ldr	r2, [pc, #196]	; (8003014 <HAL_DMA_IRQHandler+0x1dc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d04f      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x1bc>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2f      	ldr	r2, [pc, #188]	; (8003018 <HAL_DMA_IRQHandler+0x1e0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d048      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x1b8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2e      	ldr	r2, [pc, #184]	; (800301c <HAL_DMA_IRQHandler+0x1e4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d040      	beq.n	8002fea <HAL_DMA_IRQHandler+0x1b2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2c      	ldr	r2, [pc, #176]	; (8003020 <HAL_DMA_IRQHandler+0x1e8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d038      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x1ac>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <HAL_DMA_IRQHandler+0x1ec>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d030      	beq.n	8002fde <HAL_DMA_IRQHandler+0x1a6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_DMA_IRQHandler+0x1f0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d028      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x1a0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_DMA_IRQHandler+0x1d8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d020      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x19a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <HAL_DMA_IRQHandler+0x1f4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d019      	beq.n	8002fce <HAL_DMA_IRQHandler+0x196>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <HAL_DMA_IRQHandler+0x1f8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d012      	beq.n	8002fca <HAL_DMA_IRQHandler+0x192>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <HAL_DMA_IRQHandler+0x1fc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x18c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a21      	ldr	r2, [pc, #132]	; (8003038 <HAL_DMA_IRQHandler+0x200>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d102      	bne.n	8002fbe <HAL_DMA_IRQHandler+0x186>
 8002fb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fbc:	e01b      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fc2:	e018      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fc8:	e015      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fca:	2340      	movs	r3, #64	; 0x40
 8002fcc:	e013      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e011      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fd6:	e00e      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fdc:	e00b      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fe2:	e008      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fe8:	e005      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fee:	e002      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002ff0:	2340      	movs	r3, #64	; 0x40
 8002ff2:	e000      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x1be>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_DMA_IRQHandler+0x208>)
 8002ff8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8136 	beq.w	8003270 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800300c:	e130      	b.n	8003270 <HAL_DMA_IRQHandler+0x438>
 800300e:	bf00      	nop
 8003010:	40020080 	.word	0x40020080
 8003014:	40020008 	.word	0x40020008
 8003018:	4002001c 	.word	0x4002001c
 800301c:	40020030 	.word	0x40020030
 8003020:	40020044 	.word	0x40020044
 8003024:	40020058 	.word	0x40020058
 8003028:	4002006c 	.word	0x4002006c
 800302c:	40020408 	.word	0x40020408
 8003030:	4002041c 	.word	0x4002041c
 8003034:	40020430 	.word	0x40020430
 8003038:	40020444 	.word	0x40020444
 800303c:	40020400 	.word	0x40020400
 8003040:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2202      	movs	r2, #2
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80dd 	beq.w	8003210 <HAL_DMA_IRQHandler+0x3d8>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80d7 	beq.w	8003210 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 020a 	bic.w	r2, r2, #10
 800307e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4b7b      	ldr	r3, [pc, #492]	; (800327c <HAL_DMA_IRQHandler+0x444>)
 8003090:	429a      	cmp	r2, r3
 8003092:	d958      	bls.n	8003146 <HAL_DMA_IRQHandler+0x30e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a79      	ldr	r2, [pc, #484]	; (8003280 <HAL_DMA_IRQHandler+0x448>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d04f      	beq.n	800313e <HAL_DMA_IRQHandler+0x306>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a78      	ldr	r2, [pc, #480]	; (8003284 <HAL_DMA_IRQHandler+0x44c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d048      	beq.n	800313a <HAL_DMA_IRQHandler+0x302>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a76      	ldr	r2, [pc, #472]	; (8003288 <HAL_DMA_IRQHandler+0x450>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d040      	beq.n	8003134 <HAL_DMA_IRQHandler+0x2fc>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a75      	ldr	r2, [pc, #468]	; (800328c <HAL_DMA_IRQHandler+0x454>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d038      	beq.n	800312e <HAL_DMA_IRQHandler+0x2f6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a73      	ldr	r2, [pc, #460]	; (8003290 <HAL_DMA_IRQHandler+0x458>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d030      	beq.n	8003128 <HAL_DMA_IRQHandler+0x2f0>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a72      	ldr	r2, [pc, #456]	; (8003294 <HAL_DMA_IRQHandler+0x45c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d028      	beq.n	8003122 <HAL_DMA_IRQHandler+0x2ea>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a69      	ldr	r2, [pc, #420]	; (800327c <HAL_DMA_IRQHandler+0x444>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d020      	beq.n	800311c <HAL_DMA_IRQHandler+0x2e4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_DMA_IRQHandler+0x460>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d019      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2e0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6c      	ldr	r2, [pc, #432]	; (800329c <HAL_DMA_IRQHandler+0x464>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d012      	beq.n	8003114 <HAL_DMA_IRQHandler+0x2dc>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6b      	ldr	r2, [pc, #428]	; (80032a0 <HAL_DMA_IRQHandler+0x468>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00a      	beq.n	800310e <HAL_DMA_IRQHandler+0x2d6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a69      	ldr	r2, [pc, #420]	; (80032a4 <HAL_DMA_IRQHandler+0x46c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d102      	bne.n	8003108 <HAL_DMA_IRQHandler+0x2d0>
 8003102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003106:	e01b      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 8003108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800310c:	e018      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 800310e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003112:	e015      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 8003114:	2320      	movs	r3, #32
 8003116:	e013      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 8003118:	2302      	movs	r3, #2
 800311a:	e011      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 800311c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003120:	e00e      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 8003122:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003126:	e00b      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 8003128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800312c:	e008      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 800312e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003132:	e005      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 8003134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003138:	e002      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 800313a:	2320      	movs	r3, #32
 800313c:	e000      	b.n	8003140 <HAL_DMA_IRQHandler+0x308>
 800313e:	2302      	movs	r3, #2
 8003140:	4a59      	ldr	r2, [pc, #356]	; (80032a8 <HAL_DMA_IRQHandler+0x470>)
 8003142:	6053      	str	r3, [r2, #4]
 8003144:	e057      	b.n	80031f6 <HAL_DMA_IRQHandler+0x3be>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4d      	ldr	r2, [pc, #308]	; (8003280 <HAL_DMA_IRQHandler+0x448>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d04f      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x3b8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4b      	ldr	r2, [pc, #300]	; (8003284 <HAL_DMA_IRQHandler+0x44c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d048      	beq.n	80031ec <HAL_DMA_IRQHandler+0x3b4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a4a      	ldr	r2, [pc, #296]	; (8003288 <HAL_DMA_IRQHandler+0x450>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d040      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3ae>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a48      	ldr	r2, [pc, #288]	; (800328c <HAL_DMA_IRQHandler+0x454>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d038      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x3a8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a47      	ldr	r2, [pc, #284]	; (8003290 <HAL_DMA_IRQHandler+0x458>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d030      	beq.n	80031da <HAL_DMA_IRQHandler+0x3a2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a45      	ldr	r2, [pc, #276]	; (8003294 <HAL_DMA_IRQHandler+0x45c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d028      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x39c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a3d      	ldr	r2, [pc, #244]	; (800327c <HAL_DMA_IRQHandler+0x444>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d020      	beq.n	80031ce <HAL_DMA_IRQHandler+0x396>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a41      	ldr	r2, [pc, #260]	; (8003298 <HAL_DMA_IRQHandler+0x460>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <HAL_DMA_IRQHandler+0x392>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a40      	ldr	r2, [pc, #256]	; (800329c <HAL_DMA_IRQHandler+0x464>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d012      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x38e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3e      	ldr	r2, [pc, #248]	; (80032a0 <HAL_DMA_IRQHandler+0x468>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x388>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3d      	ldr	r2, [pc, #244]	; (80032a4 <HAL_DMA_IRQHandler+0x46c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d102      	bne.n	80031ba <HAL_DMA_IRQHandler+0x382>
 80031b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031b8:	e01b      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031be:	e018      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c4:	e015      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031c6:	2320      	movs	r3, #32
 80031c8:	e013      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e011      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d2:	e00e      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031d8:	e00b      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031de:	e008      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e4:	e005      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ea:	e002      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031ec:	2320      	movs	r3, #32
 80031ee:	e000      	b.n	80031f2 <HAL_DMA_IRQHandler+0x3ba>
 80031f0:	2302      	movs	r3, #2
 80031f2:	4a2e      	ldr	r2, [pc, #184]	; (80032ac <HAL_DMA_IRQHandler+0x474>)
 80031f4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d034      	beq.n	8003270 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800320e:	e02f      	b.n	8003270 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	2208      	movs	r2, #8
 8003216:	409a      	lsls	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d028      	beq.n	8003272 <HAL_DMA_IRQHandler+0x43a>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d023      	beq.n	8003272 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 020e 	bic.w	r2, r2, #14
 8003238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
    }
  }
  return;
 8003270:	bf00      	nop
 8003272:	bf00      	nop
}
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020080 	.word	0x40020080
 8003280:	40020008 	.word	0x40020008
 8003284:	4002001c 	.word	0x4002001c
 8003288:	40020030 	.word	0x40020030
 800328c:	40020044 	.word	0x40020044
 8003290:	40020058 	.word	0x40020058
 8003294:	4002006c 	.word	0x4002006c
 8003298:	40020408 	.word	0x40020408
 800329c:	4002041c 	.word	0x4002041c
 80032a0:	40020430 	.word	0x40020430
 80032a4:	40020444 	.word	0x40020444
 80032a8:	40020400 	.word	0x40020400
 80032ac:	40020000 	.word	0x40020000

080032b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d108      	bne.n	80032f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ee:	e007      	b.n	8003300 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
	...

0800330c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800330c:	b480      	push	{r7}
 800330e:	b08b      	sub	sp, #44	; 0x2c
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800331e:	e179      	b.n	8003614 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003320:	2201      	movs	r2, #1
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	429a      	cmp	r2, r3
 800333a:	f040 8168 	bne.w	800360e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4a96      	ldr	r2, [pc, #600]	; (800359c <HAL_GPIO_Init+0x290>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d05e      	beq.n	8003406 <HAL_GPIO_Init+0xfa>
 8003348:	4a94      	ldr	r2, [pc, #592]	; (800359c <HAL_GPIO_Init+0x290>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d875      	bhi.n	800343a <HAL_GPIO_Init+0x12e>
 800334e:	4a94      	ldr	r2, [pc, #592]	; (80035a0 <HAL_GPIO_Init+0x294>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d058      	beq.n	8003406 <HAL_GPIO_Init+0xfa>
 8003354:	4a92      	ldr	r2, [pc, #584]	; (80035a0 <HAL_GPIO_Init+0x294>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d86f      	bhi.n	800343a <HAL_GPIO_Init+0x12e>
 800335a:	4a92      	ldr	r2, [pc, #584]	; (80035a4 <HAL_GPIO_Init+0x298>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d052      	beq.n	8003406 <HAL_GPIO_Init+0xfa>
 8003360:	4a90      	ldr	r2, [pc, #576]	; (80035a4 <HAL_GPIO_Init+0x298>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d869      	bhi.n	800343a <HAL_GPIO_Init+0x12e>
 8003366:	4a90      	ldr	r2, [pc, #576]	; (80035a8 <HAL_GPIO_Init+0x29c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04c      	beq.n	8003406 <HAL_GPIO_Init+0xfa>
 800336c:	4a8e      	ldr	r2, [pc, #568]	; (80035a8 <HAL_GPIO_Init+0x29c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d863      	bhi.n	800343a <HAL_GPIO_Init+0x12e>
 8003372:	4a8e      	ldr	r2, [pc, #568]	; (80035ac <HAL_GPIO_Init+0x2a0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d046      	beq.n	8003406 <HAL_GPIO_Init+0xfa>
 8003378:	4a8c      	ldr	r2, [pc, #560]	; (80035ac <HAL_GPIO_Init+0x2a0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d85d      	bhi.n	800343a <HAL_GPIO_Init+0x12e>
 800337e:	2b12      	cmp	r3, #18
 8003380:	d82a      	bhi.n	80033d8 <HAL_GPIO_Init+0xcc>
 8003382:	2b12      	cmp	r3, #18
 8003384:	d859      	bhi.n	800343a <HAL_GPIO_Init+0x12e>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <HAL_GPIO_Init+0x80>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	08003407 	.word	0x08003407
 8003390:	080033e1 	.word	0x080033e1
 8003394:	080033f3 	.word	0x080033f3
 8003398:	08003435 	.word	0x08003435
 800339c:	0800343b 	.word	0x0800343b
 80033a0:	0800343b 	.word	0x0800343b
 80033a4:	0800343b 	.word	0x0800343b
 80033a8:	0800343b 	.word	0x0800343b
 80033ac:	0800343b 	.word	0x0800343b
 80033b0:	0800343b 	.word	0x0800343b
 80033b4:	0800343b 	.word	0x0800343b
 80033b8:	0800343b 	.word	0x0800343b
 80033bc:	0800343b 	.word	0x0800343b
 80033c0:	0800343b 	.word	0x0800343b
 80033c4:	0800343b 	.word	0x0800343b
 80033c8:	0800343b 	.word	0x0800343b
 80033cc:	0800343b 	.word	0x0800343b
 80033d0:	080033e9 	.word	0x080033e9
 80033d4:	080033fd 	.word	0x080033fd
 80033d8:	4a75      	ldr	r2, [pc, #468]	; (80035b0 <HAL_GPIO_Init+0x2a4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033de:	e02c      	b.n	800343a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	623b      	str	r3, [r7, #32]
          break;
 80033e6:	e029      	b.n	800343c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	3304      	adds	r3, #4
 80033ee:	623b      	str	r3, [r7, #32]
          break;
 80033f0:	e024      	b.n	800343c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	3308      	adds	r3, #8
 80033f8:	623b      	str	r3, [r7, #32]
          break;
 80033fa:	e01f      	b.n	800343c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	330c      	adds	r3, #12
 8003402:	623b      	str	r3, [r7, #32]
          break;
 8003404:	e01a      	b.n	800343c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800340e:	2304      	movs	r3, #4
 8003410:	623b      	str	r3, [r7, #32]
          break;
 8003412:	e013      	b.n	800343c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800341c:	2308      	movs	r3, #8
 800341e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	611a      	str	r2, [r3, #16]
          break;
 8003426:	e009      	b.n	800343c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003428:	2308      	movs	r3, #8
 800342a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	615a      	str	r2, [r3, #20]
          break;
 8003432:	e003      	b.n	800343c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]
          break;
 8003438:	e000      	b.n	800343c <HAL_GPIO_Init+0x130>
          break;
 800343a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2bff      	cmp	r3, #255	; 0xff
 8003440:	d801      	bhi.n	8003446 <HAL_GPIO_Init+0x13a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	e001      	b.n	800344a <HAL_GPIO_Init+0x13e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2bff      	cmp	r3, #255	; 0xff
 8003450:	d802      	bhi.n	8003458 <HAL_GPIO_Init+0x14c>
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	e002      	b.n	800345e <HAL_GPIO_Init+0x152>
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	3b08      	subs	r3, #8
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	210f      	movs	r1, #15
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	6a39      	ldr	r1, [r7, #32]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	431a      	orrs	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80c1 	beq.w	800360e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800348c:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_GPIO_Init+0x2a8>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4a48      	ldr	r2, [pc, #288]	; (80035b4 <HAL_GPIO_Init+0x2a8>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6193      	str	r3, [r2, #24]
 8003498:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <HAL_GPIO_Init+0x2a8>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034a4:	4a44      	ldr	r2, [pc, #272]	; (80035b8 <HAL_GPIO_Init+0x2ac>)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	3302      	adds	r3, #2
 80034ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	220f      	movs	r2, #15
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4013      	ands	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a3c      	ldr	r2, [pc, #240]	; (80035bc <HAL_GPIO_Init+0x2b0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01f      	beq.n	8003510 <HAL_GPIO_Init+0x204>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3b      	ldr	r2, [pc, #236]	; (80035c0 <HAL_GPIO_Init+0x2b4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d019      	beq.n	800350c <HAL_GPIO_Init+0x200>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <HAL_GPIO_Init+0x2b8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <HAL_GPIO_Init+0x1fc>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a39      	ldr	r2, [pc, #228]	; (80035c8 <HAL_GPIO_Init+0x2bc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00d      	beq.n	8003504 <HAL_GPIO_Init+0x1f8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a38      	ldr	r2, [pc, #224]	; (80035cc <HAL_GPIO_Init+0x2c0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d007      	beq.n	8003500 <HAL_GPIO_Init+0x1f4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <HAL_GPIO_Init+0x2c4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_GPIO_Init+0x1f0>
 80034f8:	2305      	movs	r3, #5
 80034fa:	e00a      	b.n	8003512 <HAL_GPIO_Init+0x206>
 80034fc:	2306      	movs	r3, #6
 80034fe:	e008      	b.n	8003512 <HAL_GPIO_Init+0x206>
 8003500:	2304      	movs	r3, #4
 8003502:	e006      	b.n	8003512 <HAL_GPIO_Init+0x206>
 8003504:	2303      	movs	r3, #3
 8003506:	e004      	b.n	8003512 <HAL_GPIO_Init+0x206>
 8003508:	2302      	movs	r3, #2
 800350a:	e002      	b.n	8003512 <HAL_GPIO_Init+0x206>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_GPIO_Init+0x206>
 8003510:	2300      	movs	r3, #0
 8003512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003514:	f002 0203 	and.w	r2, r2, #3
 8003518:	0092      	lsls	r2, r2, #2
 800351a:	4093      	lsls	r3, r2
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003522:	4925      	ldr	r1, [pc, #148]	; (80035b8 <HAL_GPIO_Init+0x2ac>)
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	4924      	ldr	r1, [pc, #144]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	608b      	str	r3, [r1, #8]
 8003548:	e006      	b.n	8003558 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	43db      	mvns	r3, r3
 8003552:	4920      	ldr	r1, [pc, #128]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 8003554:	4013      	ands	r3, r2
 8003556:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	491a      	ldr	r1, [pc, #104]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	60cb      	str	r3, [r1, #12]
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	43db      	mvns	r3, r3
 800357a:	4916      	ldr	r1, [pc, #88]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 800357c:	4013      	ands	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d025      	beq.n	80035d8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	4910      	ldr	r1, [pc, #64]	; (80035d4 <HAL_GPIO_Init+0x2c8>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
 8003598:	e025      	b.n	80035e6 <HAL_GPIO_Init+0x2da>
 800359a:	bf00      	nop
 800359c:	10320000 	.word	0x10320000
 80035a0:	10310000 	.word	0x10310000
 80035a4:	10220000 	.word	0x10220000
 80035a8:	10210000 	.word	0x10210000
 80035ac:	10120000 	.word	0x10120000
 80035b0:	10110000 	.word	0x10110000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40010800 	.word	0x40010800
 80035c0:	40010c00 	.word	0x40010c00
 80035c4:	40011000 	.word	0x40011000
 80035c8:	40011400 	.word	0x40011400
 80035cc:	40011800 	.word	0x40011800
 80035d0:	40011c00 	.word	0x40011c00
 80035d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_GPIO_Init+0x324>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	43db      	mvns	r3, r3
 80035e0:	4913      	ldr	r1, [pc, #76]	; (8003630 <HAL_GPIO_Init+0x324>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_GPIO_Init+0x324>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_GPIO_Init+0x324>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
 80035fe:	e006      	b.n	800360e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_GPIO_Init+0x324>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	43db      	mvns	r3, r3
 8003608:	4909      	ldr	r1, [pc, #36]	; (8003630 <HAL_GPIO_Init+0x324>)
 800360a:	4013      	ands	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	fa22 f303 	lsr.w	r3, r2, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	f47f ae7e 	bne.w	8003320 <HAL_GPIO_Init+0x14>
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	372c      	adds	r7, #44	; 0x2c
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003644:	787b      	ldrb	r3, [r7, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003650:	e003      	b.n	800365a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	041a      	lsls	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e12b      	b.n	80038ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe f8c0 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036c8:	f000 fce6 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 80036cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4a81      	ldr	r2, [pc, #516]	; (80038d8 <HAL_I2C_Init+0x274>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d807      	bhi.n	80036e8 <HAL_I2C_Init+0x84>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a80      	ldr	r2, [pc, #512]	; (80038dc <HAL_I2C_Init+0x278>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	bf94      	ite	ls
 80036e0:	2301      	movls	r3, #1
 80036e2:	2300      	movhi	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e006      	b.n	80036f6 <HAL_I2C_Init+0x92>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a7d      	ldr	r2, [pc, #500]	; (80038e0 <HAL_I2C_Init+0x27c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bf94      	ite	ls
 80036f0:	2301      	movls	r3, #1
 80036f2:	2300      	movhi	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e0e7      	b.n	80038ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a78      	ldr	r2, [pc, #480]	; (80038e4 <HAL_I2C_Init+0x280>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0c9b      	lsrs	r3, r3, #18
 8003708:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a6a      	ldr	r2, [pc, #424]	; (80038d8 <HAL_I2C_Init+0x274>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d802      	bhi.n	8003738 <HAL_I2C_Init+0xd4>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3301      	adds	r3, #1
 8003736:	e009      	b.n	800374c <HAL_I2C_Init+0xe8>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	4a69      	ldr	r2, [pc, #420]	; (80038e8 <HAL_I2C_Init+0x284>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	3301      	adds	r3, #1
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	430b      	orrs	r3, r1
 8003752:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800375e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	495c      	ldr	r1, [pc, #368]	; (80038d8 <HAL_I2C_Init+0x274>)
 8003768:	428b      	cmp	r3, r1
 800376a:	d819      	bhi.n	80037a0 <HAL_I2C_Init+0x13c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e59      	subs	r1, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fbb1 f3f3 	udiv	r3, r1, r3
 800377a:	1c59      	adds	r1, r3, #1
 800377c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003780:	400b      	ands	r3, r1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_I2C_Init+0x138>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1e59      	subs	r1, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fbb1 f3f3 	udiv	r3, r1, r3
 8003794:	3301      	adds	r3, #1
 8003796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379a:	e051      	b.n	8003840 <HAL_I2C_Init+0x1dc>
 800379c:	2304      	movs	r3, #4
 800379e:	e04f      	b.n	8003840 <HAL_I2C_Init+0x1dc>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <HAL_I2C_Init+0x168>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e58      	subs	r0, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	440b      	add	r3, r1
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e012      	b.n	80037f2 <HAL_I2C_Init+0x18e>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e58      	subs	r0, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	0099      	lsls	r1, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Init+0x196>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e022      	b.n	8003840 <HAL_I2C_Init+0x1dc>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10e      	bne.n	8003820 <HAL_I2C_Init+0x1bc>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1e58      	subs	r0, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	440b      	add	r3, r1
 8003810:	fbb0 f3f3 	udiv	r3, r0, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381e:	e00f      	b.n	8003840 <HAL_I2C_Init+0x1dc>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e58      	subs	r0, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	0099      	lsls	r1, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	fbb0 f3f3 	udiv	r3, r0, r3
 8003836:	3301      	adds	r3, #1
 8003838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	6809      	ldr	r1, [r1, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800386e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6911      	ldr	r1, [r2, #16]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	000186a0 	.word	0x000186a0
 80038dc:	001e847f 	.word	0x001e847f
 80038e0:	003d08ff 	.word	0x003d08ff
 80038e4:	431bde83 	.word	0x431bde83
 80038e8:	10624dd3 	.word	0x10624dd3

080038ec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_PWR_EnableBkUpAccess+0x14>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	420e0020 	.word	0x420e0020

08003904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e272      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8087 	beq.w	8003a32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003924:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b04      	cmp	r3, #4
 800392e:	d00c      	beq.n	800394a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003930:	4b8f      	ldr	r3, [pc, #572]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d112      	bne.n	8003962 <HAL_RCC_OscConfig+0x5e>
 800393c:	4b8c      	ldr	r3, [pc, #560]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003948:	d10b      	bne.n	8003962 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394a:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d06c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x12c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d168      	bne.n	8003a30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e24c      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x76>
 800396c:	4b80      	ldr	r3, [pc, #512]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7f      	ldr	r2, [pc, #508]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e02e      	b.n	80039d8 <HAL_RCC_OscConfig+0xd4>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x98>
 8003982:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7a      	ldr	r2, [pc, #488]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b78      	ldr	r3, [pc, #480]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a77      	ldr	r2, [pc, #476]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e01d      	b.n	80039d8 <HAL_RCC_OscConfig+0xd4>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0xbc>
 80039a6:	4b72      	ldr	r3, [pc, #456]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a71      	ldr	r2, [pc, #452]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6e      	ldr	r2, [pc, #440]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e00b      	b.n	80039d8 <HAL_RCC_OscConfig+0xd4>
 80039c0:	4b6b      	ldr	r3, [pc, #428]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a6a      	ldr	r2, [pc, #424]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a67      	ldr	r2, [pc, #412]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fe fa78 	bl	8001ed4 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe fa74 	bl	8001ed4 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e200      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b5d      	ldr	r3, [pc, #372]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe4>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fa64 	bl	8001ed4 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fe fa60 	bl	8001ed4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1ec      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x10c>
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d063      	beq.n	8003b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a3e:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a4a:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d11c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x18c>
 8003a56:	4b46      	ldr	r3, [pc, #280]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a62:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_RCC_OscConfig+0x176>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e1c0      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4939      	ldr	r1, [pc, #228]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	e03a      	b.n	8003b06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <HAL_RCC_OscConfig+0x270>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fa19 	bl	8001ed4 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa6:	f7fe fa15 	bl	8001ed4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e1a1      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4927      	ldr	r1, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]
 8003ad8:	e015      	b.n	8003b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ada:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <HAL_RCC_OscConfig+0x270>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fe f9f8 	bl	8001ed4 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe f9f4 	bl	8001ed4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e180      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d03a      	beq.n	8003b88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d019      	beq.n	8003b4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b20:	f7fe f9d8 	bl	8001ed4 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fe f9d4 	bl	8001ed4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e160      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b46:	2001      	movs	r0, #1
 8003b48:	f000 face 	bl	80040e8 <RCC_Delay>
 8003b4c:	e01c      	b.n	8003b88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <HAL_RCC_OscConfig+0x274>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b54:	f7fe f9be 	bl	8001ed4 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5a:	e00f      	b.n	8003b7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fe f9ba 	bl	8001ed4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d908      	bls.n	8003b7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e146      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	42420000 	.word	0x42420000
 8003b78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7c:	4b92      	ldr	r3, [pc, #584]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e9      	bne.n	8003b5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80a6 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9a:	4b8b      	ldr	r3, [pc, #556]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	4b88      	ldr	r3, [pc, #544]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	4a87      	ldr	r2, [pc, #540]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	61d3      	str	r3, [r2, #28]
 8003bb2:	4b85      	ldr	r3, [pc, #532]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b82      	ldr	r3, [pc, #520]	; (8003dcc <HAL_RCC_OscConfig+0x4c8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d118      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bce:	4b7f      	ldr	r3, [pc, #508]	; (8003dcc <HAL_RCC_OscConfig+0x4c8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a7e      	ldr	r2, [pc, #504]	; (8003dcc <HAL_RCC_OscConfig+0x4c8>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bda:	f7fe f97b 	bl	8001ed4 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fe f977 	bl	8001ed4 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b64      	cmp	r3, #100	; 0x64
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e103      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <HAL_RCC_OscConfig+0x4c8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x312>
 8003c08:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4a6e      	ldr	r2, [pc, #440]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6213      	str	r3, [r2, #32]
 8003c14:	e02d      	b.n	8003c72 <HAL_RCC_OscConfig+0x36e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x334>
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a69      	ldr	r2, [pc, #420]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6213      	str	r3, [r2, #32]
 8003c2a:	4b67      	ldr	r3, [pc, #412]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4a66      	ldr	r2, [pc, #408]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	6213      	str	r3, [r2, #32]
 8003c36:	e01c      	b.n	8003c72 <HAL_RCC_OscConfig+0x36e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d10c      	bne.n	8003c5a <HAL_RCC_OscConfig+0x356>
 8003c40:	4b61      	ldr	r3, [pc, #388]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	4a60      	ldr	r2, [pc, #384]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	6213      	str	r3, [r2, #32]
 8003c4c:	4b5e      	ldr	r3, [pc, #376]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	4a5d      	ldr	r2, [pc, #372]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6213      	str	r3, [r2, #32]
 8003c58:	e00b      	b.n	8003c72 <HAL_RCC_OscConfig+0x36e>
 8003c5a:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4a5a      	ldr	r2, [pc, #360]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6213      	str	r3, [r2, #32]
 8003c66:	4b58      	ldr	r3, [pc, #352]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4a57      	ldr	r2, [pc, #348]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d015      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7fe f92b 	bl	8001ed4 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fe f927 	bl	8001ed4 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e0b1      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ee      	beq.n	8003c82 <HAL_RCC_OscConfig+0x37e>
 8003ca4:	e014      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fe f915 	bl	8001ed4 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fe f911 	bl	8001ed4 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e09b      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc4:	4b40      	ldr	r3, [pc, #256]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ee      	bne.n	8003cae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd6:	4b3c      	ldr	r3, [pc, #240]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4a3b      	ldr	r2, [pc, #236]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8087 	beq.w	8003dfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cec:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d061      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d146      	bne.n	8003d8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d00:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fe f8e5 	bl	8001ed4 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fe f8e1 	bl	8001ed4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e06d      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d20:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d108      	bne.n	8003d48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	4921      	ldr	r1, [pc, #132]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d48:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a19      	ldr	r1, [r3, #32]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	491b      	ldr	r1, [pc, #108]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x4cc>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe f8b5 	bl	8001ed4 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fe f8b1 	bl	8001ed4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e03d      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x46a>
 8003d8c:	e035      	b.n	8003dfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_RCC_OscConfig+0x4cc>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe f89e 	bl	8001ed4 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fe f89a 	bl	8001ed4 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e026      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x498>
 8003dba:	e01e      	b.n	8003dfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e019      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_OscConfig+0x500>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000

08003e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0d0      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b6a      	ldr	r3, [pc, #424]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d910      	bls.n	8003e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b67      	ldr	r3, [pc, #412]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 0207 	bic.w	r2, r3, #7
 8003e32:	4965      	ldr	r1, [pc, #404]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0b8      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e64:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e7c:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a52      	ldr	r2, [pc, #328]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	494d      	ldr	r1, [pc, #308]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d040      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d107      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d115      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e07f      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec6:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e073      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06b      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee6:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f023 0203 	bic.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4936      	ldr	r1, [pc, #216]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef8:	f7fd ffec 	bl	8001ed4 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fd ffe8 	bl	8001ed4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e053      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f16:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 020c 	and.w	r2, r3, #12
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d1eb      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f28:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d210      	bcs.n	8003f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 0207 	bic.w	r2, r3, #7
 8003f3e:	4922      	ldr	r1, [pc, #136]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e032      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f64:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4916      	ldr	r1, [pc, #88]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	490e      	ldr	r1, [pc, #56]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f96:	f000 f821 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	490a      	ldr	r1, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	5ccb      	ldrb	r3, [r1, r3]
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd ff4a 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	08006898 	.word	0x08006898
 8003fd4:	20000010 	.word	0x20000010
 8003fd8:	20000014 	.word	0x20000014

08003fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b04      	cmp	r3, #4
 8004004:	d002      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x30>
 8004006:	2b08      	cmp	r3, #8
 8004008:	d003      	beq.n	8004012 <HAL_RCC_GetSysClockFreq+0x36>
 800400a:	e027      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800400c:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_RCC_GetSysClockFreq+0x98>)
 800400e:	613b      	str	r3, [r7, #16]
      break;
 8004010:	e027      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	0c9b      	lsrs	r3, r3, #18
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	4a17      	ldr	r2, [pc, #92]	; (8004078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800401c:	5cd3      	ldrb	r3, [r2, r3]
 800401e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d010      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <HAL_RCC_GetSysClockFreq+0x94>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	0c5b      	lsrs	r3, r3, #17
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <HAL_RCC_GetSysClockFreq+0x98>)
 800403e:	fb03 f202 	mul.w	r2, r3, r2
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	e004      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a0c      	ldr	r2, [pc, #48]	; (8004080 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	613b      	str	r3, [r7, #16]
      break;
 800405a:	e002      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetSysClockFreq+0x98>)
 800405e:	613b      	str	r3, [r7, #16]
      break;
 8004060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004062:	693b      	ldr	r3, [r7, #16]
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
 8004074:	007a1200 	.word	0x007a1200
 8004078:	080068b0 	.word	0x080068b0
 800407c:	080068c0 	.word	0x080068c0
 8004080:	003d0900 	.word	0x003d0900

08004084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004088:	4b02      	ldr	r3, [pc, #8]	; (8004094 <HAL_RCC_GetHCLKFreq+0x10>)
 800408a:	681b      	ldr	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	20000010 	.word	0x20000010

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800409c:	f7ff fff2 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4903      	ldr	r1, [pc, #12]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	080068a8 	.word	0x080068a8

080040c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c4:	f7ff ffde 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	0adb      	lsrs	r3, r3, #11
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	; (80040e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	080068a8 	.word	0x080068a8

080040e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <RCC_Delay+0x34>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <RCC_Delay+0x38>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0a5b      	lsrs	r3, r3, #9
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004104:	bf00      	nop
  }
  while (Delay --);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e5a      	subs	r2, r3, #1
 800410a:	60fa      	str	r2, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f9      	bne.n	8004104 <RCC_Delay+0x1c>
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	20000010 	.word	0x20000010
 8004120:	10624dd3 	.word	0x10624dd3

08004124 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d07d      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004144:	4b4f      	ldr	r3, [pc, #316]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004150:	4b4c      	ldr	r3, [pc, #304]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	4a4b      	ldr	r2, [pc, #300]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415a:	61d3      	str	r3, [r2, #28]
 800415c:	4b49      	ldr	r3, [pc, #292]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004168:	2301      	movs	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	4b46      	ldr	r3, [pc, #280]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d118      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a42      	ldr	r2, [pc, #264]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004184:	f7fd fea6 	bl	8001ed4 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	e008      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418c:	f7fd fea2 	bl	8001ed4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e06d      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02e      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d027      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041d8:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041de:	4a29      	ldr	r2, [pc, #164]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d014      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fd fe71 	bl	8001ed4 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fd fe6d 	bl	8001ed4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	; 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e036      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ee      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004218:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4917      	ldr	r1, [pc, #92]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004226:	4313      	orrs	r3, r2
 8004228:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004230:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	4a13      	ldr	r2, [pc, #76]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	490b      	ldr	r1, [pc, #44]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004256:	4313      	orrs	r3, r2
 8004258:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4904      	ldr	r1, [pc, #16]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	40007000 	.word	0x40007000
 800428c:	42420440 	.word	0x42420440

08004290 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	2b0f      	cmp	r3, #15
 80042b2:	f200 80af 	bhi.w	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	08004393 	.word	0x08004393
 80042c0:	080043f9 	.word	0x080043f9
 80042c4:	08004415 	.word	0x08004415
 80042c8:	08004383 	.word	0x08004383
 80042cc:	08004415 	.word	0x08004415
 80042d0:	08004415 	.word	0x08004415
 80042d4:	08004415 	.word	0x08004415
 80042d8:	0800438b 	.word	0x0800438b
 80042dc:	08004415 	.word	0x08004415
 80042e0:	08004415 	.word	0x08004415
 80042e4:	08004415 	.word	0x08004415
 80042e8:	08004415 	.word	0x08004415
 80042ec:	08004415 	.word	0x08004415
 80042f0:	08004415 	.word	0x08004415
 80042f4:	08004415 	.word	0x08004415
 80042f8:	080042fd 	.word	0x080042fd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80042fc:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004302:	4b49      	ldr	r3, [pc, #292]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8084 	beq.w	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	0c9b      	lsrs	r3, r3, #18
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	4a44      	ldr	r2, [pc, #272]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800431a:	5cd3      	ldrb	r3, [r2, r3]
 800431c:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004328:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	0c5b      	lsrs	r3, r3, #17
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	4a3f      	ldr	r2, [pc, #252]	; (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004334:	5cd3      	ldrb	r3, [r2, r3]
 8004336:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00d      	beq.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004342:	4a3c      	ldr	r2, [pc, #240]	; (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fbb2 f2f3 	udiv	r2, r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	e004      	b.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4a38      	ldr	r2, [pc, #224]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8004358:	fb02 f303 	mul.w	r3, r2, r3
 800435c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436a:	d102      	bne.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004370:	e052      	b.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4a31      	ldr	r2, [pc, #196]	; (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	61bb      	str	r3, [r7, #24]
      break;
 8004380:	e04a      	b.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004382:	f7ff fe2b 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8004386:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004388:	e049      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800438a:	f7ff fe27 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 800438e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004390:	e045      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004392:	4b25      	ldr	r3, [pc, #148]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d108      	bne.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80043ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	e01f      	b.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c0:	d109      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043c2:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80043ce:	f649 4340 	movw	r3, #40000	; 0x9c40
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e00f      	b.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e0:	d11c      	bne.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80043ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043f2:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80043f4:	e012      	b.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80043f6:	e011      	b.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043f8:	f7ff fe62 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	0b9b      	lsrs	r3, r3, #14
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	3301      	adds	r3, #1
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	61bb      	str	r3, [r7, #24]
      break;
 8004412:	e004      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8004414:	bf00      	nop
 8004416:	e002      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800441c:	bf00      	nop
    }
  }
  return (frequency);
 800441e:	69bb      	ldr	r3, [r7, #24]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	080068c4 	.word	0x080068c4
 8004430:	080068d4 	.word	0x080068d4
 8004434:	007a1200 	.word	0x007a1200
 8004438:	003d0900 	.word	0x003d0900
 800443c:	aaaaaaab 	.word	0xaaaaaaab

08004440 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e07a      	b.n	800454c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	7c5b      	ldrb	r3, [r3, #17]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd fa10 	bl	800188c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fb2f 	bl	8004ad6 <HAL_RTC_WaitForSynchro>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d004      	beq.n	8004488 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2204      	movs	r2, #4
 8004482:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e061      	b.n	800454c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fbe8 	bl	8004c5e <RTC_EnterInitMode>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2204      	movs	r2, #4
 8004498:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e056      	b.n	800454c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0207 	bic.w	r2, r2, #7
 80044ac:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <HAL_RTC_Init+0x114>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a26      	ldr	r2, [pc, #152]	; (8004554 <HAL_RTC_Init+0x114>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80044c2:	4b24      	ldr	r3, [pc, #144]	; (8004554 <HAL_RTC_Init+0x114>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	4921      	ldr	r1, [pc, #132]	; (8004554 <HAL_RTC_Init+0x114>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d003      	beq.n	80044e6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e00e      	b.n	8004504 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80044e6:	2001      	movs	r0, #1
 80044e8:	f7ff fed2 	bl	8004290 <HAL_RCCEx_GetPeriphCLKFreq>
 80044ec:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2204      	movs	r2, #4
 80044f8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e026      	b.n	800454c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b01      	subs	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	0c1a      	lsrs	r2, r3, #16
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f002 020f 	and.w	r2, r2, #15
 8004510:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	b292      	uxth	r2, r2
 800451a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fbc6 	bl	8004cae <RTC_ExitInitMode>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2204      	movs	r2, #4
 800452c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e00c      	b.n	800454c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800454a:	2300      	movs	r3, #0
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40006c00 	.word	0x40006c00

08004558 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_RTC_SetTime+0x20>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e080      	b.n	800467e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	7c1b      	ldrb	r3, [r3, #16]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_RTC_SetTime+0x30>
 8004584:	2302      	movs	r3, #2
 8004586:	e07a      	b.n	800467e <HAL_RTC_SetTime+0x126>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2202      	movs	r2, #2
 8004592:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d113      	bne.n	80045c2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80045a4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	4619      	mov	r1, r3
 80045ae:	460b      	mov	r3, r1
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a5b      	subs	r3, r3, r1
 80045b4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80045b6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80045bc:	4413      	add	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e01e      	b.n	8004600 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fbb6 	bl	8004d38 <RTC_Bcd2ToByte>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80045d4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	785b      	ldrb	r3, [r3, #1]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fbab 	bl	8004d38 <RTC_Bcd2ToByte>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80045ee:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	789b      	ldrb	r3, [r3, #2]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fb9f 	bl	8004d38 <RTC_Bcd2ToByte>
 80045fa:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80045fc:	4423      	add	r3, r4
 80045fe:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004600:	6979      	ldr	r1, [r7, #20]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fac4 	bl	8004b90 <RTC_WriteTimeCounter>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2204      	movs	r2, #4
 8004612:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e02f      	b.n	800467e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0205 	bic.w	r2, r2, #5
 800462c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fad5 	bl	8004bde <RTC_ReadAlarmCounter>
 8004634:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d018      	beq.n	8004670 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	429a      	cmp	r2, r3
 8004644:	d214      	bcs.n	8004670 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800464c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004650:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004652:	6939      	ldr	r1, [r7, #16]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fadb 	bl	8004c10 <RTC_WriteAlarmCounter>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2204      	movs	r2, #4
 8004664:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e006      	b.n	800467e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800467c:	2300      	movs	r3, #0
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}
	...

08004688 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_RTC_GetTime+0x28>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0b5      	b.n	8004820 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0ac      	b.n	8004820 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fa32 	bl	8004b30 <RTC_ReadTimeCounter>
 80046cc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	4a55      	ldr	r2, [pc, #340]	; (8004828 <HAL_RTC_GetTime+0x1a0>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	0adb      	lsrs	r3, r3, #11
 80046d8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4b52      	ldr	r3, [pc, #328]	; (8004828 <HAL_RTC_GetTime+0x1a0>)
 80046de:	fba3 1302 	umull	r1, r3, r3, r2
 80046e2:	0adb      	lsrs	r3, r3, #11
 80046e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	4a4f      	ldr	r2, [pc, #316]	; (800482c <HAL_RTC_GetTime+0x1a4>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <HAL_RTC_GetTime+0x1a0>)
 8004700:	fba2 1203 	umull	r1, r2, r2, r3
 8004704:	0ad2      	lsrs	r2, r2, #11
 8004706:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800470a:	fb01 f202 	mul.w	r2, r1, r2
 800470e:	1a9a      	subs	r2, r3, r2
 8004710:	4b46      	ldr	r3, [pc, #280]	; (800482c <HAL_RTC_GetTime+0x1a4>)
 8004712:	fba3 1302 	umull	r1, r3, r3, r2
 8004716:	0959      	lsrs	r1, r3, #5
 8004718:	460b      	mov	r3, r1
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a5b      	subs	r3, r3, r1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	1ad1      	subs	r1, r2, r3
 8004722:	b2ca      	uxtb	r2, r1
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b17      	cmp	r3, #23
 800472c:	d955      	bls.n	80047da <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4a3f      	ldr	r2, [pc, #252]	; (8004830 <HAL_RTC_GetTime+0x1a8>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800473a:	6939      	ldr	r1, [r7, #16]
 800473c:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <HAL_RTC_GetTime+0x1a8>)
 800473e:	fba3 2301 	umull	r2, r3, r3, r1
 8004742:	091a      	lsrs	r2, r3, #4
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	1aca      	subs	r2, r1, r3
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fa42 	bl	8004bde <RTC_ReadAlarmCounter>
 800475a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d008      	beq.n	8004776 <HAL_RTC_GetTime+0xee>
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	429a      	cmp	r2, r3
 800476a:	d904      	bls.n	8004776 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	e002      	b.n	800477c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004776:	f04f 33ff 	mov.w	r3, #4294967295
 800477a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <HAL_RTC_GetTime+0x1ac>)
 8004780:	fb02 f303 	mul.w	r3, r2, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800478a:	69b9      	ldr	r1, [r7, #24]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f9ff 	bl	8004b90 <RTC_WriteTimeCounter>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e041      	b.n	8004820 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a2:	d00c      	beq.n	80047be <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4413      	add	r3, r2
 80047aa:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80047ac:	69f9      	ldr	r1, [r7, #28]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa2e 	bl	8004c10 <RTC_WriteAlarmCounter>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e030      	b.n	8004820 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80047be:	69f9      	ldr	r1, [r7, #28]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fa25 	bl	8004c10 <RTC_WriteAlarmCounter>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e027      	b.n	8004820 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80047d0:	6979      	ldr	r1, [r7, #20]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 facd 	bl	8004d72 <RTC_DateUpdate>
 80047d8:	e003      	b.n	80047e2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01a      	beq.n	800481e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fa86 	bl	8004cfe <RTC_ByteToBcd2>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fa7d 	bl	8004cfe <RTC_ByteToBcd2>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	789b      	ldrb	r3, [r3, #2]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fa74 	bl	8004cfe <RTC_ByteToBcd2>
 8004816:	4603      	mov	r3, r0
 8004818:	461a      	mov	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	91a2b3c5 	.word	0x91a2b3c5
 800482c:	88888889 	.word	0x88888889
 8004830:	aaaaaaab 	.word	0xaaaaaaab
 8004834:	00015180 	.word	0x00015180

08004838 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_RTC_SetDate+0x24>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e097      	b.n	8004990 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	7c1b      	ldrb	r3, [r3, #16]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_RTC_SetDate+0x34>
 8004868:	2302      	movs	r3, #2
 800486a:	e091      	b.n	8004990 <HAL_RTC_SetDate+0x158>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2202      	movs	r2, #2
 8004876:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10c      	bne.n	8004898 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	78da      	ldrb	r2, [r3, #3]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	785a      	ldrb	r2, [r3, #1]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	789a      	ldrb	r2, [r3, #2]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	739a      	strb	r2, [r3, #14]
 8004896:	e01a      	b.n	80048ce <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	78db      	ldrb	r3, [r3, #3]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fa4b 	bl	8004d38 <RTC_Bcd2ToByte>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461a      	mov	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fa42 	bl	8004d38 <RTC_Bcd2ToByte>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	789b      	ldrb	r3, [r3, #2]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fa39 	bl	8004d38 <RTC_Bcd2ToByte>
 80048c6:	4603      	mov	r3, r0
 80048c8:	461a      	mov	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	7bdb      	ldrb	r3, [r3, #15]
 80048d2:	4618      	mov	r0, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	7b59      	ldrb	r1, [r3, #13]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	7b9b      	ldrb	r3, [r3, #14]
 80048dc:	461a      	mov	r2, r3
 80048de:	f000 fb23 	bl	8004f28 <RTC_WeekDayNum>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461a      	mov	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	7b1a      	ldrb	r2, [r3, #12]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f91c 	bl	8004b30 <RTC_ReadTimeCounter>
 80048f8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_RTC_SetDate+0x160>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0adb      	lsrs	r3, r3, #11
 8004904:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b18      	cmp	r3, #24
 800490a:	d93a      	bls.n	8004982 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4a23      	ldr	r2, [pc, #140]	; (800499c <HAL_RTC_SetDate+0x164>)
 8004910:	fba2 2303 	umull	r2, r3, r2, r3
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_RTC_SetDate+0x168>)
 8004918:	fb02 f303 	mul.w	r3, r2, r3
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004922:	69f9      	ldr	r1, [r7, #28]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f933 	bl	8004b90 <RTC_WriteTimeCounter>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2204      	movs	r2, #4
 8004934:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e027      	b.n	8004990 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f94c 	bl	8004bde <RTC_ReadAlarmCounter>
 8004946:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d018      	beq.n	8004982 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	429a      	cmp	r2, r3
 8004956:	d214      	bcs.n	8004982 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800495e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004962:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f952 	bl	8004c10 <RTC_WriteAlarmCounter>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2204      	movs	r2, #4
 8004976:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e006      	b.n	8004990 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	91a2b3c5 	.word	0x91a2b3c5
 800499c:	aaaaaaab 	.word	0xaaaaaaab
 80049a0:	00015180 	.word	0x00015180

080049a4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b089      	sub	sp, #36	; 0x24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	2100      	movs	r1, #0
 80049ba:	460a      	mov	r2, r1
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	460a      	mov	r2, r1
 80049c0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_RTC_SetAlarm+0x2a>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e07d      	b.n	8004ace <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	7c1b      	ldrb	r3, [r3, #16]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_RTC_SetAlarm+0x3a>
 80049da:	2302      	movs	r3, #2
 80049dc:	e077      	b.n	8004ace <HAL_RTC_SetAlarm+0x12a>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2202      	movs	r2, #2
 80049e8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	2200      	movs	r2, #0
 80049f0:	4619      	mov	r1, r3
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff fe48 	bl	8004688 <HAL_RTC_GetTime>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e065      	b.n	8004ace <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a02:	7d3b      	ldrb	r3, [r7, #20]
 8004a04:	461a      	mov	r2, r3
 8004a06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a0a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004a0e:	7d7b      	ldrb	r3, [r7, #21]
 8004a10:	4619      	mov	r1, r3
 8004a12:	460b      	mov	r3, r1
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	1a5b      	subs	r3, r3, r1
 8004a18:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a1a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004a1c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a1e:	4413      	add	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d113      	bne.n	8004a50 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a32:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a5b      	subs	r3, r3, r1
 8004a42:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004a44:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004a4a:	4413      	add	r3, r2
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	e01e      	b.n	8004a8e <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 f96f 	bl	8004d38 <RTC_Bcd2ToByte>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a62:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f964 	bl	8004d38 <RTC_Bcd2ToByte>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004a7c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	789b      	ldrb	r3, [r3, #2]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f958 	bl	8004d38 <RTC_Bcd2ToByte>
 8004a88:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004a8a:	4423      	add	r3, r4
 8004a8c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d205      	bcs.n	8004aa2 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004a9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004aa0:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f8b3 	bl	8004c10 <RTC_WriteAlarmCounter>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e006      	b.n	8004ace <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3724      	adds	r7, #36	; 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd90      	pop	{r4, r7, pc}

08004ad6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e01d      	b.n	8004b28 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0208 	bic.w	r2, r2, #8
 8004afa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004afc:	f7fd f9ea 	bl	8001ed4 <HAL_GetTick>
 8004b00:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004b02:	e009      	b.n	8004b18 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b04:	f7fd f9e6 	bl	8001ed4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b12:	d901      	bls.n	8004b18 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e007      	b.n	8004b28 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0ee      	beq.n	8004b04 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	827b      	strh	r3, [r7, #18]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	823b      	strh	r3, [r7, #16]
 8004b40:	2300      	movs	r3, #0
 8004b42:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004b60:	8a7a      	ldrh	r2, [r7, #18]
 8004b62:	8a3b      	ldrh	r3, [r7, #16]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d008      	beq.n	8004b7a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004b68:	8a3b      	ldrh	r3, [r7, #16]
 8004b6a:	041a      	lsls	r2, r3, #16
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e004      	b.n	8004b84 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004b7a:	8a7b      	ldrh	r3, [r7, #18]
 8004b7c:	041a      	lsls	r2, r3, #16
 8004b7e:	89fb      	ldrh	r3, [r7, #14]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004b84:	697b      	ldr	r3, [r7, #20]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f85d 	bl	8004c5e <RTC_EnterInitMode>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
 8004bae:	e011      	b.n	8004bd4 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	0c12      	lsrs	r2, r2, #16
 8004bb8:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f872 	bl	8004cae <RTC_ExitInitMode>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	81fb      	strh	r3, [r7, #14]
 8004bea:	2300      	movs	r3, #0
 8004bec:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004bfe:	89fb      	ldrh	r3, [r7, #14]
 8004c00:	041a      	lsls	r2, r3, #16
 8004c02:	89bb      	ldrh	r3, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f81d 	bl	8004c5e <RTC_EnterInitMode>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e011      	b.n	8004c54 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	0c12      	lsrs	r2, r2, #16
 8004c38:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	b292      	uxth	r2, r2
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f832 	bl	8004cae <RTC_ExitInitMode>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004c6a:	f7fd f933 	bl	8001ed4 <HAL_GetTick>
 8004c6e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c70:	e009      	b.n	8004c86 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c72:	f7fd f92f 	bl	8001ed4 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c80:	d901      	bls.n	8004c86 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e00f      	b.n	8004ca6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ee      	beq.n	8004c72 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0210 	orr.w	r2, r2, #16
 8004ca2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0210 	bic.w	r2, r2, #16
 8004cc8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004cca:	f7fd f903 	bl	8001ed4 <HAL_GetTick>
 8004cce:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004cd0:	e009      	b.n	8004ce6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004cd2:	f7fd f8ff 	bl	8001ed4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce0:	d901      	bls.n	8004ce6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e007      	b.n	8004cf6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0ee      	beq.n	8004cd2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	4603      	mov	r3, r0
 8004d06:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004d0c:	e005      	b.n	8004d1a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3301      	adds	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	3b0a      	subs	r3, #10
 8004d18:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b09      	cmp	r3, #9
 8004d1e:	d8f6      	bhi.n	8004d0e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	b2db      	uxtb	r3, r3
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	4413      	add	r3, r2
 8004d66:	b2db      	uxtb	r3, r3
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b086      	sub	sp, #24
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7bdb      	ldrb	r3, [r3, #15]
 8004d90:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	7b5b      	ldrb	r3, [r3, #13]
 8004d96:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7b9b      	ldrb	r3, [r3, #14]
 8004d9c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	e06f      	b.n	8004e84 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d011      	beq.n	8004dce <RTC_DateUpdate+0x5c>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d00e      	beq.n	8004dce <RTC_DateUpdate+0x5c>
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d00b      	beq.n	8004dce <RTC_DateUpdate+0x5c>
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d008      	beq.n	8004dce <RTC_DateUpdate+0x5c>
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d005      	beq.n	8004dce <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b0a      	cmp	r3, #10
 8004dc6:	d002      	beq.n	8004dce <RTC_DateUpdate+0x5c>
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d117      	bne.n	8004dfe <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b1e      	cmp	r3, #30
 8004dd2:	d803      	bhi.n	8004ddc <RTC_DateUpdate+0x6a>
      {
        day++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004dda:	e050      	b.n	8004e7e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d005      	beq.n	8004dee <RTC_DateUpdate+0x7c>
        {
          month++;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	3301      	adds	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004de8:	2301      	movs	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004dec:	e047      	b.n	8004e7e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004dee:	2301      	movs	r3, #1
 8004df0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004df2:	2301      	movs	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
          year++;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004dfc:	e03f      	b.n	8004e7e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d008      	beq.n	8004e16 <RTC_DateUpdate+0xa4>
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d005      	beq.n	8004e16 <RTC_DateUpdate+0xa4>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b09      	cmp	r3, #9
 8004e0e:	d002      	beq.n	8004e16 <RTC_DateUpdate+0xa4>
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b0b      	cmp	r3, #11
 8004e14:	d10c      	bne.n	8004e30 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b1d      	cmp	r3, #29
 8004e1a:	d803      	bhi.n	8004e24 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004e22:	e02c      	b.n	8004e7e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3301      	adds	r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004e2e:	e026      	b.n	8004e7e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d123      	bne.n	8004e7e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b1b      	cmp	r3, #27
 8004e3a:	d803      	bhi.n	8004e44 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e01c      	b.n	8004e7e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b1c      	cmp	r3, #28
 8004e48:	d111      	bne.n	8004e6e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f838 	bl	8004ec4 <RTC_IsLeapYear>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e00d      	b.n	8004e7e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3301      	adds	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e007      	b.n	8004e7e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b1d      	cmp	r3, #29
 8004e72:	d104      	bne.n	8004e7e <RTC_DateUpdate+0x10c>
      {
        month++;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3301      	adds	r3, #1
 8004e78:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d38b      	bcc.n	8004da4 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	6978      	ldr	r0, [r7, #20]
 8004eb0:	f000 f83a 	bl	8004f28 <RTC_WeekDayNum>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	731a      	strb	r2, [r3, #12]
}
 8004ebc:	bf00      	nop
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e01d      	b.n	8004f1a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <RTC_IsLeapYear+0x60>)
 8004ee2:	fba2 1203 	umull	r1, r2, r2, r3
 8004ee6:	0952      	lsrs	r2, r2, #5
 8004ee8:	2164      	movs	r1, #100	; 0x64
 8004eea:	fb01 f202 	mul.w	r2, r1, r2
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e00f      	b.n	8004f1a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <RTC_IsLeapYear+0x60>)
 8004efe:	fba2 1203 	umull	r1, r2, r2, r3
 8004f02:	09d2      	lsrs	r2, r2, #7
 8004f04:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004f08:	fb01 f202 	mul.w	r2, r1, r2
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004f18:	2300      	movs	r3, #0
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	51eb851f 	.word	0x51eb851f

08004f28 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
 8004f34:	4613      	mov	r3, r2
 8004f36:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004f46:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d82d      	bhi.n	8004faa <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	4a2c      	ldr	r2, [pc, #176]	; (800500c <RTC_WeekDayNum+0xe4>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	085a      	lsrs	r2, r3, #1
 8004f62:	78bb      	ldrb	r3, [r7, #2]
 8004f64:	441a      	add	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	441a      	add	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	4926      	ldr	r1, [pc, #152]	; (8005010 <RTC_WeekDayNum+0xe8>)
 8004f78:	fba1 1303 	umull	r1, r3, r1, r3
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	4922      	ldr	r1, [pc, #136]	; (8005010 <RTC_WeekDayNum+0xe8>)
 8004f86:	fba1 1303 	umull	r1, r3, r1, r3
 8004f8a:	09db      	lsrs	r3, r3, #7
 8004f8c:	4413      	add	r3, r2
 8004f8e:	1d1a      	adds	r2, r3, #4
 8004f90:	4b20      	ldr	r3, [pc, #128]	; (8005014 <RTC_WeekDayNum+0xec>)
 8004f92:	fba3 1302 	umull	r1, r3, r3, r2
 8004f96:	1ad1      	subs	r1, r2, r3
 8004f98:	0849      	lsrs	r1, r1, #1
 8004f9a:	440b      	add	r3, r1
 8004f9c:	0899      	lsrs	r1, r3, #2
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	1a5b      	subs	r3, r3, r1
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e029      	b.n	8004ffe <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	4613      	mov	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	4a15      	ldr	r2, [pc, #84]	; (800500c <RTC_WeekDayNum+0xe4>)
 8004fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbc:	085a      	lsrs	r2, r3, #1
 8004fbe:	78bb      	ldrb	r3, [r7, #2]
 8004fc0:	441a      	add	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	441a      	add	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	441a      	add	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4910      	ldr	r1, [pc, #64]	; (8005010 <RTC_WeekDayNum+0xe8>)
 8004fd0:	fba1 1303 	umull	r1, r3, r1, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	1ad2      	subs	r2, r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	490d      	ldr	r1, [pc, #52]	; (8005010 <RTC_WeekDayNum+0xe8>)
 8004fdc:	fba1 1303 	umull	r1, r3, r1, r3
 8004fe0:	09db      	lsrs	r3, r3, #7
 8004fe2:	4413      	add	r3, r2
 8004fe4:	1c9a      	adds	r2, r3, #2
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <RTC_WeekDayNum+0xec>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	1ad1      	subs	r1, r2, r3
 8004fee:	0849      	lsrs	r1, r1, #1
 8004ff0:	440b      	add	r3, r1
 8004ff2:	0899      	lsrs	r1, r3, #2
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	1a5b      	subs	r3, r3, r1
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	b2db      	uxtb	r3, r3
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	38e38e39 	.word	0x38e38e39
 8005010:	51eb851f 	.word	0x51eb851f
 8005014:	24924925 	.word	0x24924925

08005018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e076      	b.n	8005118 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d108      	bne.n	8005044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503a:	d009      	beq.n	8005050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	61da      	str	r2, [r3, #28]
 8005042:	e005      	b.n	8005050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fc fc32 	bl	80018d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d4:	ea42 0103 	orr.w	r1, r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	0c1a      	lsrs	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f002 0204 	and.w	r2, r2, #4
 80050f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005106:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <HAL_SRAM_Init+0x1c>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513a:	d101      	bne.n	8005140 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e038      	b.n	80051b2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7fc fde9 	bl	8001d2c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3308      	adds	r3, #8
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f001 fa89 	bl	800667c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	461a      	mov	r2, r3
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	f001 faeb 	bl	8006750 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6858      	ldr	r0, [r3, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	f001 fb16 	bl	80067b8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	6892      	ldr	r2, [r2, #8]
 8005194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	f041 0101 	orr.w	r1, r1, #1
 80051a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e041      	b.n	8005250 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7fc fbd1 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f000 fdb1 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e041      	b.n	80052ee <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f839 	bl	80052f6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3304      	adds	r3, #4
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f000 fd62 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <HAL_TIM_OC_Start_IT+0x28>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e022      	b.n	8005376 <HAL_TIM_OC_Start_IT+0x6e>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d109      	bne.n	800534a <HAL_TIM_OC_Start_IT+0x42>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b01      	cmp	r3, #1
 8005340:	bf14      	ite	ne
 8005342:	2301      	movne	r3, #1
 8005344:	2300      	moveq	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	e015      	b.n	8005376 <HAL_TIM_OC_Start_IT+0x6e>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d109      	bne.n	8005364 <HAL_TIM_OC_Start_IT+0x5c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	bf14      	ite	ne
 800535c:	2301      	movne	r3, #1
 800535e:	2300      	moveq	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	e008      	b.n	8005376 <HAL_TIM_OC_Start_IT+0x6e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0bd      	b.n	80054fa <HAL_TIM_OC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <HAL_TIM_OC_Start_IT+0x86>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800538c:	e013      	b.n	80053b6 <HAL_TIM_OC_Start_IT+0xae>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b04      	cmp	r3, #4
 8005392:	d104      	bne.n	800539e <HAL_TIM_OC_Start_IT+0x96>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539c:	e00b      	b.n	80053b6 <HAL_TIM_OC_Start_IT+0xae>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_OC_Start_IT+0xa6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ac:	e003      	b.n	80053b6 <HAL_TIM_OC_Start_IT+0xae>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d841      	bhi.n	8005440 <HAL_TIM_OC_Start_IT+0x138>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <HAL_TIM_OC_Start_IT+0xbc>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053f9 	.word	0x080053f9
 80053c8:	08005441 	.word	0x08005441
 80053cc:	08005441 	.word	0x08005441
 80053d0:	08005441 	.word	0x08005441
 80053d4:	0800540b 	.word	0x0800540b
 80053d8:	08005441 	.word	0x08005441
 80053dc:	08005441 	.word	0x08005441
 80053e0:	08005441 	.word	0x08005441
 80053e4:	0800541d 	.word	0x0800541d
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005441 	.word	0x08005441
 80053f0:	08005441 	.word	0x08005441
 80053f4:	0800542f 	.word	0x0800542f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0202 	orr.w	r2, r2, #2
 8005406:	60da      	str	r2, [r3, #12]
      break;
 8005408:	e01d      	b.n	8005446 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0204 	orr.w	r2, r2, #4
 8005418:	60da      	str	r2, [r3, #12]
      break;
 800541a:	e014      	b.n	8005446 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0208 	orr.w	r2, r2, #8
 800542a:	60da      	str	r2, [r3, #12]
      break;
 800542c:	e00b      	b.n	8005446 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0210 	orr.w	r2, r2, #16
 800543c:	60da      	str	r2, [r3, #12]
      break;
 800543e:	e002      	b.n	8005446 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	bf00      	nop
  }

  if (status == HAL_OK)
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d155      	bne.n	80054f8 <HAL_TIM_OC_Start_IT+0x1f0>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2201      	movs	r2, #1
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 ff3f 	bl	80062d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a29      	ldr	r2, [pc, #164]	; (8005504 <HAL_TIM_OC_Start_IT+0x1fc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIM_OC_Start_IT+0x166>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a27      	ldr	r2, [pc, #156]	; (8005508 <HAL_TIM_OC_Start_IT+0x200>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_TIM_OC_Start_IT+0x16a>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <HAL_TIM_OC_Start_IT+0x16c>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005486:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_TIM_OC_Start_IT+0x1fc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d018      	beq.n	80054c4 <HAL_TIM_OC_Start_IT+0x1bc>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <HAL_TIM_OC_Start_IT+0x200>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d013      	beq.n	80054c4 <HAL_TIM_OC_Start_IT+0x1bc>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d00e      	beq.n	80054c4 <HAL_TIM_OC_Start_IT+0x1bc>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <HAL_TIM_OC_Start_IT+0x204>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d009      	beq.n	80054c4 <HAL_TIM_OC_Start_IT+0x1bc>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a16      	ldr	r2, [pc, #88]	; (8005510 <HAL_TIM_OC_Start_IT+0x208>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIM_OC_Start_IT+0x1bc>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a15      	ldr	r2, [pc, #84]	; (8005514 <HAL_TIM_OC_Start_IT+0x20c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d111      	bne.n	80054e8 <HAL_TIM_OC_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d010      	beq.n	80054f8 <HAL_TIM_OC_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e6:	e007      	b.n	80054f8 <HAL_TIM_OC_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40013400 	.word	0x40013400
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00

08005518 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e041      	b.n	80055ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f839 	bl	80055b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3304      	adds	r3, #4
 8005554:	4619      	mov	r1, r3
 8005556:	4610      	mov	r0, r2
 8005558:	f000 fc02 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_TIM_PWM_Start+0x24>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	e022      	b.n	8005632 <HAL_TIM_PWM_Start+0x6a>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d109      	bne.n	8005606 <HAL_TIM_PWM_Start+0x3e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e015      	b.n	8005632 <HAL_TIM_PWM_Start+0x6a>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d109      	bne.n	8005620 <HAL_TIM_PWM_Start+0x58>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	e008      	b.n	8005632 <HAL_TIM_PWM_Start+0x6a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e072      	b.n	8005720 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <HAL_TIM_PWM_Start+0x82>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005648:	e013      	b.n	8005672 <HAL_TIM_PWM_Start+0xaa>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b04      	cmp	r3, #4
 800564e:	d104      	bne.n	800565a <HAL_TIM_PWM_Start+0x92>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005658:	e00b      	b.n	8005672 <HAL_TIM_PWM_Start+0xaa>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d104      	bne.n	800566a <HAL_TIM_PWM_Start+0xa2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005668:	e003      	b.n	8005672 <HAL_TIM_PWM_Start+0xaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fe2c 	bl	80062d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a28      	ldr	r2, [pc, #160]	; (8005728 <HAL_TIM_PWM_Start+0x160>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIM_PWM_Start+0xcc>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a27      	ldr	r2, [pc, #156]	; (800572c <HAL_TIM_PWM_Start+0x164>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d101      	bne.n	8005698 <HAL_TIM_PWM_Start+0xd0>
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <HAL_TIM_PWM_Start+0xd2>
 8005698:	2300      	movs	r3, #0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <HAL_TIM_PWM_Start+0x160>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_TIM_PWM_Start+0x122>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1b      	ldr	r2, [pc, #108]	; (800572c <HAL_TIM_PWM_Start+0x164>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_TIM_PWM_Start+0x122>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d00e      	beq.n	80056ea <HAL_TIM_PWM_Start+0x122>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <HAL_TIM_PWM_Start+0x168>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_TIM_PWM_Start+0x122>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a16      	ldr	r2, [pc, #88]	; (8005734 <HAL_TIM_PWM_Start+0x16c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_TIM_PWM_Start+0x122>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a14      	ldr	r2, [pc, #80]	; (8005738 <HAL_TIM_PWM_Start+0x170>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d111      	bne.n	800570e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b06      	cmp	r3, #6
 80056fa:	d010      	beq.n	800571e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570c:	e007      	b.n	800571e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40013400 	.word	0x40013400
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00

0800573c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b02      	cmp	r3, #2
 8005750:	d122      	bne.n	8005798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b02      	cmp	r3, #2
 800575e:	d11b      	bne.n	8005798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0202 	mvn.w	r2, #2
 8005768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fad2 	bl	8005d28 <HAL_TIM_IC_CaptureCallback>
 8005784:	e005      	b.n	8005792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fb fe46 	bl	8001418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fad4 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d122      	bne.n	80057ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d11b      	bne.n	80057ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0204 	mvn.w	r2, #4
 80057bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 faa8 	bl	8005d28 <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fb fe1c 	bl	8001418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 faaa 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b08      	cmp	r3, #8
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0208 	mvn.w	r2, #8
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2204      	movs	r2, #4
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa7e 	bl	8005d28 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fb fdf2 	bl	8001418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fa80 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b10      	cmp	r3, #16
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b10      	cmp	r3, #16
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0210 	mvn.w	r2, #16
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2208      	movs	r2, #8
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa54 	bl	8005d28 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fb fdc8 	bl	8001418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fa56 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d10e      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d107      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0201 	mvn.w	r2, #1
 80058b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fa2b 	bl	8005d16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d107      	bne.n	80058ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fde0 	bl	80064ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fa1a 	bl	8005d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b20      	cmp	r3, #32
 8005924:	d10e      	bne.n	8005944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b20      	cmp	r3, #32
 8005932:	d107      	bne.n	8005944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0220 	mvn.w	r2, #32
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fdab 	bl	800649a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005966:	2302      	movs	r3, #2
 8005968:	e048      	b.n	80059fc <HAL_TIM_OC_ConfigChannel+0xb0>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b0c      	cmp	r3, #12
 8005976:	d839      	bhi.n	80059ec <HAL_TIM_OC_ConfigChannel+0xa0>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <HAL_TIM_OC_ConfigChannel+0x34>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	080059b5 	.word	0x080059b5
 8005984:	080059ed 	.word	0x080059ed
 8005988:	080059ed 	.word	0x080059ed
 800598c:	080059ed 	.word	0x080059ed
 8005990:	080059c3 	.word	0x080059c3
 8005994:	080059ed 	.word	0x080059ed
 8005998:	080059ed 	.word	0x080059ed
 800599c:	080059ed 	.word	0x080059ed
 80059a0:	080059d1 	.word	0x080059d1
 80059a4:	080059ed 	.word	0x080059ed
 80059a8:	080059ed 	.word	0x080059ed
 80059ac:	080059ed 	.word	0x080059ed
 80059b0:	080059df 	.word	0x080059df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fa4a 	bl	8005e54 <TIM_OC1_SetConfig>
      break;
 80059c0:	e017      	b.n	80059f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fab3 	bl	8005f34 <TIM_OC2_SetConfig>
      break;
 80059ce:	e010      	b.n	80059f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fb20 	bl	800601c <TIM_OC3_SetConfig>
      break;
 80059dc:	e009      	b.n	80059f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fb8d 	bl	8006104 <TIM_OC4_SetConfig>
      break;
 80059ea:	e002      	b.n	80059f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	75fb      	strb	r3, [r7, #23]
      break;
 80059f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e0ae      	b.n	8005b80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b0c      	cmp	r3, #12
 8005a2e:	f200 809f 	bhi.w	8005b70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a6d 	.word	0x08005a6d
 8005a3c:	08005b71 	.word	0x08005b71
 8005a40:	08005b71 	.word	0x08005b71
 8005a44:	08005b71 	.word	0x08005b71
 8005a48:	08005aad 	.word	0x08005aad
 8005a4c:	08005b71 	.word	0x08005b71
 8005a50:	08005b71 	.word	0x08005b71
 8005a54:	08005b71 	.word	0x08005b71
 8005a58:	08005aef 	.word	0x08005aef
 8005a5c:	08005b71 	.word	0x08005b71
 8005a60:	08005b71 	.word	0x08005b71
 8005a64:	08005b71 	.word	0x08005b71
 8005a68:	08005b2f 	.word	0x08005b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f9ee 	bl	8005e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0208 	orr.w	r2, r2, #8
 8005a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0204 	bic.w	r2, r2, #4
 8005a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	619a      	str	r2, [r3, #24]
      break;
 8005aaa:	e064      	b.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fa3e 	bl	8005f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6999      	ldr	r1, [r3, #24]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	021a      	lsls	r2, r3, #8
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	619a      	str	r2, [r3, #24]
      break;
 8005aec:	e043      	b.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fa91 	bl	800601c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0208 	orr.w	r2, r2, #8
 8005b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0204 	bic.w	r2, r2, #4
 8005b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	61da      	str	r2, [r3, #28]
      break;
 8005b2c:	e023      	b.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fae5 	bl	8006104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69d9      	ldr	r1, [r3, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	021a      	lsls	r2, r3, #8
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	61da      	str	r2, [r3, #28]
      break;
 8005b6e:	e002      	b.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
      break;
 8005b74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e0b4      	b.n	8005d0e <HAL_TIM_ConfigClockSource+0x186>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bdc:	d03e      	beq.n	8005c5c <HAL_TIM_ConfigClockSource+0xd4>
 8005bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be2:	f200 8087 	bhi.w	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bea:	f000 8086 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x172>
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	d87f      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b70      	cmp	r3, #112	; 0x70
 8005bf6:	d01a      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0xa6>
 8005bf8:	2b70      	cmp	r3, #112	; 0x70
 8005bfa:	d87b      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b60      	cmp	r3, #96	; 0x60
 8005bfe:	d050      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8005c00:	2b60      	cmp	r3, #96	; 0x60
 8005c02:	d877      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	2b50      	cmp	r3, #80	; 0x50
 8005c06:	d03c      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xfa>
 8005c08:	2b50      	cmp	r3, #80	; 0x50
 8005c0a:	d873      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b40      	cmp	r3, #64	; 0x40
 8005c0e:	d058      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d86f      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b30      	cmp	r3, #48	; 0x30
 8005c16:	d064      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c18:	2b30      	cmp	r3, #48	; 0x30
 8005c1a:	d86b      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d060      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d867      	bhi.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d05c      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d05a      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8005c2c:	e062      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c3e:	f000 fb2c 	bl	800629a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	609a      	str	r2, [r3, #8]
      break;
 8005c5a:	e04f      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c6c:	f000 fb15 	bl	800629a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c7e:	609a      	str	r2, [r3, #8]
      break;
 8005c80:	e03c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f000 fa8c 	bl	80061ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2150      	movs	r1, #80	; 0x50
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fae3 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005ca0:	e02c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f000 faaa 	bl	8006208 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2160      	movs	r1, #96	; 0x60
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fad3 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005cc0:	e01c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f000 fa6c 	bl	80061ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2140      	movs	r1, #64	; 0x40
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fac3 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005ce0:	e00c      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f000 faba 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005cf2:	e003      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf8:	e000      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr
	...

08005d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a33      	ldr	r2, [pc, #204]	; (8005e40 <TIM_Base_SetConfig+0xe0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a32      	ldr	r2, [pc, #200]	; (8005e44 <TIM_Base_SetConfig+0xe4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00f      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a2f      	ldr	r2, [pc, #188]	; (8005e48 <TIM_Base_SetConfig+0xe8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a2e      	ldr	r2, [pc, #184]	; (8005e4c <TIM_Base_SetConfig+0xec>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <TIM_Base_SetConfig+0xf0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d108      	bne.n	8005db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a22      	ldr	r2, [pc, #136]	; (8005e40 <TIM_Base_SetConfig+0xe0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <TIM_Base_SetConfig+0x82>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a21      	ldr	r2, [pc, #132]	; (8005e44 <TIM_Base_SetConfig+0xe4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00f      	beq.n	8005de2 <TIM_Base_SetConfig+0x82>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc8:	d00b      	beq.n	8005de2 <TIM_Base_SetConfig+0x82>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <TIM_Base_SetConfig+0xe8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_Base_SetConfig+0x82>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a1d      	ldr	r2, [pc, #116]	; (8005e4c <TIM_Base_SetConfig+0xec>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_Base_SetConfig+0x82>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <TIM_Base_SetConfig+0xf0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d108      	bne.n	8005df4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <TIM_Base_SetConfig+0xe0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0xc8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <TIM_Base_SetConfig+0xe4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d103      	bne.n	8005e30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	615a      	str	r2, [r3, #20]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00

08005e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f023 0201 	bic.w	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f023 0302 	bic.w	r3, r3, #2
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <TIM_OC1_SetConfig+0xd8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_OC1_SetConfig+0x64>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a1f      	ldr	r2, [pc, #124]	; (8005f30 <TIM_OC1_SetConfig+0xdc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d10c      	bne.n	8005ed2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0308 	bic.w	r3, r3, #8
 8005ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f023 0304 	bic.w	r3, r3, #4
 8005ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <TIM_OC1_SetConfig+0xd8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC1_SetConfig+0x8e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <TIM_OC1_SetConfig+0xdc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d111      	bne.n	8005f06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	bf00      	nop
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40013400 	.word	0x40013400

08005f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f023 0210 	bic.w	r2, r3, #16
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0320 	bic.w	r3, r3, #32
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a21      	ldr	r2, [pc, #132]	; (8006014 <TIM_OC2_SetConfig+0xe0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC2_SetConfig+0x68>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a20      	ldr	r2, [pc, #128]	; (8006018 <TIM_OC2_SetConfig+0xe4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10d      	bne.n	8005fb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a16      	ldr	r2, [pc, #88]	; (8006014 <TIM_OC2_SetConfig+0xe0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_OC2_SetConfig+0x94>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a15      	ldr	r2, [pc, #84]	; (8006018 <TIM_OC2_SetConfig+0xe4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d113      	bne.n	8005ff0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr
 8006014:	40012c00 	.word	0x40012c00
 8006018:	40013400 	.word	0x40013400

0800601c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a21      	ldr	r2, [pc, #132]	; (80060fc <TIM_OC3_SetConfig+0xe0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_OC3_SetConfig+0x66>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a20      	ldr	r2, [pc, #128]	; (8006100 <TIM_OC3_SetConfig+0xe4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10d      	bne.n	800609e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800609c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a16      	ldr	r2, [pc, #88]	; (80060fc <TIM_OC3_SetConfig+0xe0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_OC3_SetConfig+0x92>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a15      	ldr	r2, [pc, #84]	; (8006100 <TIM_OC3_SetConfig+0xe4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d113      	bne.n	80060d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40013400 	.word	0x40013400

08006104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800614e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <TIM_OC4_SetConfig+0xa0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC4_SetConfig+0x68>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <TIM_OC4_SetConfig+0xa4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d109      	bne.n	8006180 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	019b      	lsls	r3, r3, #6
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40013400 	.word	0x40013400

080061ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f023 0201 	bic.w	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f023 030a 	bic.w	r3, r3, #10
 80061e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr

08006208 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0210 	bic.w	r2, r3, #16
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	031b      	lsls	r3, r3, #12
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006244:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	621a      	str	r2, [r3, #32]
}
 800625c:	bf00      	nop
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	f043 0307 	orr.w	r3, r3, #7
 8006288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr

0800629a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	021a      	lsls	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	431a      	orrs	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	609a      	str	r2, [r3, #8]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr

080062d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	2201      	movs	r2, #1
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a1a      	ldr	r2, [r3, #32]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	43db      	mvns	r3, r3
 80062fa:	401a      	ands	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1a      	ldr	r2, [r3, #32]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	fa01 f303 	lsl.w	r3, r1, r3
 8006310:	431a      	orrs	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e050      	b.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1b      	ldr	r2, [pc, #108]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d018      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d00e      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a15      	ldr	r2, [pc, #84]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a14      	ldr	r2, [pc, #80]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a12      	ldr	r2, [pc, #72]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d10c      	bne.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00

080063f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006410:	2302      	movs	r3, #2
 8006412:	e03d      	b.n	8006490 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr

0800649a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e042      	b.n	8006556 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d106      	bne.n	80064ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7fb fb59 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2224      	movs	r2, #36	; 0x24
 80064ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006500:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f82c 	bl	8006560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006516:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695a      	ldr	r2, [r3, #20]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006526:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006536:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800659a:	f023 030c 	bic.w	r3, r3, #12
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	430b      	orrs	r3, r1
 80065a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a2c      	ldr	r2, [pc, #176]	; (8006674 <UART_SetConfig+0x114>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d103      	bne.n	80065d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065c8:	f7fd fd7a 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	e002      	b.n	80065d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065d0:	f7fd fd62 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 80065d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009a      	lsls	r2, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	4a22      	ldr	r2, [pc, #136]	; (8006678 <UART_SetConfig+0x118>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	0119      	lsls	r1, r3, #4
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	009a      	lsls	r2, r3, #2
 8006600:	441a      	add	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	fbb2 f2f3 	udiv	r2, r2, r3
 800660c:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <UART_SetConfig+0x118>)
 800660e:	fba3 0302 	umull	r0, r3, r3, r2
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	2064      	movs	r0, #100	; 0x64
 8006616:	fb00 f303 	mul.w	r3, r0, r3
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	3332      	adds	r3, #50	; 0x32
 8006620:	4a15      	ldr	r2, [pc, #84]	; (8006678 <UART_SetConfig+0x118>)
 8006622:	fba2 2303 	umull	r2, r3, r2, r3
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800662c:	4419      	add	r1, r3
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009a      	lsls	r2, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	fbb2 f2f3 	udiv	r2, r2, r3
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <UART_SetConfig+0x118>)
 8006646:	fba3 0302 	umull	r0, r3, r3, r2
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	2064      	movs	r0, #100	; 0x64
 800664e:	fb00 f303 	mul.w	r3, r0, r3
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	3332      	adds	r3, #50	; 0x32
 8006658:	4a07      	ldr	r2, [pc, #28]	; (8006678 <UART_SetConfig+0x118>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	f003 020f 	and.w	r2, r3, #15
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	440a      	add	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40013800 	.word	0x40013800
 8006678:	51eb851f 	.word	0x51eb851f

0800667c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	f023 0101 	bic.w	r1, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d102      	bne.n	80066ac <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80066a6:	2340      	movs	r3, #64	; 0x40
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e001      	b.n	80066b0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80066bc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80066c2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80066c8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80066ce:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80066d4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80066da:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80066e0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80066e6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80066ec:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800670a:	4b10      	ldr	r3, [pc, #64]	; (800674c <FSMC_NORSRAM_Init+0xd0>)
 800670c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006714:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800671c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	43db      	mvns	r3, r3
 800672c:	ea02 0103 	and.w	r1, r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	4319      	orrs	r1, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	0008fb7f 	.word	0x0008fb7f

08006750 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	431a      	orrs	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	431a      	orrs	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	431a      	orrs	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	3b01      	subs	r3, #1
 800678c:	051b      	lsls	r3, r3, #20
 800678e:	431a      	orrs	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	3b02      	subs	r3, #2
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	431a      	orrs	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	4313      	orrs	r3, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	3201      	adds	r2, #1
 80067a4:	4319      	orrs	r1, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067cc:	d11d      	bne.n	800680a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80067d8:	4013      	ands	r3, r2
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	6811      	ldr	r1, [r2, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	6852      	ldr	r2, [r2, #4]
 80067e2:	0112      	lsls	r2, r2, #4
 80067e4:	4311      	orrs	r1, r2
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	6892      	ldr	r2, [r2, #8]
 80067ea:	0212      	lsls	r2, r2, #8
 80067ec:	4311      	orrs	r1, r2
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	6992      	ldr	r2, [r2, #24]
 80067f2:	4311      	orrs	r1, r2
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	68d2      	ldr	r2, [r2, #12]
 80067f8:	0412      	lsls	r2, r2, #16
 80067fa:	430a      	orrs	r2, r1
 80067fc:	ea43 0102 	orr.w	r1, r3, r2
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006808:	e005      	b.n	8006816 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	cff00000 	.word	0xcff00000

08006828 <memset>:
 8006828:	4603      	mov	r3, r0
 800682a:	4402      	add	r2, r0
 800682c:	4293      	cmp	r3, r2
 800682e:	d100      	bne.n	8006832 <memset+0xa>
 8006830:	4770      	bx	lr
 8006832:	f803 1b01 	strb.w	r1, [r3], #1
 8006836:	e7f9      	b.n	800682c <memset+0x4>

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	2600      	movs	r6, #0
 800683c:	4d0c      	ldr	r5, [pc, #48]	; (8006870 <__libc_init_array+0x38>)
 800683e:	4c0d      	ldr	r4, [pc, #52]	; (8006874 <__libc_init_array+0x3c>)
 8006840:	1b64      	subs	r4, r4, r5
 8006842:	10a4      	asrs	r4, r4, #2
 8006844:	42a6      	cmp	r6, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	f000 f81a 	bl	8006880 <_init>
 800684c:	2600      	movs	r6, #0
 800684e:	4d0a      	ldr	r5, [pc, #40]	; (8006878 <__libc_init_array+0x40>)
 8006850:	4c0a      	ldr	r4, [pc, #40]	; (800687c <__libc_init_array+0x44>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	42a6      	cmp	r6, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006860:	4798      	blx	r3
 8006862:	3601      	adds	r6, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	f855 3b04 	ldr.w	r3, [r5], #4
 800686a:	4798      	blx	r3
 800686c:	3601      	adds	r6, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	080068d8 	.word	0x080068d8
 8006874:	080068d8 	.word	0x080068d8
 8006878:	080068d8 	.word	0x080068d8
 800687c:	080068dc 	.word	0x080068dc

08006880 <_init>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr

0800688c <_fini>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr
