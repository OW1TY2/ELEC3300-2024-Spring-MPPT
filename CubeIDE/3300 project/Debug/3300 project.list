
3300 project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bfc  08006bfc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006bfc  08006bfc  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bfc  08006bfc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000020  08006c20  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08006c20  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f1f  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fee  00000000  00000000  00035fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  00038f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001131  00000000  00000000  0003a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cf8  00000000  00000000  0003b699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8b4  00000000  00000000  0003e391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3f20  00000000  00000000  00058c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e94  00000000  00000000  000fcb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001029fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000020 	.word	0x20000020
 8000204:	00000000 	.word	0x00000000
 8000208:	08006ba4 	.word	0x08006ba4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000024 	.word	0x20000024
 8000224:	08006ba4 	.word	0x08006ba4

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_fmul>:
 800047c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000480:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000484:	bf1e      	ittt	ne
 8000486:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800048a:	ea92 0f0c 	teqne	r2, ip
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d06f      	beq.n	8000574 <__aeabi_fmul+0xf8>
 8000494:	441a      	add	r2, r3
 8000496:	ea80 0c01 	eor.w	ip, r0, r1
 800049a:	0240      	lsls	r0, r0, #9
 800049c:	bf18      	it	ne
 800049e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004a2:	d01e      	beq.n	80004e2 <__aeabi_fmul+0x66>
 80004a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004b0:	fba0 3101 	umull	r3, r1, r0, r1
 80004b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004bc:	bf3e      	ittt	cc
 80004be:	0049      	lslcc	r1, r1, #1
 80004c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004c4:	005b      	lslcc	r3, r3, #1
 80004c6:	ea40 0001 	orr.w	r0, r0, r1
 80004ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ce:	2afd      	cmp	r2, #253	; 0xfd
 80004d0:	d81d      	bhi.n	800050e <__aeabi_fmul+0x92>
 80004d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004da:	bf08      	it	eq
 80004dc:	f020 0001 	biceq.w	r0, r0, #1
 80004e0:	4770      	bx	lr
 80004e2:	f090 0f00 	teq	r0, #0
 80004e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ea:	bf08      	it	eq
 80004ec:	0249      	lsleq	r1, r1, #9
 80004ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004f6:	3a7f      	subs	r2, #127	; 0x7f
 80004f8:	bfc2      	ittt	gt
 80004fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000502:	4770      	bxgt	lr
 8000504:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000508:	f04f 0300 	mov.w	r3, #0
 800050c:	3a01      	subs	r2, #1
 800050e:	dc5d      	bgt.n	80005cc <__aeabi_fmul+0x150>
 8000510:	f112 0f19 	cmn.w	r2, #25
 8000514:	bfdc      	itt	le
 8000516:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800051a:	4770      	bxle	lr
 800051c:	f1c2 0200 	rsb	r2, r2, #0
 8000520:	0041      	lsls	r1, r0, #1
 8000522:	fa21 f102 	lsr.w	r1, r1, r2
 8000526:	f1c2 0220 	rsb	r2, r2, #32
 800052a:	fa00 fc02 	lsl.w	ip, r0, r2
 800052e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000532:	f140 0000 	adc.w	r0, r0, #0
 8000536:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800053a:	bf08      	it	eq
 800053c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000540:	4770      	bx	lr
 8000542:	f092 0f00 	teq	r2, #0
 8000546:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800054a:	bf02      	ittt	eq
 800054c:	0040      	lsleq	r0, r0, #1
 800054e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000552:	3a01      	subeq	r2, #1
 8000554:	d0f9      	beq.n	800054a <__aeabi_fmul+0xce>
 8000556:	ea40 000c 	orr.w	r0, r0, ip
 800055a:	f093 0f00 	teq	r3, #0
 800055e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000562:	bf02      	ittt	eq
 8000564:	0049      	lsleq	r1, r1, #1
 8000566:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800056a:	3b01      	subeq	r3, #1
 800056c:	d0f9      	beq.n	8000562 <__aeabi_fmul+0xe6>
 800056e:	ea41 010c 	orr.w	r1, r1, ip
 8000572:	e78f      	b.n	8000494 <__aeabi_fmul+0x18>
 8000574:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000578:	ea92 0f0c 	teq	r2, ip
 800057c:	bf18      	it	ne
 800057e:	ea93 0f0c 	teqne	r3, ip
 8000582:	d00a      	beq.n	800059a <__aeabi_fmul+0x11e>
 8000584:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000588:	bf18      	it	ne
 800058a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800058e:	d1d8      	bne.n	8000542 <__aeabi_fmul+0xc6>
 8000590:	ea80 0001 	eor.w	r0, r0, r1
 8000594:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000598:	4770      	bx	lr
 800059a:	f090 0f00 	teq	r0, #0
 800059e:	bf17      	itett	ne
 80005a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005a4:	4608      	moveq	r0, r1
 80005a6:	f091 0f00 	teqne	r1, #0
 80005aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005ae:	d014      	beq.n	80005da <__aeabi_fmul+0x15e>
 80005b0:	ea92 0f0c 	teq	r2, ip
 80005b4:	d101      	bne.n	80005ba <__aeabi_fmul+0x13e>
 80005b6:	0242      	lsls	r2, r0, #9
 80005b8:	d10f      	bne.n	80005da <__aeabi_fmul+0x15e>
 80005ba:	ea93 0f0c 	teq	r3, ip
 80005be:	d103      	bne.n	80005c8 <__aeabi_fmul+0x14c>
 80005c0:	024b      	lsls	r3, r1, #9
 80005c2:	bf18      	it	ne
 80005c4:	4608      	movne	r0, r1
 80005c6:	d108      	bne.n	80005da <__aeabi_fmul+0x15e>
 80005c8:	ea80 0001 	eor.w	r0, r0, r1
 80005cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005d8:	4770      	bx	lr
 80005da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005e2:	4770      	bx	lr

080005e4 <__aeabi_drsub>:
 80005e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e002      	b.n	80005f0 <__adddf3>
 80005ea:	bf00      	nop

080005ec <__aeabi_dsub>:
 80005ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005f0 <__adddf3>:
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005fa:	ea94 0f05 	teq	r4, r5
 80005fe:	bf08      	it	eq
 8000600:	ea90 0f02 	teqeq	r0, r2
 8000604:	bf1f      	itttt	ne
 8000606:	ea54 0c00 	orrsne.w	ip, r4, r0
 800060a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800060e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000612:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000616:	f000 80e2 	beq.w	80007de <__adddf3+0x1ee>
 800061a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800061e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000622:	bfb8      	it	lt
 8000624:	426d      	neglt	r5, r5
 8000626:	dd0c      	ble.n	8000642 <__adddf3+0x52>
 8000628:	442c      	add	r4, r5
 800062a:	ea80 0202 	eor.w	r2, r0, r2
 800062e:	ea81 0303 	eor.w	r3, r1, r3
 8000632:	ea82 0000 	eor.w	r0, r2, r0
 8000636:	ea83 0101 	eor.w	r1, r3, r1
 800063a:	ea80 0202 	eor.w	r2, r0, r2
 800063e:	ea81 0303 	eor.w	r3, r1, r3
 8000642:	2d36      	cmp	r5, #54	; 0x36
 8000644:	bf88      	it	hi
 8000646:	bd30      	pophi	{r4, r5, pc}
 8000648:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800064c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000650:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000654:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000658:	d002      	beq.n	8000660 <__adddf3+0x70>
 800065a:	4240      	negs	r0, r0
 800065c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000660:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000664:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000668:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800066c:	d002      	beq.n	8000674 <__adddf3+0x84>
 800066e:	4252      	negs	r2, r2
 8000670:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000674:	ea94 0f05 	teq	r4, r5
 8000678:	f000 80a7 	beq.w	80007ca <__adddf3+0x1da>
 800067c:	f1a4 0401 	sub.w	r4, r4, #1
 8000680:	f1d5 0e20 	rsbs	lr, r5, #32
 8000684:	db0d      	blt.n	80006a2 <__adddf3+0xb2>
 8000686:	fa02 fc0e 	lsl.w	ip, r2, lr
 800068a:	fa22 f205 	lsr.w	r2, r2, r5
 800068e:	1880      	adds	r0, r0, r2
 8000690:	f141 0100 	adc.w	r1, r1, #0
 8000694:	fa03 f20e 	lsl.w	r2, r3, lr
 8000698:	1880      	adds	r0, r0, r2
 800069a:	fa43 f305 	asr.w	r3, r3, r5
 800069e:	4159      	adcs	r1, r3
 80006a0:	e00e      	b.n	80006c0 <__adddf3+0xd0>
 80006a2:	f1a5 0520 	sub.w	r5, r5, #32
 80006a6:	f10e 0e20 	add.w	lr, lr, #32
 80006aa:	2a01      	cmp	r2, #1
 80006ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006b0:	bf28      	it	cs
 80006b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006b6:	fa43 f305 	asr.w	r3, r3, r5
 80006ba:	18c0      	adds	r0, r0, r3
 80006bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	d507      	bpl.n	80006d6 <__adddf3+0xe6>
 80006c6:	f04f 0e00 	mov.w	lr, #0
 80006ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80006ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80006d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006da:	d31b      	bcc.n	8000714 <__adddf3+0x124>
 80006dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006e0:	d30c      	bcc.n	80006fc <__adddf3+0x10c>
 80006e2:	0849      	lsrs	r1, r1, #1
 80006e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80006e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006ec:	f104 0401 	add.w	r4, r4, #1
 80006f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006f8:	f080 809a 	bcs.w	8000830 <__adddf3+0x240>
 80006fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000700:	bf08      	it	eq
 8000702:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000706:	f150 0000 	adcs.w	r0, r0, #0
 800070a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070e:	ea41 0105 	orr.w	r1, r1, r5
 8000712:	bd30      	pop	{r4, r5, pc}
 8000714:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000718:	4140      	adcs	r0, r0
 800071a:	eb41 0101 	adc.w	r1, r1, r1
 800071e:	3c01      	subs	r4, #1
 8000720:	bf28      	it	cs
 8000722:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000726:	d2e9      	bcs.n	80006fc <__adddf3+0x10c>
 8000728:	f091 0f00 	teq	r1, #0
 800072c:	bf04      	itt	eq
 800072e:	4601      	moveq	r1, r0
 8000730:	2000      	moveq	r0, #0
 8000732:	fab1 f381 	clz	r3, r1
 8000736:	bf08      	it	eq
 8000738:	3320      	addeq	r3, #32
 800073a:	f1a3 030b 	sub.w	r3, r3, #11
 800073e:	f1b3 0220 	subs.w	r2, r3, #32
 8000742:	da0c      	bge.n	800075e <__adddf3+0x16e>
 8000744:	320c      	adds	r2, #12
 8000746:	dd08      	ble.n	800075a <__adddf3+0x16a>
 8000748:	f102 0c14 	add.w	ip, r2, #20
 800074c:	f1c2 020c 	rsb	r2, r2, #12
 8000750:	fa01 f00c 	lsl.w	r0, r1, ip
 8000754:	fa21 f102 	lsr.w	r1, r1, r2
 8000758:	e00c      	b.n	8000774 <__adddf3+0x184>
 800075a:	f102 0214 	add.w	r2, r2, #20
 800075e:	bfd8      	it	le
 8000760:	f1c2 0c20 	rsble	ip, r2, #32
 8000764:	fa01 f102 	lsl.w	r1, r1, r2
 8000768:	fa20 fc0c 	lsr.w	ip, r0, ip
 800076c:	bfdc      	itt	le
 800076e:	ea41 010c 	orrle.w	r1, r1, ip
 8000772:	4090      	lslle	r0, r2
 8000774:	1ae4      	subs	r4, r4, r3
 8000776:	bfa2      	ittt	ge
 8000778:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800077c:	4329      	orrge	r1, r5
 800077e:	bd30      	popge	{r4, r5, pc}
 8000780:	ea6f 0404 	mvn.w	r4, r4
 8000784:	3c1f      	subs	r4, #31
 8000786:	da1c      	bge.n	80007c2 <__adddf3+0x1d2>
 8000788:	340c      	adds	r4, #12
 800078a:	dc0e      	bgt.n	80007aa <__adddf3+0x1ba>
 800078c:	f104 0414 	add.w	r4, r4, #20
 8000790:	f1c4 0220 	rsb	r2, r4, #32
 8000794:	fa20 f004 	lsr.w	r0, r0, r4
 8000798:	fa01 f302 	lsl.w	r3, r1, r2
 800079c:	ea40 0003 	orr.w	r0, r0, r3
 80007a0:	fa21 f304 	lsr.w	r3, r1, r4
 80007a4:	ea45 0103 	orr.w	r1, r5, r3
 80007a8:	bd30      	pop	{r4, r5, pc}
 80007aa:	f1c4 040c 	rsb	r4, r4, #12
 80007ae:	f1c4 0220 	rsb	r2, r4, #32
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	fa01 f304 	lsl.w	r3, r1, r4
 80007ba:	ea40 0003 	orr.w	r0, r0, r3
 80007be:	4629      	mov	r1, r5
 80007c0:	bd30      	pop	{r4, r5, pc}
 80007c2:	fa21 f004 	lsr.w	r0, r1, r4
 80007c6:	4629      	mov	r1, r5
 80007c8:	bd30      	pop	{r4, r5, pc}
 80007ca:	f094 0f00 	teq	r4, #0
 80007ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007d2:	bf06      	itte	eq
 80007d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007d8:	3401      	addeq	r4, #1
 80007da:	3d01      	subne	r5, #1
 80007dc:	e74e      	b.n	800067c <__adddf3+0x8c>
 80007de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007e2:	bf18      	it	ne
 80007e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007e8:	d029      	beq.n	800083e <__adddf3+0x24e>
 80007ea:	ea94 0f05 	teq	r4, r5
 80007ee:	bf08      	it	eq
 80007f0:	ea90 0f02 	teqeq	r0, r2
 80007f4:	d005      	beq.n	8000802 <__adddf3+0x212>
 80007f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80007fa:	bf04      	itt	eq
 80007fc:	4619      	moveq	r1, r3
 80007fe:	4610      	moveq	r0, r2
 8000800:	bd30      	pop	{r4, r5, pc}
 8000802:	ea91 0f03 	teq	r1, r3
 8000806:	bf1e      	ittt	ne
 8000808:	2100      	movne	r1, #0
 800080a:	2000      	movne	r0, #0
 800080c:	bd30      	popne	{r4, r5, pc}
 800080e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000812:	d105      	bne.n	8000820 <__adddf3+0x230>
 8000814:	0040      	lsls	r0, r0, #1
 8000816:	4149      	adcs	r1, r1
 8000818:	bf28      	it	cs
 800081a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800081e:	bd30      	pop	{r4, r5, pc}
 8000820:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000824:	bf3c      	itt	cc
 8000826:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800082a:	bd30      	popcc	{r4, r5, pc}
 800082c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000830:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000834:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd30      	pop	{r4, r5, pc}
 800083e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000842:	bf1a      	itte	ne
 8000844:	4619      	movne	r1, r3
 8000846:	4610      	movne	r0, r2
 8000848:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800084c:	bf1c      	itt	ne
 800084e:	460b      	movne	r3, r1
 8000850:	4602      	movne	r2, r0
 8000852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000856:	bf06      	itte	eq
 8000858:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800085c:	ea91 0f03 	teqeq	r1, r3
 8000860:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000864:	bd30      	pop	{r4, r5, pc}
 8000866:	bf00      	nop

08000868 <__aeabi_ui2d>:
 8000868:	f090 0f00 	teq	r0, #0
 800086c:	bf04      	itt	eq
 800086e:	2100      	moveq	r1, #0
 8000870:	4770      	bxeq	lr
 8000872:	b530      	push	{r4, r5, lr}
 8000874:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000878:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800087c:	f04f 0500 	mov.w	r5, #0
 8000880:	f04f 0100 	mov.w	r1, #0
 8000884:	e750      	b.n	8000728 <__adddf3+0x138>
 8000886:	bf00      	nop

08000888 <__aeabi_i2d>:
 8000888:	f090 0f00 	teq	r0, #0
 800088c:	bf04      	itt	eq
 800088e:	2100      	moveq	r1, #0
 8000890:	4770      	bxeq	lr
 8000892:	b530      	push	{r4, r5, lr}
 8000894:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000898:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800089c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	f04f 0100 	mov.w	r1, #0
 80008a8:	e73e      	b.n	8000728 <__adddf3+0x138>
 80008aa:	bf00      	nop

080008ac <__aeabi_f2d>:
 80008ac:	0042      	lsls	r2, r0, #1
 80008ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80008b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008ba:	bf1f      	itttt	ne
 80008bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008c8:	4770      	bxne	lr
 80008ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008ce:	bf08      	it	eq
 80008d0:	4770      	bxeq	lr
 80008d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008d6:	bf04      	itt	eq
 80008d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008dc:	4770      	bxeq	lr
 80008de:	b530      	push	{r4, r5, lr}
 80008e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	e71c      	b.n	8000728 <__adddf3+0x138>
 80008ee:	bf00      	nop

080008f0 <__aeabi_ul2d>:
 80008f0:	ea50 0201 	orrs.w	r2, r0, r1
 80008f4:	bf08      	it	eq
 80008f6:	4770      	bxeq	lr
 80008f8:	b530      	push	{r4, r5, lr}
 80008fa:	f04f 0500 	mov.w	r5, #0
 80008fe:	e00a      	b.n	8000916 <__aeabi_l2d+0x16>

08000900 <__aeabi_l2d>:
 8000900:	ea50 0201 	orrs.w	r2, r0, r1
 8000904:	bf08      	it	eq
 8000906:	4770      	bxeq	lr
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800090e:	d502      	bpl.n	8000916 <__aeabi_l2d+0x16>
 8000910:	4240      	negs	r0, r0
 8000912:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000916:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800091a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800091e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000922:	f43f aed8 	beq.w	80006d6 <__adddf3+0xe6>
 8000926:	f04f 0203 	mov.w	r2, #3
 800092a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800092e:	bf18      	it	ne
 8000930:	3203      	addne	r2, #3
 8000932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000936:	bf18      	it	ne
 8000938:	3203      	addne	r2, #3
 800093a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800093e:	f1c2 0320 	rsb	r3, r2, #32
 8000942:	fa00 fc03 	lsl.w	ip, r0, r3
 8000946:	fa20 f002 	lsr.w	r0, r0, r2
 800094a:	fa01 fe03 	lsl.w	lr, r1, r3
 800094e:	ea40 000e 	orr.w	r0, r0, lr
 8000952:	fa21 f102 	lsr.w	r1, r1, r2
 8000956:	4414      	add	r4, r2
 8000958:	e6bd      	b.n	80006d6 <__adddf3+0xe6>
 800095a:	bf00      	nop

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	3a01      	subs	r2, #1
 8000a66:	bf28      	it	cs
 8000a68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a6c:	d2ed      	bcs.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_f2iz>:
 8000bc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bcc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bd0:	d30f      	bcc.n	8000bf2 <__aeabi_f2iz+0x2a>
 8000bd2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bd6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_f2iz+0x30>
 8000bdc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bec:	bf18      	it	ne
 8000bee:	4240      	negne	r0, r0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr
 8000bf8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bfc:	d101      	bne.n	8000c02 <__aeabi_f2iz+0x3a>
 8000bfe:	0242      	lsls	r2, r0, #9
 8000c00:	d105      	bne.n	8000c0e <__aeabi_f2iz+0x46>
 8000c02:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	bf08      	it	eq
 8000c08:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	4770      	bx	lr

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f001 fbb8 	bl	800238c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f84e 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c20:	f000 fd82 	bl	8001728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c24:	f000 fd62 	bl	80016ec <MX_DMA_Init>
  MX_I2C1_Init();
 8000c28:	f000 f9c8 	bl	8000fbc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c2c:	f000 fa58 	bl	80010e0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000c30:	f000 fb46 	bl	80012c0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c34:	f000 fd06 	bl	8001644 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c38:	f000 fd2e 	bl	8001698 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c3c:	f000 f89e 	bl	8000d7c <MX_ADC1_Init>
  MX_RTC_Init();
 8000c40:	f000 f9ea 	bl	8001018 <MX_RTC_Init>
  MX_TIM1_Init();
 8000c44:	f000 fa82 	bl	800114c <MX_TIM1_Init>
  MX_TIM5_Init();
 8000c48:	f000 fc86 	bl	8001558 <MX_TIM5_Init>
  MX_CAN_Init();
 8000c4c:	f000 f982 	bl	8000f54 <MX_CAN_Init>
  MX_TIM3_Init();
 8000c50:	f000 fb82 	bl	8001358 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c54:	f000 fc00 	bl	8001458 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <main+0x90>)
 8000c5c:	f004 ff1c 	bl	8005a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <main+0x94>)
 8000c64:	f004 ff18 	bl	8005a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c68:	2104      	movs	r1, #4
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <main+0x94>)
 8000c6c:	f004 ff14 	bl	8005a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c70:	2108      	movs	r1, #8
 8000c72:	480e      	ldr	r0, [pc, #56]	; (8000cac <main+0x98>)
 8000c74:	f004 ff10 	bl	8005a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c78:	210c      	movs	r1, #12
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <main+0x98>)
 8000c7c:	f004 ff0c 	bl	8005a98 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000c80:	2104      	movs	r1, #4
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <main+0x90>)
 8000c84:	f004 fda8 	bl	80057d8 <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 14);
 8000c88:	220e      	movs	r2, #14
 8000c8a:	4909      	ldr	r1, [pc, #36]	; (8000cb0 <main+0x9c>)
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <main+0xa0>)
 8000c8e:	f001 fced 	bl	800266c <HAL_ADC_Start_DMA>
    HAL_Delay(2);
 8000c92:	2002      	movs	r0, #2
 8000c94:	f001 fbdc 	bl	8002450 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <main+0xa4>)
 8000c9e:	f002 ff7d 	bl	8003b9c <HAL_GPIO_WritePin>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 14);
 8000ca2:	e7f1      	b.n	8000c88 <main+0x74>
 8000ca4:	20000198 	.word	0x20000198
 8000ca8:	20000228 	.word	0x20000228
 8000cac:	20000270 	.word	0x20000270
 8000cb0:	20000390 	.word	0x20000390
 8000cb4:	2000003c 	.word	0x2000003c
 8000cb8:	40011400 	.word	0x40011400

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b096      	sub	sp, #88	; 0x58
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f005 ff3e 	bl	8006b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000d0c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000d10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 f8a8 	bl	8003e6c <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d22:	f000 fe5e 	bl	80019e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fb14 	bl	8004370 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d4e:	f000 fe48 	bl	80019e2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000d52:	2303      	movs	r3, #3
 8000d54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000d56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000d5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d60:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fc91 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d70:	f000 fe37 	bl	80019e2 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3758      	adds	r7, #88	; 0x58
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d8c:	4b6f      	ldr	r3, [pc, #444]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000d8e:	4a70      	ldr	r2, [pc, #448]	; (8000f50 <MX_ADC1_Init+0x1d4>)
 8000d90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d92:	4b6e      	ldr	r3, [pc, #440]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d9a:	4b6c      	ldr	r3, [pc, #432]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da0:	4b6a      	ldr	r3, [pc, #424]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da6:	4b69      	ldr	r3, [pc, #420]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000da8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dae:	4b67      	ldr	r3, [pc, #412]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 14;
 8000db4:	4b65      	ldr	r3, [pc, #404]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000db6:	220e      	movs	r2, #14
 8000db8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dba:	4864      	ldr	r0, [pc, #400]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000dbc:	f001 fb6c 	bl	8002498 <HAL_ADC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000dc6:	f000 fe0c 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dca:	230a      	movs	r3, #10
 8000dcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	485c      	ldr	r0, [pc, #368]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000ddc:	f001 fdfe 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 fdfc 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4856      	ldr	r0, [pc, #344]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000df4:	f001 fdf2 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000dfe:	f000 fdf0 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e02:	2303      	movs	r3, #3
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4850      	ldr	r0, [pc, #320]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000e0c:	f001 fde6 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000e16:	f000 fde4 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	484a      	ldr	r0, [pc, #296]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000e24:	f001 fdda 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000e2e:	f000 fdd8 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e32:	2305      	movs	r3, #5
 8000e34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4844      	ldr	r0, [pc, #272]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000e3c:	f001 fdce 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000e46:	f000 fdcc 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	483e      	ldr	r0, [pc, #248]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000e54:	f001 fdc2 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000e5e:	f000 fdc0 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000e62:	2307      	movs	r3, #7
 8000e64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4838      	ldr	r0, [pc, #224]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000e6c:	f001 fdb6 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e76:	f000 fdb4 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4832      	ldr	r0, [pc, #200]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000e84:	f001 fdaa 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000e8e:	f000 fda8 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e92:	230b      	movs	r3, #11
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000e96:	2309      	movs	r3, #9
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482a      	ldr	r0, [pc, #168]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000ea4:	f001 fd9a 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000eae:	f000 fd98 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4822      	ldr	r0, [pc, #136]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000ec4:	f001 fd8a 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000ece:	f000 fd88 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	481b      	ldr	r0, [pc, #108]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000ee0:	f001 fd7c 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000eea:	f000 fd7a 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000eee:	230e      	movs	r3, #14
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000efc:	f001 fd6e 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f06:	f000 fd6c 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000f0e:	230d      	movs	r3, #13
 8000f10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000f18:	f001 fd60 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8000f22:	f000 fd5e 	bl	80019e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f26:	2308      	movs	r3, #8
 8000f28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000f2a:	230e      	movs	r3, #14
 8000f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MX_ADC1_Init+0x1d0>)
 8000f34:	f001 fd52 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8000f3e:	f000 fd50 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000003c 	.word	0x2000003c
 8000f50:	40012400 	.word	0x40012400

08000f54 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <MX_CAN_Init+0x64>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f60:	2210      	movs	r2, #16
 8000f62:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_CAN_Init+0x60>)
 8000fa2:	f001 ff1d 	bl	8002de0 <HAL_CAN_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000fac:	f000 fd19 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000b0 	.word	0x200000b0
 8000fb8:	40006400 	.word	0x40006400

08000fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C1_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C1_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C1_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C1_Init+0x50>)
 8000ffa:	f002 fde7 	bl	8003bcc <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 fced 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000d8 	.word	0x200000d8
 8001010:	40005400 	.word	0x40005400
 8001014:	000186a0 	.word	0x000186a0

08001018 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2100      	movs	r1, #0
 8001024:	460a      	mov	r2, r1
 8001026:	801a      	strh	r2, [r3, #0]
 8001028:	460a      	mov	r2, r1
 800102a:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_RTC_Init+0xc0>)
 800103a:	4a28      	ldr	r2, [pc, #160]	; (80010dc <MX_RTC_Init+0xc4>)
 800103c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_RTC_Init+0xc0>)
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_RTC_Init+0xc0>)
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800104e:	4822      	ldr	r0, [pc, #136]	; (80010d8 <MX_RTC_Init+0xc0>)
 8001050:	f003 fcaa 	bl	80049a8 <HAL_RTC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 fcc2 	bl	80019e2 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800105e:	2300      	movs	r3, #0
 8001060:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001062:	2300      	movs	r3, #0
 8001064:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8001066:	2300      	movs	r3, #0
 8001068:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2201      	movs	r2, #1
 8001070:	4619      	mov	r1, r3
 8001072:	4819      	ldr	r0, [pc, #100]	; (80010d8 <MX_RTC_Init+0xc0>)
 8001074:	f003 fd24 	bl	8004ac0 <HAL_RTC_SetTime>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800107e:	f000 fcb0 	bl	80019e2 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001082:	2301      	movs	r3, #1
 8001084:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001086:	2301      	movs	r3, #1
 8001088:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800108a:	2301      	movs	r3, #1
 800108c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 800108e:	2300      	movs	r3, #0
 8001090:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <MX_RTC_Init+0xc0>)
 800109c:	f003 fe80 	bl	8004da0 <HAL_RTC_SetDate>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80010a6:	f000 fc9c 	bl	80019e2 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	2201      	movs	r2, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_RTC_Init+0xc0>)
 80010c2:	f003 ff23 	bl	8004f0c <HAL_RTC_SetAlarm>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80010cc:	f000 fc89 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000012c 	.word	0x2000012c
 80010dc:	40002800 	.word	0x40002800

080010e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_SPI1_Init+0x64>)
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <MX_SPI1_Init+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_SPI1_Init+0x64>)
 80010ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_SPI1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_SPI1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_SPI1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI1_Init+0x64>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI1_Init+0x64>)
 8001114:	2208      	movs	r2, #8
 8001116:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_SPI1_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI1_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_SPI1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI1_Init+0x64>)
 800112c:	220a      	movs	r2, #10
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_SPI1_Init+0x64>)
 8001132:	f004 fa25 	bl	8005580 <HAL_SPI_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800113c:	f000 fc51 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000140 	.word	0x20000140
 8001148:	40013000 	.word	0x40013000

0800114c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b096      	sub	sp, #88	; 0x58
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
 800117a:	615a      	str	r2, [r3, #20]
 800117c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2220      	movs	r2, #32
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fce1 	bl	8006b4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <MX_TIM1_Init+0x16c>)
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <MX_TIM1_Init+0x170>)
 800118e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <MX_TIM1_Init+0x16c>)
 8001192:	2205      	movs	r2, #5
 8001194:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b48      	ldr	r3, [pc, #288]	; (80012b8 <MX_TIM1_Init+0x16c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800119c:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <MX_TIM1_Init+0x16c>)
 800119e:	2263      	movs	r2, #99	; 0x63
 80011a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <MX_TIM1_Init+0x16c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a8:	4b43      	ldr	r3, [pc, #268]	; (80012b8 <MX_TIM1_Init+0x16c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b42      	ldr	r3, [pc, #264]	; (80012b8 <MX_TIM1_Init+0x16c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b4:	4840      	ldr	r0, [pc, #256]	; (80012b8 <MX_TIM1_Init+0x16c>)
 80011b6:	f004 fa67 	bl	8005688 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011c0:	f000 fc0f 	bl	80019e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ce:	4619      	mov	r1, r3
 80011d0:	4839      	ldr	r0, [pc, #228]	; (80012b8 <MX_TIM1_Init+0x16c>)
 80011d2:	f004 ff41 	bl	8006058 <HAL_TIM_ConfigClockSource>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80011dc:	f000 fc01 	bl	80019e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011e0:	4835      	ldr	r0, [pc, #212]	; (80012b8 <MX_TIM1_Init+0x16c>)
 80011e2:	f004 fc01 	bl	80059e8 <HAL_TIM_PWM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011ec:	f000 fbf9 	bl	80019e2 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80011f0:	4831      	ldr	r0, [pc, #196]	; (80012b8 <MX_TIM1_Init+0x16c>)
 80011f2:	f004 fa98 	bl	8005726 <HAL_TIM_OC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80011fc:	f000 fbf1 	bl	80019e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001208:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800120c:	4619      	mov	r1, r3
 800120e:	482a      	ldr	r0, [pc, #168]	; (80012b8 <MX_TIM1_Init+0x16c>)
 8001210:	f005 faee 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800121a:	f000 fbe2 	bl	80019e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	2360      	movs	r3, #96	; 0x60
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800122e:	2304      	movs	r3, #4
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	481d      	ldr	r0, [pc, #116]	; (80012b8 <MX_TIM1_Init+0x16c>)
 8001244:	f004 fe46 	bl	8005ed4 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800124e:	f000 fbc8 	bl	80019e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8001256:	2332      	movs	r3, #50	; 0x32
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	2204      	movs	r2, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4814      	ldr	r0, [pc, #80]	; (80012b8 <MX_TIM1_Init+0x16c>)
 8001268:	f004 fdd8 	bl	8005e1c <HAL_TIM_OC_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001272:	f000 fbb6 	bl	80019e2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800128a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4807      	ldr	r0, [pc, #28]	; (80012b8 <MX_TIM1_Init+0x16c>)
 800129a:	f005 fb15 	bl	80068c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80012a4:	f000 fb9d 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <MX_TIM1_Init+0x16c>)
 80012aa:	f000 fee3 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80012ae:	bf00      	nop
 80012b0:	3758      	adds	r7, #88	; 0x58
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000198 	.word	0x20000198
 80012bc:	40012c00 	.word	0x40012c00

080012c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_TIM2_Init+0x94>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM2_Init+0x94>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_TIM2_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM2_Init+0x94>)
 80012f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM2_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_TIM2_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_TIM2_Init+0x94>)
 8001306:	f004 f9bf 	bl	8005688 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001310:	f000 fb67 	bl	80019e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM2_Init+0x94>)
 8001322:	f004 fe99 	bl	8006058 <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800132c:	f000 fb59 	bl	80019e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM2_Init+0x94>)
 800133e:	f005 fa57 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 fb4b 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200001e0 	.word	0x200001e0

08001358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_TIM3_Init+0xf8>)
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <MX_TIM3_Init+0xfc>)
 800138c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <MX_TIM3_Init+0xf8>)
 8001390:	2247      	movs	r2, #71	; 0x47
 8001392:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <MX_TIM3_Init+0xf8>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_TIM3_Init+0xf8>)
 800139c:	2263      	movs	r2, #99	; 0x63
 800139e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <MX_TIM3_Init+0xf8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_TIM3_Init+0xf8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ac:	4828      	ldr	r0, [pc, #160]	; (8001450 <MX_TIM3_Init+0xf8>)
 80013ae:	f004 f96b 	bl	8005688 <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80013b8:	f000 fb13 	bl	80019e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4821      	ldr	r0, [pc, #132]	; (8001450 <MX_TIM3_Init+0xf8>)
 80013ca:	f004 fe45 	bl	8006058 <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013d4:	f000 fb05 	bl	80019e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <MX_TIM3_Init+0xf8>)
 80013da:	f004 fb05 	bl	80059e8 <HAL_TIM_PWM_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80013e4:	f000 fafd 	bl	80019e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	4619      	mov	r1, r3
 80013f6:	4816      	ldr	r0, [pc, #88]	; (8001450 <MX_TIM3_Init+0xf8>)
 80013f8:	f005 f9fa 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001402:	f000 faee 	bl	80019e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001406:	2360      	movs	r3, #96	; 0x60
 8001408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_TIM3_Init+0xf8>)
 800141e:	f004 fd59 	bl	8005ed4 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001428:	f000 fadb 	bl	80019e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2204      	movs	r2, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM3_Init+0xf8>)
 8001434:	f004 fd4e 	bl	8005ed4 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800143e:	f000 fad0 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM3_Init+0xf8>)
 8001444:	f000 fe16 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	; 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000228 	.word	0x20000228
 8001454:	40000400 	.word	0x40000400

08001458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <MX_TIM4_Init+0xf8>)
 800148a:	4a32      	ldr	r2, [pc, #200]	; (8001554 <MX_TIM4_Init+0xfc>)
 800148c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MX_TIM4_Init+0xf8>)
 8001490:	2247      	movs	r2, #71	; 0x47
 8001492:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <MX_TIM4_Init+0xf8>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <MX_TIM4_Init+0xf8>)
 800149c:	2263      	movs	r2, #99	; 0x63
 800149e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <MX_TIM4_Init+0xf8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <MX_TIM4_Init+0xf8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014ac:	4828      	ldr	r0, [pc, #160]	; (8001550 <MX_TIM4_Init+0xf8>)
 80014ae:	f004 f8eb 	bl	8005688 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80014b8:	f000 fa93 	bl	80019e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4821      	ldr	r0, [pc, #132]	; (8001550 <MX_TIM4_Init+0xf8>)
 80014ca:	f004 fdc5 	bl	8006058 <HAL_TIM_ConfigClockSource>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80014d4:	f000 fa85 	bl	80019e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014d8:	481d      	ldr	r0, [pc, #116]	; (8001550 <MX_TIM4_Init+0xf8>)
 80014da:	f004 fa85 	bl	80059e8 <HAL_TIM_PWM_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80014e4:	f000 fa7d 	bl	80019e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	4619      	mov	r1, r3
 80014f6:	4816      	ldr	r0, [pc, #88]	; (8001550 <MX_TIM4_Init+0xf8>)
 80014f8:	f005 f97a 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001502:	f000 fa6e 	bl	80019e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001506:	2360      	movs	r3, #96	; 0x60
 8001508:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2208      	movs	r2, #8
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_TIM4_Init+0xf8>)
 800151e:	f004 fcd9 	bl	8005ed4 <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001528:	f000 fa5b 	bl	80019e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	220c      	movs	r2, #12
 8001530:	4619      	mov	r1, r3
 8001532:	4807      	ldr	r0, [pc, #28]	; (8001550 <MX_TIM4_Init+0xf8>)
 8001534:	f004 fcce 	bl	8005ed4 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800153e:	f000 fa50 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001542:	4803      	ldr	r0, [pc, #12]	; (8001550 <MX_TIM4_Init+0xf8>)
 8001544:	f000 fd96 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001548:	bf00      	nop
 800154a:	3738      	adds	r7, #56	; 0x38
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000270 	.word	0x20000270
 8001554:	40000800 	.word	0x40000800

08001558 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	; 0x38
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <MX_TIM5_Init+0xe4>)
 800158a:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <MX_TIM5_Init+0xe8>)
 800158c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <MX_TIM5_Init+0xe4>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <MX_TIM5_Init+0xe4>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <MX_TIM5_Init+0xe4>)
 800159c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <MX_TIM5_Init+0xe4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <MX_TIM5_Init+0xe4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015ae:	4823      	ldr	r0, [pc, #140]	; (800163c <MX_TIM5_Init+0xe4>)
 80015b0:	f004 f86a 	bl	8005688 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80015ba:	f000 fa12 	bl	80019e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c8:	4619      	mov	r1, r3
 80015ca:	481c      	ldr	r0, [pc, #112]	; (800163c <MX_TIM5_Init+0xe4>)
 80015cc:	f004 fd44 	bl	8006058 <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80015d6:	f000 fa04 	bl	80019e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM5_Init+0xe4>)
 80015dc:	f004 fa04 	bl	80059e8 <HAL_TIM_PWM_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80015e6:	f000 f9fc 	bl	80019e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	4619      	mov	r1, r3
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <MX_TIM5_Init+0xe4>)
 80015fa:	f005 f8f9 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001604:	f000 f9ed 	bl	80019e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001608:	2360      	movs	r3, #96	; 0x60
 800160a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2204      	movs	r2, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <MX_TIM5_Init+0xe4>)
 8001620:	f004 fc58 	bl	8005ed4 <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800162a:	f000 f9da 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <MX_TIM5_Init+0xe4>)
 8001630:	f000 fd20 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001634:	bf00      	nop
 8001636:	3738      	adds	r7, #56	; 0x38
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200002b8 	.word	0x200002b8
 8001640:	40000c00 	.word	0x40000c00

08001644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f005 f987 	bl	800698e <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 f9ac 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000300 	.word	0x20000300
 8001694:	40013800 	.word	0x40013800

08001698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_USART2_UART_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f005 f95d 	bl	800698e <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016da:	f000 f982 	bl	80019e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000348 	.word	0x20000348
 80016e8:	40004400 	.word	0x40004400

080016ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_DMA_Init+0x38>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <MX_DMA_Init+0x38>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_DMA_Init+0x38>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	200b      	movs	r0, #11
 8001710:	f001 fd39 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001714:	200b      	movs	r0, #11
 8001716:	f001 fd52 	bl	80031be <HAL_NVIC_EnableIRQ>

}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <MX_GPIO_Init+0xf8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a37      	ldr	r2, [pc, #220]	; (8001820 <MX_GPIO_Init+0xf8>)
 8001742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <MX_GPIO_Init+0xf8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b32      	ldr	r3, [pc, #200]	; (8001820 <MX_GPIO_Init+0xf8>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a31      	ldr	r2, [pc, #196]	; (8001820 <MX_GPIO_Init+0xf8>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <MX_GPIO_Init+0xf8>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <MX_GPIO_Init+0xf8>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <MX_GPIO_Init+0xf8>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b29      	ldr	r3, [pc, #164]	; (8001820 <MX_GPIO_Init+0xf8>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <MX_GPIO_Init+0xf8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a25      	ldr	r2, [pc, #148]	; (8001820 <MX_GPIO_Init+0xf8>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <MX_GPIO_Init+0xf8>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <MX_GPIO_Init+0xf8>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <MX_GPIO_Init+0xf8>)
 80017a2:	f043 0320 	orr.w	r3, r3, #32
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <MX_GPIO_Init+0xf8>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CPT_RST_Pin|CPT_INT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	211a      	movs	r1, #26
 80017b8:	481a      	ldr	r0, [pc, #104]	; (8001824 <MX_GPIO_Init+0xfc>)
 80017ba:	f002 f9ef 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|SPI1_CS_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80017c4:	4818      	ldr	r0, [pc, #96]	; (8001828 <MX_GPIO_Init+0x100>)
 80017c6:	f002 f9e9 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CPT_RST_Pin CPT_INT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = CPT_RST_Pin|CPT_INT_Pin|LCD_RST_Pin;
 80017ca:	231a      	movs	r3, #26
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2302      	movs	r3, #2
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	4619      	mov	r1, r3
 80017e0:	4810      	ldr	r0, [pc, #64]	; (8001824 <MX_GPIO_Init+0xfc>)
 80017e2:	f002 f847 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_CURRENT_ADC_Pin */
  GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_CURRENT_ADC_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	4619      	mov	r1, r3
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_GPIO_Init+0x104>)
 80017f6:	f002 f83d 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 SPI1_CS_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|SPI1_CS_Pin|GPIO_PIN_7;
 80017fa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2302      	movs	r3, #2
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 0318 	add.w	r3, r7, #24
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_GPIO_Init+0x100>)
 8001814:	f002 f82e 	bl	8003874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	40011800 	.word	0x40011800
 8001828:	40011400 	.word	0x40011400
 800182c:	40011000 	.word	0x40011000

08001830 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af02      	add	r7, sp, #8
 8001838:	6078      	str	r0, [r7, #4]
  asm("NOP");
 800183a:	bf00      	nop
  LDR_val[0] = adc_data[10] * 1.63f;
 800183c:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_ADC_ConvCpltCallback+0x17c>)
 800183e:	8a9b      	ldrh	r3, [r3, #20]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f96c 	bl	8000b20 <__aeabi_i2f>
 8001848:	4603      	mov	r3, r0
 800184a:	4959      	ldr	r1, [pc, #356]	; (80019b0 <HAL_ADC_ConvCpltCallback+0x180>)
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe15 	bl	800047c <__aeabi_fmul>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff f9b7 	bl	8000bc8 <__aeabi_f2iz>
 800185a:	4603      	mov	r3, r0
 800185c:	b21a      	sxth	r2, r3
 800185e:	4b55      	ldr	r3, [pc, #340]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 8001860:	801a      	strh	r2, [r3, #0]
  LDR_val[1] = adc_data[11];
 8001862:	4b52      	ldr	r3, [pc, #328]	; (80019ac <HAL_ADC_ConvCpltCallback+0x17c>)
 8001864:	8adb      	ldrh	r3, [r3, #22]
 8001866:	b29b      	uxth	r3, r3
 8001868:	b21a      	sxth	r2, r3
 800186a:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 800186c:	805a      	strh	r2, [r3, #2]
  LDR_val[2] = adc_data[12];
 800186e:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <HAL_ADC_ConvCpltCallback+0x17c>)
 8001870:	8b1b      	ldrh	r3, [r3, #24]
 8001872:	b29b      	uxth	r3, r3
 8001874:	b21a      	sxth	r2, r3
 8001876:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 8001878:	809a      	strh	r2, [r3, #4]
  LDR_val[3] = adc_data[13] * 0.5f;
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <HAL_ADC_ConvCpltCallback+0x17c>)
 800187c:	8b5b      	ldrh	r3, [r3, #26]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f94d 	bl	8000b20 <__aeabi_i2f>
 8001886:	4603      	mov	r3, r0
 8001888:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdf5 	bl	800047c <__aeabi_fmul>
 8001892:	4603      	mov	r3, r0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f997 	bl	8000bc8 <__aeabi_f2iz>
 800189a:	4603      	mov	r3, r0
 800189c:	b21a      	sxth	r2, r3
 800189e:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 80018a0:	80da      	strh	r2, [r3, #6]
  // CUR_IN = 4096;
  CUR_IN = 0;
 80018a2:	4945      	ldr	r1, [pc, #276]	; (80019b8 <HAL_ADC_ConvCpltCallback+0x188>)
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i = 0; i < 8; ++i) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e015      	b.n	80018e2 <HAL_ADC_ConvCpltCallback+0xb2>
    // CUR_IN = CUR_IN < adc_data[i] ? CUR_IN : adc_data[i];
    CUR_IN += adc_data[i];
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <HAL_ADC_ConvCpltCallback+0x17c>)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2200      	movs	r2, #0
 80018c4:	461c      	mov	r4, r3
 80018c6:	4615      	mov	r5, r2
 80018c8:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <HAL_ADC_ConvCpltCallback+0x188>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	eb14 0802 	adds.w	r8, r4, r2
 80018d2:	eb45 0903 	adc.w	r9, r5, r3
 80018d6:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_ADC_ConvCpltCallback+0x188>)
 80018d8:	e9c3 8900 	strd	r8, r9, [r3]
  for (int i = 0; i < 8; ++i) {
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3301      	adds	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	dde6      	ble.n	80018b6 <HAL_ADC_ConvCpltCallback+0x86>
  }
  CUR_IN /= 8;
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <HAL_ADC_ConvCpltCallback+0x188>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da05      	bge.n	80018fe <HAL_ADC_ConvCpltCallback+0xce>
 80018f2:	f112 0a07 	adds.w	sl, r2, #7
 80018f6:	f143 0b00 	adc.w	fp, r3, #0
 80018fa:	4652      	mov	r2, sl
 80018fc:	465b      	mov	r3, fp
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	08d0      	lsrs	r0, r2, #3
 8001908:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800190c:	10d9      	asrs	r1, r3, #3
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4929      	ldr	r1, [pc, #164]	; (80019b8 <HAL_ADC_ConvCpltCallback+0x188>)
 8001914:	e9c1 2300 	strd	r2, r3, [r1]
  SOLAR_TRACKER_track(LDR_val[0] + LDR_val[1], LDR_val[2] + LDR_val[3], &(TIM3->CCR1), &(TIM3->CCR2));
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 8001922:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	b218      	sxth	r0, r3
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 8001930:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 8001938:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800193c:	b29b      	uxth	r3, r3
 800193e:	4413      	add	r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	b219      	sxth	r1, r3
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_ADC_ConvCpltCallback+0x18c>)
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <HAL_ADC_ConvCpltCallback+0x190>)
 8001948:	f000 f908 	bl	8001b5c <SOLAR_TRACKER_track>
  SOLAR_TRACKER_track(LDR_val[1] + LDR_val[2], LDR_val[0] + LDR_val[3], &(TIM4->CCR3), &(TIM4->CCR4));
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 800194e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 8001956:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	b218      	sxth	r0, r3
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x184>)
 800196c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	b219      	sxth	r1, r3
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_ADC_ConvCpltCallback+0x194>)
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_ADC_ConvCpltCallback+0x198>)
 800197c:	f000 f8ee 	bl	8001b5c <SOLAR_TRACKER_track>
  MPPT_calculate(adc_data[8], CUR_IN, adc_data[9], 0, &(TIM1->CCR1));
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_ADC_ConvCpltCallback+0x17c>)
 8001982:	8a1b      	ldrh	r3, [r3, #16]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_ADC_ConvCpltCallback+0x188>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	4611      	mov	r1, r2
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_ADC_ConvCpltCallback+0x17c>)
 8001992:	8a5b      	ldrh	r3, [r3, #18]
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_ADC_ConvCpltCallback+0x19c>)
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2300      	movs	r3, #0
 800199e:	f000 f82b 	bl	80019f8 <MPPT_calculate>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ac:	20000390 	.word	0x20000390
 80019b0:	3fd0a3d7 	.word	0x3fd0a3d7
 80019b4:	200003b8 	.word	0x200003b8
 80019b8:	200003b0 	.word	0x200003b0
 80019bc:	40000438 	.word	0x40000438
 80019c0:	40000434 	.word	0x40000434
 80019c4:	40000840 	.word	0x40000840
 80019c8:	4000083c 	.word	0x4000083c
 80019cc:	40012c34 	.word	0x40012c34

080019d0 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  //   HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
  //   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
  //   HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 14);
  //   HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  // }
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e6:	b672      	cpsid	i
}
 80019e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    HAL_Delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 fd30 	bl	8002450 <HAL_Delay>
 80019f0:	e7fb      	b.n	80019ea <Error_Handler+0x8>
 80019f2:	0000      	movs	r0, r0
 80019f4:	0000      	movs	r0, r0
	...

080019f8 <MPPT_calculate>:
int prev_PWR_OUT = 0;
uint32_t prev_PWM_OUTPUT[2] = {0, 0};
int max_output_voltage = 1850; // corresponds to 12.6V
uint32_t max_PWM_OUTPUT = 30;

void MPPT_calculate(int VOL_IN, int CUR_IN, int VOL_OUT, int CUR_OUT, uint32_t *PWM_OUTPUT) {
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
    // MPPT algorithm
    VOL_IN += CUR_IN * 0.01; // compensate for voltage drop
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7fe ff3e 	bl	8000888 <__aeabi_i2d>
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	460d      	mov	r5, r1
 8001a10:	68b8      	ldr	r0, [r7, #8]
 8001a12:	f7fe ff39 	bl	8000888 <__aeabi_i2d>
 8001a16:	a346      	add	r3, pc, #280	; (adr r3, 8001b30 <MPPT_calculate+0x138>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fc04 	bl	8000228 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7fe fde2 	bl	80005f0 <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7fe ff92 	bl	800095c <__aeabi_d2iz>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]
    
    long PWR_IN = VOL_IN * CUR_IN;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	61bb      	str	r3, [r7, #24]
    // long PWR_OUT = VOL_OUT * CUR_OUT;
    int PWR_IN_isIncreased = PWR_IN >= prev_PWR_IN;
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <MPPT_calculate+0x140>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	bfac      	ite	ge
 8001a50:	2301      	movge	r3, #1
 8001a52:	2300      	movlt	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	617b      	str	r3, [r7, #20]
    // int PWR_OUT_isIncreased = PWR_OUT >= prev_PWR_OUT;
    int PWM_wasIncreased = prev_PWM_OUTPUT[0] >= prev_PWM_OUTPUT[1];
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <MPPT_calculate+0x144>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <MPPT_calculate+0x144>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	bf2c      	ite	cs
 8001a64:	2301      	movcs	r3, #1
 8001a66:	2300      	movcc	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	613b      	str	r3, [r7, #16]
    int _PWM_OUTPUT = *PWM_OUTPUT;
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	61fb      	str	r3, [r7, #28]
    if (PWR_IN_isIncreased && PWM_wasIncreased) {
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <MPPT_calculate+0x8e>
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <MPPT_calculate+0x8e>
        _PWM_OUTPUT += 1;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	e01c      	b.n	8001ac0 <MPPT_calculate+0xc8>
    } else if (!PWR_IN_isIncreased && !PWM_wasIncreased) {
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <MPPT_calculate+0xa2>
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d103      	bne.n	8001a9a <MPPT_calculate+0xa2>
        _PWM_OUTPUT += 1;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	e012      	b.n	8001ac0 <MPPT_calculate+0xc8>
    } else if (PWR_IN_isIncreased && !PWM_wasIncreased) {
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <MPPT_calculate+0xb6>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <MPPT_calculate+0xb6>
        _PWM_OUTPUT -= 1;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	e008      	b.n	8001ac0 <MPPT_calculate+0xc8>
    } else if (!PWR_IN_isIncreased && PWM_wasIncreased) {
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <MPPT_calculate+0xc8>
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <MPPT_calculate+0xc8>
        _PWM_OUTPUT -= 1;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	61fb      	str	r3, [r7, #28]
    }
    if (VOL_OUT > max_output_voltage) {
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MPPT_calculate+0x148>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dd07      	ble.n	8001ada <MPPT_calculate+0xe2>
        _PWM_OUTPUT -= 2;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b02      	subs	r3, #2
 8001ace:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	481b      	ldr	r0, [pc, #108]	; (8001b44 <MPPT_calculate+0x14c>)
 8001ad6:	f002 f861 	bl	8003b9c <HAL_GPIO_WritePin>
    }
    if (_PWM_OUTPUT > (int)max_PWM_OUTPUT) {
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MPPT_calculate+0x150>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	dd02      	ble.n	8001aec <MPPT_calculate+0xf4>
        _PWM_OUTPUT = max_PWM_OUTPUT;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MPPT_calculate+0x150>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61fb      	str	r3, [r7, #28]
    }
    if (_PWM_OUTPUT < 0) {
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da01      	bge.n	8001af6 <MPPT_calculate+0xfe>
        _PWM_OUTPUT = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    }
    prev_VOL_IN = VOL_IN;
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <MPPT_calculate+0x154>)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6013      	str	r3, [r2, #0]
    prev_CUR_IN = CUR_IN;
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <MPPT_calculate+0x158>)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	6013      	str	r3, [r2, #0]
    prev_VOL_OUT = VOL_OUT;
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <MPPT_calculate+0x15c>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6013      	str	r3, [r2, #0]
    prev_CUR_OUT = CUR_OUT;
 8001b08:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <MPPT_calculate+0x160>)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6013      	str	r3, [r2, #0]
    prev_PWR_IN = PWR_IN;
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <MPPT_calculate+0x140>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6013      	str	r3, [r2, #0]
    // prev_PWR_OUT = PWR_OUT;
    prev_PWM_OUTPUT[1] = prev_PWM_OUTPUT[0];
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MPPT_calculate+0x144>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <MPPT_calculate+0x144>)
 8001b1a:	6053      	str	r3, [r2, #4]
    prev_PWM_OUTPUT[0] = _PWM_OUTPUT;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <MPPT_calculate+0x144>)
 8001b20:	6013      	str	r3, [r2, #0]
    
    *PWM_OUTPUT = _PWM_OUTPUT;
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	601a      	str	r2, [r3, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b30:	47ae147b 	.word	0x47ae147b
 8001b34:	3f847ae1 	.word	0x3f847ae1
 8001b38:	200003c8 	.word	0x200003c8
 8001b3c:	200003d4 	.word	0x200003d4
 8001b40:	20000000 	.word	0x20000000
 8001b44:	40011400 	.word	0x40011400
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	200003c0 	.word	0x200003c0
 8001b50:	200003c4 	.word	0x200003c4
 8001b54:	200003cc 	.word	0x200003cc
 8001b58:	200003d0 	.word	0x200003d0

08001b5c <SOLAR_TRACKER_track>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int SOLAR_TRACKER_init(void);
int SOLAR_TRACKER_calibrate(void);
int SOLAR_TRACKER_track(int16_t LDR_VAL_A, int16_t LDR_VAL_B, uint32_t *MOTOR_OUTPUT_A, uint32_t *MOTOR_OUTPUT_B) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60ba      	str	r2, [r7, #8]
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4603      	mov	r3, r0
 8001b68:	81fb      	strh	r3, [r7, #14]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	81bb      	strh	r3, [r7, #12]
    if (LDR_VAL_A - LDR_VAL_B > diff_threshold) {
 8001b6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b76:	1ad2      	subs	r2, r2, r3
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <SOLAR_TRACKER_track+0x74>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dd08      	ble.n	8001b92 <SOLAR_TRACKER_track+0x36>
        *MOTOR_OUTPUT_A = MOTOR_MAX;
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <SOLAR_TRACKER_track+0x78>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = 0;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e017      	b.n	8001bc2 <SOLAR_TRACKER_track+0x66>
    } else if (LDR_VAL_B - LDR_VAL_A > diff_threshold) {
 8001b92:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <SOLAR_TRACKER_track+0x74>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dd08      	ble.n	8001bb6 <SOLAR_TRACKER_track+0x5a>
        *MOTOR_OUTPUT_A = 0;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = MOTOR_MAX;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <SOLAR_TRACKER_track+0x78>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e005      	b.n	8001bc2 <SOLAR_TRACKER_track+0x66>
    } else {
        *MOTOR_OUTPUT_A = 0;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
        *MOTOR_OUTPUT_B = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
    }
 8001bc2:	bf00      	nop
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	2000000c 	.word	0x2000000c

08001bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_MspInit+0x5c>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_MspInit+0x5c>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6193      	str	r3, [r2, #24]
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_MspInit+0x5c>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_MspInit+0x60>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_MspInit+0x60>)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000

08001c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <HAL_ADC_MspInit+0x124>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d17d      	bne.n	8001d58 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c5c:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a40      	ldr	r2, [pc, #256]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a3a      	ldr	r2, [pc, #232]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a34      	ldr	r2, [pc, #208]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a2e      	ldr	r2, [pc, #184]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_ADC_MspInit+0x128>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = INPUT_CURRENT_ADC_Pin|INPUT_VOLTAGE_ADC_Pin|OUTPUT_VOLTAGE_ADC_Pin|OUTPUT_CURRENT_ADC_Pin
 8001cbc:	233f      	movs	r3, #63	; 0x3f
 8001cbe:	61bb      	str	r3, [r7, #24]
                          |LDR2_ADC_Pin|LDR3_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4827      	ldr	r0, [pc, #156]	; (8001d68 <HAL_ADC_MspInit+0x12c>)
 8001ccc:	f001 fdd2 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR1_ADC_Pin;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR1_ADC_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4823      	ldr	r0, [pc, #140]	; (8001d6c <HAL_ADC_MspInit+0x130>)
 8001ce0:	f001 fdc8 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LDR4_ADC_Pin;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR4_ADC_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481f      	ldr	r0, [pc, #124]	; (8001d70 <HAL_ADC_MspInit+0x134>)
 8001cf4:	f001 fdbe 	bl	8003874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_ADC_MspInit+0x13c>)
 8001cfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d22:	2220      	movs	r2, #32
 8001d24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d2c:	4811      	ldr	r0, [pc, #68]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d2e:	f001 fa61 	bl	80031f4 <HAL_DMA_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001d38:	f7ff fe53 	bl	80019e2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d40:	621a      	str	r2, [r3, #32]
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_ADC_MspInit+0x138>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2012      	movs	r0, #18
 8001d4e:	f001 fa1a 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d52:	2012      	movs	r0, #18
 8001d54:	f001 fa33 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40012400 	.word	0x40012400
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40011000 	.word	0x40011000
 8001d6c:	40010800 	.word	0x40010800
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	2000006c 	.word	0x2000006c
 8001d78:	40020008 	.word	0x40020008

08001d7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_CAN_MspInit+0x8c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d131      	bne.n	8001e00 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_CAN_MspInit+0x90>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_CAN_MspInit+0x90>)
 8001da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da6:	61d3      	str	r3, [r2, #28]
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_CAN_MspInit+0x90>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_CAN_MspInit+0x90>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_CAN_MspInit+0x90>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_CAN_MspInit+0x90>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	480b      	ldr	r0, [pc, #44]	; (8001e10 <HAL_CAN_MspInit+0x94>)
 8001de2:	f001 fd47 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_CAN_MspInit+0x94>)
 8001dfc:	f001 fd3a 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40006400 	.word	0x40006400
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010800 	.word	0x40010800

08001e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_I2C_MspInit+0x70>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d123      	bne.n	8001e7c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_I2C_MspInit+0x74>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <HAL_I2C_MspInit+0x74>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_I2C_MspInit+0x74>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = CPT_SCL_Pin|CPT_SDA_Pin;
 8001e4c:	23c0      	movs	r3, #192	; 0xc0
 8001e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e50:	2312      	movs	r3, #18
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480b      	ldr	r0, [pc, #44]	; (8001e8c <HAL_I2C_MspInit+0x78>)
 8001e60:	f001 fd08 	bl	8003874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_I2C_MspInit+0x74>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_I2C_MspInit+0x74>)
 8001e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e6e:	61d3      	str	r3, [r2, #28]
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_I2C_MspInit+0x74>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40005400 	.word	0x40005400
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010c00 	.word	0x40010c00

08001e90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <HAL_RTC_MspInit+0x3c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d110      	bne.n	8001ec4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ea2:	f001 ffd7 	bl	8003e54 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RTC_MspInit+0x40>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RTC_MspInit+0x40>)
 8001eac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_RTC_MspInit+0x40>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RTC_MspInit+0x44>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40002800 	.word	0x40002800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	4242043c 	.word	0x4242043c

08001ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_SPI_MspInit+0xa4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d13d      	bne.n	8001f74 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_SPI_MspInit+0xa8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a20      	ldr	r2, [pc, #128]	; (8001f80 <HAL_SPI_MspInit+0xa8>)
 8001efe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_SPI_MspInit+0xa8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_SPI_MspInit+0xa8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_SPI_MspInit+0xa8>)
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_SPI_MspInit+0xa8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001f28:	2328      	movs	r3, #40	; 0x28
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <HAL_SPI_MspInit+0xac>)
 8001f3c:	f001 fc9a 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f40:	2310      	movs	r3, #16
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	480c      	ldr	r0, [pc, #48]	; (8001f84 <HAL_SPI_MspInit+0xac>)
 8001f54:	f001 fc8e 	bl	8003874 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_SPI_MspInit+0xb0>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <HAL_SPI_MspInit+0xb0>)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40013000 	.word	0x40013000
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	40010000 	.word	0x40010000

08001f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a31      	ldr	r2, [pc, #196]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d114      	bne.n	8001fc8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f9e:	4b31      	ldr	r3, [pc, #196]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	4a30      	ldr	r2, [pc, #192]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa8:	6193      	str	r3, [r2, #24]
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2102      	movs	r1, #2
 8001fba:	201b      	movs	r0, #27
 8001fbc:	f001 f8e3 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001fc0:	201b      	movs	r0, #27
 8001fc2:	f001 f8fc 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fc6:	e046      	b.n	8002056 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d10c      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a23      	ldr	r2, [pc, #140]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	61d3      	str	r3, [r2, #28]
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
}
 8001fea:	e034      	b.n	8002056 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_TIM_Base_MspInit+0xdc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10c      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	61d3      	str	r3, [r2, #28]
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]
}
 800200e:	e022      	b.n	8002056 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_TIM_Base_MspInit+0xe0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10c      	bne.n	8002034 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
}
 8002032:	e010      	b.n	8002056 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_TIM_Base_MspInit+0xe4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10b      	bne.n	8002056 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
}
 8002056:	bf00      	nop
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40012c00 	.word	0x40012c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40000400 	.word	0x40000400
 800206c:	40000800 	.word	0x40000800
 8002070:	40000c00 	.word	0x40000c00

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0318 	add.w	r3, r7, #24
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <HAL_TIM_MspPostInit+0x110>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d119      	bne.n	80020c8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MPPT_PWM_Pin;
 80020ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MPPT_PWM_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	4619      	mov	r1, r3
 80020c0:	4832      	ldr	r0, [pc, #200]	; (800218c <HAL_TIM_MspPostInit+0x118>)
 80020c2:	f001 fbd7 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80020c6:	e059      	b.n	800217c <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a30      	ldr	r2, [pc, #192]	; (8002190 <HAL_TIM_MspPostInit+0x11c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d118      	bne.n	8002104 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	4a2c      	ldr	r2, [pc, #176]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6193      	str	r3, [r2, #24]
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_PITCH_1_Pin|PWM_PITCH_2_Pin;
 80020ea:	23c0      	movs	r3, #192	; 0xc0
 80020ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2302      	movs	r3, #2
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	4619      	mov	r1, r3
 80020fc:	4823      	ldr	r0, [pc, #140]	; (800218c <HAL_TIM_MspPostInit+0x118>)
 80020fe:	f001 fbb9 	bl	8003874 <HAL_GPIO_Init>
}
 8002102:	e03b      	b.n	800217c <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <HAL_TIM_MspPostInit+0x120>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d119      	bne.n	8002142 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	6193      	str	r3, [r2, #24]
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_YAW_1_Pin|PWM_YAW_2_Pin;
 8002126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800212a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2302      	movs	r3, #2
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0318 	add.w	r3, r7, #24
 8002138:	4619      	mov	r1, r3
 800213a:	4817      	ldr	r0, [pc, #92]	; (8002198 <HAL_TIM_MspPostInit+0x124>)
 800213c:	f001 fb9a 	bl	8003874 <HAL_GPIO_Init>
}
 8002140:	e01c      	b.n	800217c <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM5)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a15      	ldr	r2, [pc, #84]	; (800219c <HAL_TIM_MspPostInit+0x128>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d117      	bne.n	800217c <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_TIM_MspPostInit+0x114>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8002164:	2302      	movs	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_TIM_MspPostInit+0x118>)
 8002178:	f001 fb7c 	bl	8003874 <HAL_GPIO_Init>
}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40012c00 	.word	0x40012c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40010800 	.word	0x40010800
 8002190:	40000400 	.word	0x40000400
 8002194:	40000800 	.word	0x40000800
 8002198:	40010c00 	.word	0x40010c00
 800219c:	40000c00 	.word	0x40000c00

080021a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0318 	add.w	r3, r7, #24
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a37      	ldr	r2, [pc, #220]	; (8002298 <HAL_UART_MspInit+0xf8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d132      	bne.n	8002226 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_UART_MspInit+0xfc>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a35      	ldr	r2, [pc, #212]	; (800229c <HAL_UART_MspInit+0xfc>)
 80021c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_UART_MspInit+0xfc>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_UART_MspInit+0xfc>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_UART_MspInit+0xfc>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_UART_MspInit+0xfc>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 0318 	add.w	r3, r7, #24
 8002202:	4619      	mov	r1, r3
 8002204:	4826      	ldr	r0, [pc, #152]	; (80022a0 <HAL_UART_MspInit+0x100>)
 8002206:	f001 fb35 	bl	8003874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 0318 	add.w	r3, r7, #24
 800221c:	4619      	mov	r1, r3
 800221e:	4820      	ldr	r0, [pc, #128]	; (80022a0 <HAL_UART_MspInit+0x100>)
 8002220:	f001 fb28 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002224:	e034      	b.n	8002290 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <HAL_UART_MspInit+0x104>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d12f      	bne.n	8002290 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_UART_MspInit+0xfc>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	4a19      	ldr	r2, [pc, #100]	; (800229c <HAL_UART_MspInit+0xfc>)
 8002236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223a:	61d3      	str	r3, [r2, #28]
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_UART_MspInit+0xfc>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_UART_MspInit+0xfc>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_UART_MspInit+0xfc>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_UART_MspInit+0xfc>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002260:	2304      	movs	r3, #4
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 0318 	add.w	r3, r7, #24
 8002270:	4619      	mov	r1, r3
 8002272:	480b      	ldr	r0, [pc, #44]	; (80022a0 <HAL_UART_MspInit+0x100>)
 8002274:	f001 fafe 	bl	8003874 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002278:	2308      	movs	r3, #8
 800227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	4619      	mov	r1, r3
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_UART_MspInit+0x100>)
 800228c:	f001 faf2 	bl	8003874 <HAL_GPIO_Init>
}
 8002290:	bf00      	nop
 8002292:	3728      	adds	r7, #40	; 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40013800 	.word	0x40013800
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010800 	.word	0x40010800
 80022a4:	40004400 	.word	0x40004400

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022ac:	e7fe      	b.n	80022ac <NMI_Handler+0x4>

080022ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <MemManage_Handler+0x4>

080022ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <BusFault_Handler+0x4>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <UsageFault_Handler+0x4>

080022c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ee:	f000 f893 	bl	8002418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <DMA1_Channel1_IRQHandler+0x10>)
 80022fe:	f001 f84f 	bl	80033a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000006c 	.word	0x2000006c

0800230c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <ADC1_2_IRQHandler+0x10>)
 8002312:	f000 fa89 	bl	8002828 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000003c 	.word	0x2000003c

08002320 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIM1_CC_IRQHandler+0x10>)
 8002326:	f003 fc71 	bl	8005c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000198 	.word	0x20000198

08002334 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 8002340:	f7ff fff8 	bl	8002334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002344:	480b      	ldr	r0, [pc, #44]	; (8002374 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002346:	490c      	ldr	r1, [pc, #48]	; (8002378 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002348:	4a0c      	ldr	r2, [pc, #48]	; (800237c <LoopFillZerobss+0x16>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800234c:	e002      	b.n	8002354 <LoopCopyDataInit>

0800234e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002352:	3304      	adds	r3, #4

08002354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002358:	d3f9      	bcc.n	800234e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800235c:	4c09      	ldr	r4, [pc, #36]	; (8002384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002360:	e001      	b.n	8002366 <LoopFillZerobss>

08002362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002364:	3204      	adds	r2, #4

08002366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002368:	d3fb      	bcc.n	8002362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800236a:	f004 fbf7 	bl	8006b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800236e:	f7fe fc51 	bl	8000c14 <main>
  bx lr
 8002372:	4770      	bx	lr
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800237c:	08006c04 	.word	0x08006c04
  ldr r2, =_sbss
 8002380:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002384:	200003e0 	.word	0x200003e0

08002388 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC3_IRQHandler>
	...

0800238c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_Init+0x28>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_Init+0x28>)
 8002396:	f043 0310 	orr.w	r3, r3, #16
 800239a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239c:	2003      	movs	r0, #3
 800239e:	f000 fee7 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a2:	200f      	movs	r0, #15
 80023a4:	f000 f808 	bl	80023b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a8:	f7ff fc16 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40022000 	.word	0x40022000

080023b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_InitTick+0x54>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_InitTick+0x58>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 feff 	bl	80031da <HAL_SYSTICK_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00e      	b.n	8002404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d80a      	bhi.n	8002402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f000 fec7 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_InitTick+0x5c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000010 	.word	0x20000010
 8002410:	20000018 	.word	0x20000018
 8002414:	20000014 	.word	0x20000014

08002418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_IncTick+0x1c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_IncTick+0x20>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4413      	add	r3, r2
 8002428:	4a03      	ldr	r2, [pc, #12]	; (8002438 <HAL_IncTick+0x20>)
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	20000018 	.word	0x20000018
 8002438:	200003dc 	.word	0x200003dc

0800243c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b02      	ldr	r3, [pc, #8]	; (800244c <HAL_GetTick+0x10>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	200003dc 	.word	0x200003dc

08002450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff fff0 	bl	800243c <HAL_GetTick>
 800245c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d005      	beq.n	8002476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_Delay+0x44>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002476:	bf00      	nop
 8002478:	f7ff ffe0 	bl	800243c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	429a      	cmp	r2, r3
 8002486:	d8f7      	bhi.n	8002478 <HAL_Delay+0x28>
  {
  }
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000018 	.word	0x20000018

08002498 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0ce      	b.n	8002658 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fbb0 	bl	8001c3c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fbcf 	bl	8002c80 <ADC_ConversionStop_Disable>
 80024e2:	4603      	mov	r3, r0
 80024e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 80a9 	bne.w	8002646 <HAL_ADC_Init+0x1ae>
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80a5 	bne.w	8002646 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002504:	f023 0302 	bic.w	r3, r3, #2
 8002508:	f043 0202 	orr.w	r2, r3, #2
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4951      	ldr	r1, [pc, #324]	; (8002660 <HAL_ADC_Init+0x1c8>)
 800251a:	428b      	cmp	r3, r1
 800251c:	d10a      	bne.n	8002534 <HAL_ADC_Init+0x9c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002526:	d002      	beq.n	800252e <HAL_ADC_Init+0x96>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	e004      	b.n	8002538 <HAL_ADC_Init+0xa0>
 800252e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002532:	e001      	b.n	8002538 <HAL_ADC_Init+0xa0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002538:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7b1b      	ldrb	r3, [r3, #12]
 800253e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002540:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4313      	orrs	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002550:	d003      	beq.n	800255a <HAL_ADC_Init+0xc2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_ADC_Init+0xc8>
 800255a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255e:	e000      	b.n	8002562 <HAL_ADC_Init+0xca>
 8002560:	2300      	movs	r3, #0
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7d1b      	ldrb	r3, [r3, #20]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d119      	bne.n	80025a4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7b1b      	ldrb	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	3b01      	subs	r3, #1
 800257e:	035a      	lsls	r2, r3, #13
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	e00b      	b.n	80025a4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_ADC_Init+0x1cc>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d4:	d003      	beq.n	80025de <HAL_ADC_Init+0x146>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d104      	bne.n	80025e8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	051b      	lsls	r3, r3, #20
 80025e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_ADC_Init+0x1d0>)
 8002604:	4013      	ands	r3, r2
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	429a      	cmp	r2, r3
 800260a:	d10b      	bne.n	8002624 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002622:	e018      	b.n	8002656 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f023 0312 	bic.w	r3, r3, #18
 800262c:	f043 0210 	orr.w	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002644:	e007      	b.n	8002656 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002656:	7dfb      	ldrb	r3, [r7, #23]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40013c00 	.word	0x40013c00
 8002664:	ffe1f7fd 	.word	0xffe1f7fd
 8002668:	ff1f0efe 	.word	0xff1f0efe

0800266c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a64      	ldr	r2, [pc, #400]	; (8002814 <HAL_ADC_Start_DMA+0x1a8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_ADC_Start_DMA+0x24>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a63      	ldr	r2, [pc, #396]	; (8002818 <HAL_ADC_Start_DMA+0x1ac>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d106      	bne.n	800269e <HAL_ADC_Start_DMA+0x32>
 8002690:	4b60      	ldr	r3, [pc, #384]	; (8002814 <HAL_ADC_Start_DMA+0x1a8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 80b3 	bne.w	8002804 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_Start_DMA+0x40>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e0ae      	b.n	800280a <HAL_ADC_Start_DMA+0x19e>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fa89 	bl	8002bcc <ADC_Enable>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f040 809a 	bne.w	80027fa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a4e      	ldr	r2, [pc, #312]	; (8002818 <HAL_ADC_Start_DMA+0x1ac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d105      	bne.n	80026f0 <HAL_ADC_Start_DMA+0x84>
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_ADC_Start_DMA+0x1a8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d115      	bne.n	800271c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d026      	beq.n	8002758 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002712:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800271a:	e01d      	b.n	8002758 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a39      	ldr	r2, [pc, #228]	; (8002814 <HAL_ADC_Start_DMA+0x1a8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_ADC_Start_DMA+0xd0>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a38      	ldr	r2, [pc, #224]	; (8002818 <HAL_ADC_Start_DMA+0x1ac>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10d      	bne.n	8002758 <HAL_ADC_Start_DMA+0xec>
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_ADC_Start_DMA+0x1a8>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002750:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	f023 0206 	bic.w	r2, r3, #6
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002770:	e002      	b.n	8002778 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a25      	ldr	r2, [pc, #148]	; (800281c <HAL_ADC_Start_DMA+0x1b0>)
 8002786:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a24      	ldr	r2, [pc, #144]	; (8002820 <HAL_ADC_Start_DMA+0x1b4>)
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a23      	ldr	r2, [pc, #140]	; (8002824 <HAL_ADC_Start_DMA+0x1b8>)
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0202 	mvn.w	r2, #2
 80027a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a18      	ldr	r0, [r3, #32]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	334c      	adds	r3, #76	; 0x4c
 80027bc:	4619      	mov	r1, r3
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f000 fd8d 	bl	80032e0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027d4:	d108      	bne.n	80027e8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80027e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80027e6:	e00f      	b.n	8002808 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80027f8:	e006      	b.n	8002808 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002802:	e001      	b.n	8002808 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002808:	7dfb      	ldrb	r3, [r7, #23]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40012400 	.word	0x40012400
 8002818:	40012800 	.word	0x40012800
 800281c:	08002d03 	.word	0x08002d03
 8002820:	08002d7f 	.word	0x08002d7f
 8002824:	08002d9b 	.word	0x08002d9b

08002828 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d03e      	beq.n	80028c8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d039      	beq.n	80028c8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d105      	bne.n	800286c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002876:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800287a:	d11d      	bne.n	80028b8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002880:	2b00      	cmp	r3, #0
 8002882:	d119      	bne.n	80028b8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0220 	bic.w	r2, r2, #32
 8002892:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7fe ffb9 	bl	8001830 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f06f 0212 	mvn.w	r2, #18
 80028c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d04d      	beq.n	800296e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d048      	beq.n	800296e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80028fe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002902:	d012      	beq.n	800292a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800290e:	2b00      	cmp	r3, #0
 8002910:	d125      	bne.n	800295e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800291c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002920:	d11d      	bne.n	800295e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	d119      	bne.n	800295e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002938:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa35 	bl	8002dce <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 020c 	mvn.w	r2, #12
 800296c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f812 	bl	80029b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0201 	mvn.w	r2, #1
 800299c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x20>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e0dc      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x1da>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d81c      	bhi.n	8002a46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b05      	subs	r3, #5
 8002a1e:	221f      	movs	r2, #31
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4019      	ands	r1, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	3b05      	subs	r3, #5
 8002a38:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
 8002a44:	e03c      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d81c      	bhi.n	8002a88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b23      	subs	r3, #35	; 0x23
 8002a60:	221f      	movs	r2, #31
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	4019      	ands	r1, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	3b23      	subs	r3, #35	; 0x23
 8002a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
 8002a86:	e01b      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	3b41      	subs	r3, #65	; 0x41
 8002a9a:	221f      	movs	r2, #31
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	4019      	ands	r1, r3
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b41      	subs	r3, #65	; 0x41
 8002ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	d91c      	bls.n	8002b02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68d9      	ldr	r1, [r3, #12]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b1e      	subs	r3, #30
 8002ada:	2207      	movs	r2, #7
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	4019      	ands	r1, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6898      	ldr	r0, [r3, #8]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	3b1e      	subs	r3, #30
 8002af4:	fa00 f203 	lsl.w	r2, r0, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]
 8002b00:	e019      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6919      	ldr	r1, [r3, #16]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	2207      	movs	r2, #7
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	4019      	ands	r1, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6898      	ldr	r0, [r3, #8]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d003      	beq.n	8002b46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b42:	2b11      	cmp	r3, #17
 8002b44:	d132      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d125      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d126      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d11a      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	0c9a      	lsrs	r2, r3, #18
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b8c:	e002      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f9      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x1b2>
 8002b9a:	e007      	b.n	8002bac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40012400 	.word	0x40012400
 8002bc4:	20000010 	.word	0x20000010
 8002bc8:	431bde83 	.word	0x431bde83

08002bcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d040      	beq.n	8002c6c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <ADC_Enable+0xac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <ADC_Enable+0xb0>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	0c9b      	lsrs	r3, r3, #18
 8002c06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c08:	e002      	b.n	8002c10 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f9      	bne.n	8002c0a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c16:	f7ff fc11 	bl	800243c <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c1c:	e01f      	b.n	8002c5e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c1e:	f7ff fc0d 	bl	800243c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d918      	bls.n	8002c5e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d011      	beq.n	8002c5e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e007      	b.n	8002c6e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d1d8      	bne.n	8002c1e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000010 	.word	0x20000010
 8002c7c:	431bde83 	.word	0x431bde83

08002c80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d12e      	bne.n	8002cf8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002caa:	f7ff fbc7 	bl	800243c <HAL_GetTick>
 8002cae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cb0:	e01b      	b.n	8002cea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cb2:	f7ff fbc3 	bl	800243c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d914      	bls.n	8002cea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10d      	bne.n	8002cea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	f043 0210 	orr.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e007      	b.n	8002cfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d0dc      	beq.n	8002cb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d127      	bne.n	8002d6c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d36:	d115      	bne.n	8002d64 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7fe fd63 	bl	8001830 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d6a:	e004      	b.n	8002d76 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff fe0a 	bl	80029a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff fe02 	bl	80029ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0ed      	b.n	8002fce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe ffbc 	bl	8001d7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e14:	f7ff fb12 	bl	800243c <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e1a:	e012      	b.n	8002e42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e1c:	f7ff fb0e 	bl	800243c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d90b      	bls.n	8002e42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2205      	movs	r2, #5
 8002e3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0c5      	b.n	8002fce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0e5      	beq.n	8002e1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0202 	bic.w	r2, r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7ff faec 	bl	800243c <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e66:	e012      	b.n	8002e8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e68:	f7ff fae8 	bl	800243c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b0a      	cmp	r3, #10
 8002e74:	d90b      	bls.n	8002e8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2205      	movs	r2, #5
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e09f      	b.n	8002fce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e5      	bne.n	8002e68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d108      	bne.n	8002eb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e007      	b.n	8002ec6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7e5b      	ldrb	r3, [r3, #25]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d108      	bne.n	8002ee0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e007      	b.n	8002ef0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7e9b      	ldrb	r3, [r3, #26]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d108      	bne.n	8002f0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0220 	orr.w	r2, r2, #32
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e007      	b.n	8002f1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0220 	bic.w	r2, r2, #32
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7edb      	ldrb	r3, [r3, #27]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0210 	bic.w	r2, r2, #16
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e007      	b.n	8002f44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0210 	orr.w	r2, r2, #16
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7f1b      	ldrb	r3, [r3, #28]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d108      	bne.n	8002f5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0208 	orr.w	r2, r2, #8
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e007      	b.n	8002f6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0208 	bic.w	r2, r2, #8
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7f5b      	ldrb	r3, [r3, #29]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d108      	bne.n	8002f88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0204 	orr.w	r2, r2, #4
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e007      	b.n	8002f98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	ea42 0103 	orr.w	r1, r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4906      	ldr	r1, [pc, #24]	; (8003070 <__NVIC_EnableIRQ+0x34>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff90 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff2d 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff42 	bl	8003020 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff90 	bl	80030c8 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5f 	bl	8003074 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff35 	bl	800303c <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa2 	bl	800312c <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e059      	b.n	80032be <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_DMA_Init+0xd4>)
 8003212:	429a      	cmp	r2, r3
 8003214:	d80f      	bhi.n	8003236 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_DMA_Init+0xd8>)
 800321e:	4413      	add	r3, r2
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_DMA_Init+0xdc>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	009a      	lsls	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <HAL_DMA_Init+0xe0>)
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
 8003234:	e00e      	b.n	8003254 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <HAL_DMA_Init+0xe4>)
 800323e:	4413      	add	r3, r2
 8003240:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <HAL_DMA_Init+0xdc>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	009a      	lsls	r2, r3, #2
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a22      	ldr	r2, [pc, #136]	; (80032dc <HAL_DMA_Init+0xe8>)
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800326a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800326e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40020407 	.word	0x40020407
 80032cc:	bffdfff8 	.word	0xbffdfff8
 80032d0:	cccccccd 	.word	0xcccccccd
 80032d4:	40020000 	.word	0x40020000
 80032d8:	bffdfbf8 	.word	0xbffdfbf8
 80032dc:	40020400 	.word	0x40020400

080032e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_DMA_Start_IT+0x20>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e04b      	b.n	8003398 <HAL_DMA_Start_IT+0xb8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d13a      	bne.n	800338a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fa6d 	bl	8003818 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 020e 	orr.w	r2, r2, #14
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e00f      	b.n	8003378 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 020a 	orr.w	r2, r2, #10
 8003376:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e005      	b.n	8003396 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2204      	movs	r2, #4
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80f1 	beq.w	80035ac <HAL_DMA_IRQHandler+0x20c>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80eb 	beq.w	80035ac <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0204 	bic.w	r2, r2, #4
 80033f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_DMA_IRQHandler+0x1d8>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d958      	bls.n	80034b2 <HAL_DMA_IRQHandler+0x112>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5d      	ldr	r2, [pc, #372]	; (800357c <HAL_DMA_IRQHandler+0x1dc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d04f      	beq.n	80034aa <HAL_DMA_IRQHandler+0x10a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5c      	ldr	r2, [pc, #368]	; (8003580 <HAL_DMA_IRQHandler+0x1e0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d048      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x106>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5a      	ldr	r2, [pc, #360]	; (8003584 <HAL_DMA_IRQHandler+0x1e4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d040      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x100>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a59      	ldr	r2, [pc, #356]	; (8003588 <HAL_DMA_IRQHandler+0x1e8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d038      	beq.n	800349a <HAL_DMA_IRQHandler+0xfa>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a57      	ldr	r2, [pc, #348]	; (800358c <HAL_DMA_IRQHandler+0x1ec>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d030      	beq.n	8003494 <HAL_DMA_IRQHandler+0xf4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_DMA_IRQHandler+0x1f0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d028      	beq.n	800348e <HAL_DMA_IRQHandler+0xee>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <HAL_DMA_IRQHandler+0x1d8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d020      	beq.n	8003488 <HAL_DMA_IRQHandler+0xe8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a52      	ldr	r2, [pc, #328]	; (8003594 <HAL_DMA_IRQHandler+0x1f4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d019      	beq.n	8003484 <HAL_DMA_IRQHandler+0xe4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a50      	ldr	r2, [pc, #320]	; (8003598 <HAL_DMA_IRQHandler+0x1f8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d012      	beq.n	8003480 <HAL_DMA_IRQHandler+0xe0>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a4f      	ldr	r2, [pc, #316]	; (800359c <HAL_DMA_IRQHandler+0x1fc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00a      	beq.n	800347a <HAL_DMA_IRQHandler+0xda>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a4d      	ldr	r2, [pc, #308]	; (80035a0 <HAL_DMA_IRQHandler+0x200>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d102      	bne.n	8003474 <HAL_DMA_IRQHandler+0xd4>
 800346e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003472:	e01b      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 8003474:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003478:	e018      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 800347a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800347e:	e015      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 8003480:	2340      	movs	r3, #64	; 0x40
 8003482:	e013      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 8003484:	2304      	movs	r3, #4
 8003486:	e011      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 8003488:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800348c:	e00e      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 800348e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003492:	e00b      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 8003494:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003498:	e008      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 800349a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800349e:	e005      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 80034a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a4:	e002      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 80034a6:	2340      	movs	r3, #64	; 0x40
 80034a8:	e000      	b.n	80034ac <HAL_DMA_IRQHandler+0x10c>
 80034aa:	2304      	movs	r3, #4
 80034ac:	4a3d      	ldr	r2, [pc, #244]	; (80035a4 <HAL_DMA_IRQHandler+0x204>)
 80034ae:	6053      	str	r3, [r2, #4]
 80034b0:	e057      	b.n	8003562 <HAL_DMA_IRQHandler+0x1c2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_DMA_IRQHandler+0x1dc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04f      	beq.n	800355c <HAL_DMA_IRQHandler+0x1bc>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <HAL_DMA_IRQHandler+0x1e0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d048      	beq.n	8003558 <HAL_DMA_IRQHandler+0x1b8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_DMA_IRQHandler+0x1e4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_DMA_IRQHandler+0x1b2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2c      	ldr	r2, [pc, #176]	; (8003588 <HAL_DMA_IRQHandler+0x1e8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d038      	beq.n	800354c <HAL_DMA_IRQHandler+0x1ac>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_DMA_IRQHandler+0x1ec>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d030      	beq.n	8003546 <HAL_DMA_IRQHandler+0x1a6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <HAL_DMA_IRQHandler+0x1f0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d028      	beq.n	8003540 <HAL_DMA_IRQHandler+0x1a0>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a21      	ldr	r2, [pc, #132]	; (8003578 <HAL_DMA_IRQHandler+0x1d8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d020      	beq.n	800353a <HAL_DMA_IRQHandler+0x19a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_DMA_IRQHandler+0x1f4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d019      	beq.n	8003536 <HAL_DMA_IRQHandler+0x196>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <HAL_DMA_IRQHandler+0x1f8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d012      	beq.n	8003532 <HAL_DMA_IRQHandler+0x192>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <HAL_DMA_IRQHandler+0x1fc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00a      	beq.n	800352c <HAL_DMA_IRQHandler+0x18c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_DMA_IRQHandler+0x200>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d102      	bne.n	8003526 <HAL_DMA_IRQHandler+0x186>
 8003520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003524:	e01b      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 8003526:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800352a:	e018      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 800352c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003530:	e015      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	e013      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 8003536:	2304      	movs	r3, #4
 8003538:	e011      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 800353a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800353e:	e00e      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 8003540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003544:	e00b      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 8003546:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800354a:	e008      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 800354c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003550:	e005      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 8003552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003556:	e002      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 8003558:	2340      	movs	r3, #64	; 0x40
 800355a:	e000      	b.n	800355e <HAL_DMA_IRQHandler+0x1be>
 800355c:	2304      	movs	r3, #4
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <HAL_DMA_IRQHandler+0x208>)
 8003560:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8136 	beq.w	80037d8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003574:	e130      	b.n	80037d8 <HAL_DMA_IRQHandler+0x438>
 8003576:	bf00      	nop
 8003578:	40020080 	.word	0x40020080
 800357c:	40020008 	.word	0x40020008
 8003580:	4002001c 	.word	0x4002001c
 8003584:	40020030 	.word	0x40020030
 8003588:	40020044 	.word	0x40020044
 800358c:	40020058 	.word	0x40020058
 8003590:	4002006c 	.word	0x4002006c
 8003594:	40020408 	.word	0x40020408
 8003598:	4002041c 	.word	0x4002041c
 800359c:	40020430 	.word	0x40020430
 80035a0:	40020444 	.word	0x40020444
 80035a4:	40020400 	.word	0x40020400
 80035a8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2202      	movs	r2, #2
 80035b2:	409a      	lsls	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80dd 	beq.w	8003778 <HAL_DMA_IRQHandler+0x3d8>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80d7 	beq.w	8003778 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 020a 	bic.w	r2, r2, #10
 80035e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b7b      	ldr	r3, [pc, #492]	; (80037e4 <HAL_DMA_IRQHandler+0x444>)
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d958      	bls.n	80036ae <HAL_DMA_IRQHandler+0x30e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a79      	ldr	r2, [pc, #484]	; (80037e8 <HAL_DMA_IRQHandler+0x448>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d04f      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x306>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a78      	ldr	r2, [pc, #480]	; (80037ec <HAL_DMA_IRQHandler+0x44c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d048      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x302>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a76      	ldr	r2, [pc, #472]	; (80037f0 <HAL_DMA_IRQHandler+0x450>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d040      	beq.n	800369c <HAL_DMA_IRQHandler+0x2fc>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a75      	ldr	r2, [pc, #468]	; (80037f4 <HAL_DMA_IRQHandler+0x454>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d038      	beq.n	8003696 <HAL_DMA_IRQHandler+0x2f6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a73      	ldr	r2, [pc, #460]	; (80037f8 <HAL_DMA_IRQHandler+0x458>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d030      	beq.n	8003690 <HAL_DMA_IRQHandler+0x2f0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a72      	ldr	r2, [pc, #456]	; (80037fc <HAL_DMA_IRQHandler+0x45c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d028      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ea>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a69      	ldr	r2, [pc, #420]	; (80037e4 <HAL_DMA_IRQHandler+0x444>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d020      	beq.n	8003684 <HAL_DMA_IRQHandler+0x2e4>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <HAL_DMA_IRQHandler+0x460>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d019      	beq.n	8003680 <HAL_DMA_IRQHandler+0x2e0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6c      	ldr	r2, [pc, #432]	; (8003804 <HAL_DMA_IRQHandler+0x464>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d012      	beq.n	800367c <HAL_DMA_IRQHandler+0x2dc>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6b      	ldr	r2, [pc, #428]	; (8003808 <HAL_DMA_IRQHandler+0x468>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00a      	beq.n	8003676 <HAL_DMA_IRQHandler+0x2d6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a69      	ldr	r2, [pc, #420]	; (800380c <HAL_DMA_IRQHandler+0x46c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d102      	bne.n	8003670 <HAL_DMA_IRQHandler+0x2d0>
 800366a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800366e:	e01b      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 8003670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003674:	e018      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 8003676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367a:	e015      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 800367c:	2320      	movs	r3, #32
 800367e:	e013      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 8003680:	2302      	movs	r3, #2
 8003682:	e011      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 8003684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003688:	e00e      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 800368a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800368e:	e00b      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 8003690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003694:	e008      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 8003696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800369a:	e005      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 800369c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a0:	e002      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 80036a2:	2320      	movs	r3, #32
 80036a4:	e000      	b.n	80036a8 <HAL_DMA_IRQHandler+0x308>
 80036a6:	2302      	movs	r3, #2
 80036a8:	4a59      	ldr	r2, [pc, #356]	; (8003810 <HAL_DMA_IRQHandler+0x470>)
 80036aa:	6053      	str	r3, [r2, #4]
 80036ac:	e057      	b.n	800375e <HAL_DMA_IRQHandler+0x3be>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4d      	ldr	r2, [pc, #308]	; (80037e8 <HAL_DMA_IRQHandler+0x448>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04f      	beq.n	8003758 <HAL_DMA_IRQHandler+0x3b8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4b      	ldr	r2, [pc, #300]	; (80037ec <HAL_DMA_IRQHandler+0x44c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d048      	beq.n	8003754 <HAL_DMA_IRQHandler+0x3b4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <HAL_DMA_IRQHandler+0x450>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d040      	beq.n	800374e <HAL_DMA_IRQHandler+0x3ae>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a48      	ldr	r2, [pc, #288]	; (80037f4 <HAL_DMA_IRQHandler+0x454>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d038      	beq.n	8003748 <HAL_DMA_IRQHandler+0x3a8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a47      	ldr	r2, [pc, #284]	; (80037f8 <HAL_DMA_IRQHandler+0x458>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d030      	beq.n	8003742 <HAL_DMA_IRQHandler+0x3a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a45      	ldr	r2, [pc, #276]	; (80037fc <HAL_DMA_IRQHandler+0x45c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d028      	beq.n	800373c <HAL_DMA_IRQHandler+0x39c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <HAL_DMA_IRQHandler+0x444>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d020      	beq.n	8003736 <HAL_DMA_IRQHandler+0x396>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a41      	ldr	r2, [pc, #260]	; (8003800 <HAL_DMA_IRQHandler+0x460>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d019      	beq.n	8003732 <HAL_DMA_IRQHandler+0x392>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a40      	ldr	r2, [pc, #256]	; (8003804 <HAL_DMA_IRQHandler+0x464>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d012      	beq.n	800372e <HAL_DMA_IRQHandler+0x38e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a3e      	ldr	r2, [pc, #248]	; (8003808 <HAL_DMA_IRQHandler+0x468>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00a      	beq.n	8003728 <HAL_DMA_IRQHandler+0x388>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a3d      	ldr	r2, [pc, #244]	; (800380c <HAL_DMA_IRQHandler+0x46c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d102      	bne.n	8003722 <HAL_DMA_IRQHandler+0x382>
 800371c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003720:	e01b      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 8003722:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003726:	e018      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 8003728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372c:	e015      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 800372e:	2320      	movs	r3, #32
 8003730:	e013      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 8003732:	2302      	movs	r3, #2
 8003734:	e011      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 8003736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373a:	e00e      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 800373c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003740:	e00b      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 8003742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003746:	e008      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 8003748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800374c:	e005      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 800374e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003752:	e002      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 8003754:	2320      	movs	r3, #32
 8003756:	e000      	b.n	800375a <HAL_DMA_IRQHandler+0x3ba>
 8003758:	2302      	movs	r3, #2
 800375a:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <HAL_DMA_IRQHandler+0x474>)
 800375c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d034      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003776:	e02f      	b.n	80037d8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2208      	movs	r2, #8
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d028      	beq.n	80037da <HAL_DMA_IRQHandler+0x43a>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 020e 	bic.w	r2, r2, #14
 80037a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
    }
  }
  return;
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
}
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40020080 	.word	0x40020080
 80037e8:	40020008 	.word	0x40020008
 80037ec:	4002001c 	.word	0x4002001c
 80037f0:	40020030 	.word	0x40020030
 80037f4:	40020044 	.word	0x40020044
 80037f8:	40020058 	.word	0x40020058
 80037fc:	4002006c 	.word	0x4002006c
 8003800:	40020408 	.word	0x40020408
 8003804:	4002041c 	.word	0x4002041c
 8003808:	40020430 	.word	0x40020430
 800380c:	40020444 	.word	0x40020444
 8003810:	40020400 	.word	0x40020400
 8003814:	40020000 	.word	0x40020000

08003818 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f202 	lsl.w	r2, r1, r2
 8003834:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b10      	cmp	r3, #16
 8003844:	d108      	bne.n	8003858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003856:	e007      	b.n	8003868 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
	...

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b08b      	sub	sp, #44	; 0x2c
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003886:	e179      	b.n	8003b7c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003888:	2201      	movs	r2, #1
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	f040 8168 	bne.w	8003b76 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4a96      	ldr	r2, [pc, #600]	; (8003b04 <HAL_GPIO_Init+0x290>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d05e      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038b0:	4a94      	ldr	r2, [pc, #592]	; (8003b04 <HAL_GPIO_Init+0x290>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d875      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038b6:	4a94      	ldr	r2, [pc, #592]	; (8003b08 <HAL_GPIO_Init+0x294>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d058      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038bc:	4a92      	ldr	r2, [pc, #584]	; (8003b08 <HAL_GPIO_Init+0x294>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d86f      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038c2:	4a92      	ldr	r2, [pc, #584]	; (8003b0c <HAL_GPIO_Init+0x298>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d052      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038c8:	4a90      	ldr	r2, [pc, #576]	; (8003b0c <HAL_GPIO_Init+0x298>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d869      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038ce:	4a90      	ldr	r2, [pc, #576]	; (8003b10 <HAL_GPIO_Init+0x29c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04c      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038d4:	4a8e      	ldr	r2, [pc, #568]	; (8003b10 <HAL_GPIO_Init+0x29c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d863      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038da:	4a8e      	ldr	r2, [pc, #568]	; (8003b14 <HAL_GPIO_Init+0x2a0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d046      	beq.n	800396e <HAL_GPIO_Init+0xfa>
 80038e0:	4a8c      	ldr	r2, [pc, #560]	; (8003b14 <HAL_GPIO_Init+0x2a0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d85d      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038e6:	2b12      	cmp	r3, #18
 80038e8:	d82a      	bhi.n	8003940 <HAL_GPIO_Init+0xcc>
 80038ea:	2b12      	cmp	r3, #18
 80038ec:	d859      	bhi.n	80039a2 <HAL_GPIO_Init+0x12e>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <HAL_GPIO_Init+0x80>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	0800396f 	.word	0x0800396f
 80038f8:	08003949 	.word	0x08003949
 80038fc:	0800395b 	.word	0x0800395b
 8003900:	0800399d 	.word	0x0800399d
 8003904:	080039a3 	.word	0x080039a3
 8003908:	080039a3 	.word	0x080039a3
 800390c:	080039a3 	.word	0x080039a3
 8003910:	080039a3 	.word	0x080039a3
 8003914:	080039a3 	.word	0x080039a3
 8003918:	080039a3 	.word	0x080039a3
 800391c:	080039a3 	.word	0x080039a3
 8003920:	080039a3 	.word	0x080039a3
 8003924:	080039a3 	.word	0x080039a3
 8003928:	080039a3 	.word	0x080039a3
 800392c:	080039a3 	.word	0x080039a3
 8003930:	080039a3 	.word	0x080039a3
 8003934:	080039a3 	.word	0x080039a3
 8003938:	08003951 	.word	0x08003951
 800393c:	08003965 	.word	0x08003965
 8003940:	4a75      	ldr	r2, [pc, #468]	; (8003b18 <HAL_GPIO_Init+0x2a4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003946:	e02c      	b.n	80039a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	623b      	str	r3, [r7, #32]
          break;
 800394e:	e029      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	3304      	adds	r3, #4
 8003956:	623b      	str	r3, [r7, #32]
          break;
 8003958:	e024      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	3308      	adds	r3, #8
 8003960:	623b      	str	r3, [r7, #32]
          break;
 8003962:	e01f      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	330c      	adds	r3, #12
 800396a:	623b      	str	r3, [r7, #32]
          break;
 800396c:	e01a      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003976:	2304      	movs	r3, #4
 8003978:	623b      	str	r3, [r7, #32]
          break;
 800397a:	e013      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003984:	2308      	movs	r3, #8
 8003986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	611a      	str	r2, [r3, #16]
          break;
 800398e:	e009      	b.n	80039a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003990:	2308      	movs	r3, #8
 8003992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	615a      	str	r2, [r3, #20]
          break;
 800399a:	e003      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800399c:	2300      	movs	r3, #0
 800399e:	623b      	str	r3, [r7, #32]
          break;
 80039a0:	e000      	b.n	80039a4 <HAL_GPIO_Init+0x130>
          break;
 80039a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2bff      	cmp	r3, #255	; 0xff
 80039a8:	d801      	bhi.n	80039ae <HAL_GPIO_Init+0x13a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	e001      	b.n	80039b2 <HAL_GPIO_Init+0x13e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2bff      	cmp	r3, #255	; 0xff
 80039b8:	d802      	bhi.n	80039c0 <HAL_GPIO_Init+0x14c>
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	e002      	b.n	80039c6 <HAL_GPIO_Init+0x152>
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	3b08      	subs	r3, #8
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	210f      	movs	r1, #15
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	6a39      	ldr	r1, [r7, #32]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	431a      	orrs	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80c1 	beq.w	8003b76 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039f4:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <HAL_GPIO_Init+0x2a8>)
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	4a48      	ldr	r2, [pc, #288]	; (8003b1c <HAL_GPIO_Init+0x2a8>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6193      	str	r3, [r2, #24]
 8003a00:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_GPIO_Init+0x2a8>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a0c:	4a44      	ldr	r2, [pc, #272]	; (8003b20 <HAL_GPIO_Init+0x2ac>)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	220f      	movs	r2, #15
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <HAL_GPIO_Init+0x2b0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01f      	beq.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <HAL_GPIO_Init+0x2b4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d019      	beq.n	8003a74 <HAL_GPIO_Init+0x200>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3a      	ldr	r2, [pc, #232]	; (8003b2c <HAL_GPIO_Init+0x2b8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_GPIO_Init+0x1fc>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a39      	ldr	r2, [pc, #228]	; (8003b30 <HAL_GPIO_Init+0x2bc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00d      	beq.n	8003a6c <HAL_GPIO_Init+0x1f8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a38      	ldr	r2, [pc, #224]	; (8003b34 <HAL_GPIO_Init+0x2c0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <HAL_GPIO_Init+0x1f4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a37      	ldr	r2, [pc, #220]	; (8003b38 <HAL_GPIO_Init+0x2c4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_GPIO_Init+0x1f0>
 8003a60:	2305      	movs	r3, #5
 8003a62:	e00a      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a64:	2306      	movs	r3, #6
 8003a66:	e008      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e006      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e004      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e002      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_GPIO_Init+0x206>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	f002 0203 	and.w	r2, r2, #3
 8003a80:	0092      	lsls	r2, r2, #2
 8003a82:	4093      	lsls	r3, r2
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a8a:	4925      	ldr	r1, [pc, #148]	; (8003b20 <HAL_GPIO_Init+0x2ac>)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4924      	ldr	r1, [pc, #144]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ab2:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4920      	ldr	r1, [pc, #128]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60cb      	str	r3, [r1, #12]
 8003ad8:	e006      	b.n	8003ae8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	4916      	ldr	r1, [pc, #88]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d025      	beq.n	8003b40 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4910      	ldr	r1, [pc, #64]	; (8003b3c <HAL_GPIO_Init+0x2c8>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	e025      	b.n	8003b4e <HAL_GPIO_Init+0x2da>
 8003b02:	bf00      	nop
 8003b04:	10320000 	.word	0x10320000
 8003b08:	10310000 	.word	0x10310000
 8003b0c:	10220000 	.word	0x10220000
 8003b10:	10210000 	.word	0x10210000
 8003b14:	10120000 	.word	0x10120000
 8003b18:	10110000 	.word	0x10110000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40010800 	.word	0x40010800
 8003b28:	40010c00 	.word	0x40010c00
 8003b2c:	40011000 	.word	0x40011000
 8003b30:	40011400 	.word	0x40011400
 8003b34:	40011800 	.word	0x40011800
 8003b38:	40011c00 	.word	0x40011c00
 8003b3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	4913      	ldr	r1, [pc, #76]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
 8003b66:	e006      	b.n	8003b76 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	4909      	ldr	r1, [pc, #36]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	3301      	adds	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f47f ae7e 	bne.w	8003888 <HAL_GPIO_Init+0x14>
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	372c      	adds	r7, #44	; 0x2c
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40010400 	.word	0x40010400

08003b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	787b      	ldrb	r3, [r7, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bb8:	e003      	b.n	8003bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	041a      	lsls	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e12b      	b.n	8003e36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fe f90e 	bl	8001e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c30:	f000 fce6 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8003c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4a81      	ldr	r2, [pc, #516]	; (8003e40 <HAL_I2C_Init+0x274>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d807      	bhi.n	8003c50 <HAL_I2C_Init+0x84>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a80      	ldr	r2, [pc, #512]	; (8003e44 <HAL_I2C_Init+0x278>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	bf94      	ite	ls
 8003c48:	2301      	movls	r3, #1
 8003c4a:	2300      	movhi	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e006      	b.n	8003c5e <HAL_I2C_Init+0x92>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a7d      	ldr	r2, [pc, #500]	; (8003e48 <HAL_I2C_Init+0x27c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	bf94      	ite	ls
 8003c58:	2301      	movls	r3, #1
 8003c5a:	2300      	movhi	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e0e7      	b.n	8003e36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a78      	ldr	r2, [pc, #480]	; (8003e4c <HAL_I2C_Init+0x280>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	0c9b      	lsrs	r3, r3, #18
 8003c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4a6a      	ldr	r2, [pc, #424]	; (8003e40 <HAL_I2C_Init+0x274>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d802      	bhi.n	8003ca0 <HAL_I2C_Init+0xd4>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	e009      	b.n	8003cb4 <HAL_I2C_Init+0xe8>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	4a69      	ldr	r2, [pc, #420]	; (8003e50 <HAL_I2C_Init+0x284>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	495c      	ldr	r1, [pc, #368]	; (8003e40 <HAL_I2C_Init+0x274>)
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	d819      	bhi.n	8003d08 <HAL_I2C_Init+0x13c>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e59      	subs	r1, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce2:	1c59      	adds	r1, r3, #1
 8003ce4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ce8:	400b      	ands	r3, r1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_I2C_Init+0x138>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1e59      	subs	r1, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d02:	e051      	b.n	8003da8 <HAL_I2C_Init+0x1dc>
 8003d04:	2304      	movs	r3, #4
 8003d06:	e04f      	b.n	8003da8 <HAL_I2C_Init+0x1dc>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d111      	bne.n	8003d34 <HAL_I2C_Init+0x168>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e012      	b.n	8003d5a <HAL_I2C_Init+0x18e>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	0099      	lsls	r1, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Init+0x196>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e022      	b.n	8003da8 <HAL_I2C_Init+0x1dc>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10e      	bne.n	8003d88 <HAL_I2C_Init+0x1bc>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1e58      	subs	r0, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	440b      	add	r3, r1
 8003d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d86:	e00f      	b.n	8003da8 <HAL_I2C_Init+0x1dc>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1e58      	subs	r0, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	0099      	lsls	r1, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	6809      	ldr	r1, [r1, #0]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6911      	ldr	r1, [r2, #16]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	4311      	orrs	r1, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	000186a0 	.word	0x000186a0
 8003e44:	001e847f 	.word	0x001e847f
 8003e48:	003d08ff 	.word	0x003d08ff
 8003e4c:	431bde83 	.word	0x431bde83
 8003e50:	10624dd3 	.word	0x10624dd3

08003e54 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	420e0020 	.word	0x420e0020

08003e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e272      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8087 	beq.w	8003f9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e8c:	4b92      	ldr	r3, [pc, #584]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d00c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e98:	4b8f      	ldr	r3, [pc, #572]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d112      	bne.n	8003eca <HAL_RCC_OscConfig+0x5e>
 8003ea4:	4b8c      	ldr	r3, [pc, #560]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d10b      	bne.n	8003eca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb2:	4b89      	ldr	r3, [pc, #548]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d06c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x12c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d168      	bne.n	8003f98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e24c      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x76>
 8003ed4:	4b80      	ldr	r3, [pc, #512]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a7f      	ldr	r2, [pc, #508]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	e02e      	b.n	8003f40 <HAL_RCC_OscConfig+0xd4>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x98>
 8003eea:	4b7b      	ldr	r3, [pc, #492]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7a      	ldr	r2, [pc, #488]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b78      	ldr	r3, [pc, #480]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a77      	ldr	r2, [pc, #476]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e01d      	b.n	8003f40 <HAL_RCC_OscConfig+0xd4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0xbc>
 8003f0e:	4b72      	ldr	r3, [pc, #456]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a71      	ldr	r2, [pc, #452]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b6f      	ldr	r3, [pc, #444]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e00b      	b.n	8003f40 <HAL_RCC_OscConfig+0xd4>
 8003f28:	4b6b      	ldr	r3, [pc, #428]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6a      	ldr	r2, [pc, #424]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b68      	ldr	r3, [pc, #416]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a67      	ldr	r2, [pc, #412]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d013      	beq.n	8003f70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fe fa78 	bl	800243c <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fe fa74 	bl	800243c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e200      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b5d      	ldr	r3, [pc, #372]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0xe4>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fe fa64 	bl	800243c <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fe fa60 	bl	800243c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e1ec      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x10c>
 8003f96:	e000      	b.n	8003f9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d063      	beq.n	800406e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fa6:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fb2:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x18c>
 8003fbe:	4b46      	ldr	r3, [pc, #280]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d116      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x176>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e1c0      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe2:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4939      	ldr	r1, [pc, #228]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff6:	e03a      	b.n	800406e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <HAL_RCC_OscConfig+0x270>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fe fa19 	bl	800243c <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400e:	f7fe fa15 	bl	800243c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e1a1      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4927      	ldr	r1, [pc, #156]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]
 8004040:	e015      	b.n	800406e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004042:	4b26      	ldr	r3, [pc, #152]	; (80040dc <HAL_RCC_OscConfig+0x270>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fe f9f8 	bl	800243c <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004050:	f7fe f9f4 	bl	800243c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e180      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03a      	beq.n	80040f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d019      	beq.n	80040b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004088:	f7fe f9d8 	bl	800243c <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004090:	f7fe f9d4 	bl	800243c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e160      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ae:	2001      	movs	r0, #1
 80040b0:	f000 face 	bl	8004650 <RCC_Delay>
 80040b4:	e01c      	b.n	80040f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040bc:	f7fe f9be 	bl	800243c <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c2:	e00f      	b.n	80040e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fe f9ba 	bl	800243c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d908      	bls.n	80040e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e146      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	42420000 	.word	0x42420000
 80040e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	4b92      	ldr	r3, [pc, #584]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e9      	bne.n	80040c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a6 	beq.w	800424a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004102:	4b8b      	ldr	r3, [pc, #556]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10d      	bne.n	800412a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	4b88      	ldr	r3, [pc, #544]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	4a87      	ldr	r2, [pc, #540]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	61d3      	str	r3, [r2, #28]
 800411a:	4b85      	ldr	r3, [pc, #532]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b82      	ldr	r3, [pc, #520]	; (8004334 <HAL_RCC_OscConfig+0x4c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d118      	bne.n	8004168 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004136:	4b7f      	ldr	r3, [pc, #508]	; (8004334 <HAL_RCC_OscConfig+0x4c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a7e      	ldr	r2, [pc, #504]	; (8004334 <HAL_RCC_OscConfig+0x4c8>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004142:	f7fe f97b 	bl	800243c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fe f977 	bl	800243c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b64      	cmp	r3, #100	; 0x64
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e103      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	4b75      	ldr	r3, [pc, #468]	; (8004334 <HAL_RCC_OscConfig+0x4c8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x312>
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4a6e      	ldr	r2, [pc, #440]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6213      	str	r3, [r2, #32]
 800417c:	e02d      	b.n	80041da <HAL_RCC_OscConfig+0x36e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x334>
 8004186:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a69      	ldr	r2, [pc, #420]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a66      	ldr	r2, [pc, #408]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	6213      	str	r3, [r2, #32]
 800419e:	e01c      	b.n	80041da <HAL_RCC_OscConfig+0x36e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b05      	cmp	r3, #5
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCC_OscConfig+0x356>
 80041a8:	4b61      	ldr	r3, [pc, #388]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a60      	ldr	r2, [pc, #384]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	f043 0304 	orr.w	r3, r3, #4
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4a5d      	ldr	r2, [pc, #372]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6213      	str	r3, [r2, #32]
 80041c0:	e00b      	b.n	80041da <HAL_RCC_OscConfig+0x36e>
 80041c2:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a5a      	ldr	r2, [pc, #360]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6213      	str	r3, [r2, #32]
 80041ce:	4b58      	ldr	r3, [pc, #352]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a57      	ldr	r2, [pc, #348]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d015      	beq.n	800420e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fe f92b 	bl	800243c <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fe f927 	bl	800243c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e0b1      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004200:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ee      	beq.n	80041ea <HAL_RCC_OscConfig+0x37e>
 800420c:	e014      	b.n	8004238 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420e:	f7fe f915 	bl	800243c <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f7fe f911 	bl	800243c <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e09b      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422c:	4b40      	ldr	r3, [pc, #256]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ee      	bne.n	8004216 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a3b      	ldr	r2, [pc, #236]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004248:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 8087 	beq.w	8004362 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004254:	4b36      	ldr	r3, [pc, #216]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	2b08      	cmp	r3, #8
 800425e:	d061      	beq.n	8004324 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d146      	bne.n	80042f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004268:	4b33      	ldr	r3, [pc, #204]	; (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fe f8e5 	bl	800243c <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004276:	f7fe f8e1 	bl	800243c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e06d      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004288:	4b29      	ldr	r3, [pc, #164]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f0      	bne.n	8004276 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d108      	bne.n	80042b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	4921      	ldr	r1, [pc, #132]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b0:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a19      	ldr	r1, [r3, #32]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	430b      	orrs	r3, r1
 80042c2:	491b      	ldr	r1, [pc, #108]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ce:	f7fe f8b5 	bl	800243c <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d6:	f7fe f8b1 	bl	800243c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e03d      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x46a>
 80042f4:	e035      	b.n	8004362 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe f89e 	bl	800243c <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004304:	f7fe f89a 	bl	800243c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e026      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x498>
 8004322:	e01e      	b.n	8004362 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e019      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
 8004330:	40021000 	.word	0x40021000
 8004334:	40007000 	.word	0x40007000
 8004338:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_OscConfig+0x500>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	429a      	cmp	r2, r3
 800434e:	d106      	bne.n	800435e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d001      	beq.n	8004362 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000

08004370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0d0      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004384:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d910      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b67      	ldr	r3, [pc, #412]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 0207 	bic.w	r2, r3, #7
 800439a:	4965      	ldr	r1, [pc, #404]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b63      	ldr	r3, [pc, #396]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b8      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e4:	4b53      	ldr	r3, [pc, #332]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f0:	4b50      	ldr	r3, [pc, #320]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	494d      	ldr	r1, [pc, #308]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d040      	beq.n	8004490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b47      	ldr	r3, [pc, #284]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d115      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e07f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442e:	4b41      	ldr	r3, [pc, #260]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e073      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443e:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e06b      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800444e:	4b39      	ldr	r3, [pc, #228]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f023 0203 	bic.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4936      	ldr	r1, [pc, #216]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004460:	f7fd ffec 	bl	800243c <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	e00a      	b.n	800447e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004468:	f7fd ffe8 	bl	800243c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e053      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 020c 	and.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	429a      	cmp	r2, r3
 800448e:	d1eb      	bne.n	8004468 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d210      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 0207 	bic.w	r2, r3, #7
 80044a6:	4922      	ldr	r1, [pc, #136]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e032      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4916      	ldr	r1, [pc, #88]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044fe:	f000 f821 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	490a      	ldr	r1, [pc, #40]	; (8004538 <HAL_RCC_ClockConfig+0x1c8>)
 8004510:	5ccb      	ldrb	r3, [r1, r3]
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <HAL_RCC_ClockConfig+0x1cc>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_RCC_ClockConfig+0x1d0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd ff4a 	bl	80023b8 <HAL_InitTick>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40022000 	.word	0x40022000
 8004534:	40021000 	.word	0x40021000
 8004538:	08006bbc 	.word	0x08006bbc
 800453c:	20000010 	.word	0x20000010
 8004540:	20000014 	.word	0x20000014

08004544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800455e:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d002      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x30>
 800456e:	2b08      	cmp	r3, #8
 8004570:	d003      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x36>
 8004572:	e027      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCC_GetSysClockFreq+0x98>)
 8004576:	613b      	str	r3, [r7, #16]
      break;
 8004578:	e027      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	0c9b      	lsrs	r3, r3, #18
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004592:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	0c5b      	lsrs	r3, r3, #17
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <HAL_RCC_GetSysClockFreq+0x98>)
 80045a6:	fb03 f202 	mul.w	r2, r3, r2
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e004      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045b8:	fb02 f303 	mul.w	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	613b      	str	r3, [r7, #16]
      break;
 80045c2:	e002      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetSysClockFreq+0x98>)
 80045c6:	613b      	str	r3, [r7, #16]
      break;
 80045c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ca:	693b      	ldr	r3, [r7, #16]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	007a1200 	.word	0x007a1200
 80045e0:	08006bd4 	.word	0x08006bd4
 80045e4:	08006be4 	.word	0x08006be4
 80045e8:	003d0900 	.word	0x003d0900

080045ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f0:	4b02      	ldr	r3, [pc, #8]	; (80045fc <HAL_RCC_GetHCLKFreq+0x10>)
 80045f2:	681b      	ldr	r3, [r3, #0]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	20000010 	.word	0x20000010

08004600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004604:	f7ff fff2 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40021000 	.word	0x40021000
 8004624:	08006bcc 	.word	0x08006bcc

08004628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800462c:	f7ff ffde 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	0adb      	lsrs	r3, r3, #11
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	; (800464c <HAL_RCC_GetPCLK2Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	08006bcc 	.word	0x08006bcc

08004650 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <RCC_Delay+0x34>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <RCC_Delay+0x38>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	0a5b      	lsrs	r3, r3, #9
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800466c:	bf00      	nop
  }
  while (Delay --);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1e5a      	subs	r2, r3, #1
 8004672:	60fa      	str	r2, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f9      	bne.n	800466c <RCC_Delay+0x1c>
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr
 8004684:	20000010 	.word	0x20000010
 8004688:	10624dd3 	.word	0x10624dd3

0800468c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d07d      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80046a8:	2300      	movs	r3, #0
 80046aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ac:	4b4f      	ldr	r3, [pc, #316]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b4c      	ldr	r3, [pc, #304]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4a4b      	ldr	r2, [pc, #300]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	61d3      	str	r3, [r2, #28]
 80046c4:	4b49      	ldr	r3, [pc, #292]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d118      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a42      	ldr	r2, [pc, #264]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ec:	f7fd fea6 	bl	800243c <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	e008      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f4:	f7fd fea2 	bl	800243c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	; 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e06d      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004706:	4b3a      	ldr	r3, [pc, #232]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004712:	4b36      	ldr	r3, [pc, #216]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02e      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d027      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004730:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800473a:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004740:	4b2c      	ldr	r3, [pc, #176]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004746:	4a29      	ldr	r2, [pc, #164]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d014      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fd fe71 	bl	800243c <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fd fe6d 	bl	800243c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e036      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ee      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4917      	ldr	r1, [pc, #92]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478e:	4313      	orrs	r3, r2
 8004790:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	4a13      	ldr	r2, [pc, #76]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	490b      	ldr	r1, [pc, #44]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4904      	ldr	r1, [pc, #16]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40007000 	.word	0x40007000
 80047f4:	42420440 	.word	0x42420440

080047f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3b01      	subs	r3, #1
 8004818:	2b0f      	cmp	r3, #15
 800481a:	f200 80af 	bhi.w	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	080048fb 	.word	0x080048fb
 8004828:	08004961 	.word	0x08004961
 800482c:	0800497d 	.word	0x0800497d
 8004830:	080048eb 	.word	0x080048eb
 8004834:	0800497d 	.word	0x0800497d
 8004838:	0800497d 	.word	0x0800497d
 800483c:	0800497d 	.word	0x0800497d
 8004840:	080048f3 	.word	0x080048f3
 8004844:	0800497d 	.word	0x0800497d
 8004848:	0800497d 	.word	0x0800497d
 800484c:	0800497d 	.word	0x0800497d
 8004850:	0800497d 	.word	0x0800497d
 8004854:	0800497d 	.word	0x0800497d
 8004858:	0800497d 	.word	0x0800497d
 800485c:	0800497d 	.word	0x0800497d
 8004860:	08004865 	.word	0x08004865
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004864:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800486a:	4b49      	ldr	r3, [pc, #292]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8084 	beq.w	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	0c9b      	lsrs	r3, r3, #18
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	4a44      	ldr	r2, [pc, #272]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8004882:	5cd3      	ldrb	r3, [r2, r3]
 8004884:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004890:	4b3f      	ldr	r3, [pc, #252]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	0c5b      	lsrs	r3, r3, #17
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800489c:	5cd3      	ldrb	r3, [r2, r3]
 800489e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80048aa:	4a3c      	ldr	r2, [pc, #240]	; (800499c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	fb02 f303 	mul.w	r3, r2, r3
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	e004      	b.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80048c6:	4b32      	ldr	r3, [pc, #200]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d2:	d102      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80048d8:	e052      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4a31      	ldr	r2, [pc, #196]	; (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	61bb      	str	r3, [r7, #24]
      break;
 80048e8:	e04a      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80048ea:	f7ff fe2b 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 80048ee:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80048f0:	e049      	b.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80048f2:	f7ff fe27 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 80048f6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80048f8:	e045      	b.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80048fa:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490a:	d108      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8004916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	e01f      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004928:	d109      	bne.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800492a:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8004936:	f649 4340 	movw	r3, #40000	; 0x9c40
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	e00f      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004948:	d11c      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8004956:	f24f 4324 	movw	r3, #62500	; 0xf424
 800495a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800495c:	e012      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800495e:	e011      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004960:	f7ff fe62 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	0b9b      	lsrs	r3, r3, #14
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	3301      	adds	r3, #1
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	61bb      	str	r3, [r7, #24]
      break;
 800497a:	e004      	b.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800497c:	bf00      	nop
 800497e:	e002      	b.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8004984:	bf00      	nop
    }
  }
  return (frequency);
 8004986:	69bb      	ldr	r3, [r7, #24]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	08006be8 	.word	0x08006be8
 8004998:	08006bf8 	.word	0x08006bf8
 800499c:	007a1200 	.word	0x007a1200
 80049a0:	003d0900 	.word	0x003d0900
 80049a4:	aaaaaaab 	.word	0xaaaaaaab

080049a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e07a      	b.n	8004ab4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7c5b      	ldrb	r3, [r3, #17]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd fa5e 	bl	8001e90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fb2f 	bl	800503e <HAL_RTC_WaitForSynchro>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d004      	beq.n	80049f0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2204      	movs	r2, #4
 80049ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e061      	b.n	8004ab4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fbe8 	bl	80051c6 <RTC_EnterInitMode>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2204      	movs	r2, #4
 8004a00:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e056      	b.n	8004ab4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0207 	bic.w	r2, r2, #7
 8004a14:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004a1e:	4b27      	ldr	r3, [pc, #156]	; (8004abc <HAL_RTC_Init+0x114>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4a26      	ldr	r2, [pc, #152]	; (8004abc <HAL_RTC_Init+0x114>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <HAL_RTC_Init+0x114>)
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4921      	ldr	r1, [pc, #132]	; (8004abc <HAL_RTC_Init+0x114>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d003      	beq.n	8004a4e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e00e      	b.n	8004a6c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f7ff fed2 	bl	80047f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a54:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e026      	b.n	8004ab4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	0c1a      	lsrs	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f002 020f 	and.w	r2, r2, #15
 8004a78:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	b292      	uxth	r2, r2
 8004a82:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fbc6 	bl	8005216 <RTC_ExitInitMode>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d004      	beq.n	8004a9a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2204      	movs	r2, #4
 8004a94:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e00c      	b.n	8004ab4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
  }
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40006c00 	.word	0x40006c00

08004ac0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RTC_SetTime+0x20>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e080      	b.n	8004be6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	7c1b      	ldrb	r3, [r3, #16]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_RTC_SetTime+0x30>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e07a      	b.n	8004be6 <HAL_RTC_SetTime+0x126>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2202      	movs	r2, #2
 8004afa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d113      	bne.n	8004b2a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004b0c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	4619      	mov	r1, r3
 8004b16:	460b      	mov	r3, r1
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a5b      	subs	r3, r3, r1
 8004b1c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b1e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004b24:	4413      	add	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e01e      	b.n	8004b68 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fbb6 	bl	80052a0 <RTC_Bcd2ToByte>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004b3c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fbab 	bl	80052a0 <RTC_Bcd2ToByte>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004b56:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	789b      	ldrb	r3, [r3, #2]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fb9f 	bl	80052a0 <RTC_Bcd2ToByte>
 8004b62:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004b64:	4423      	add	r3, r4
 8004b66:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b68:	6979      	ldr	r1, [r7, #20]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fac4 	bl	80050f8 <RTC_WriteTimeCounter>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e02f      	b.n	8004be6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0205 	bic.w	r2, r2, #5
 8004b94:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fad5 	bl	8005146 <RTC_ReadAlarmCounter>
 8004b9c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d018      	beq.n	8004bd8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d214      	bcs.n	8004bd8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004bb4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004bb8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004bba:	6939      	ldr	r1, [r7, #16]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fadb 	bl	8005178 <RTC_WriteAlarmCounter>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e006      	b.n	8004be6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}
	...

08004bf0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_RTC_GetTime+0x28>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0b5      	b.n	8004d88 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0ac      	b.n	8004d88 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fa32 	bl	8005098 <RTC_ReadTimeCounter>
 8004c34:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	4a55      	ldr	r2, [pc, #340]	; (8004d90 <HAL_RTC_GetTime+0x1a0>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	0adb      	lsrs	r3, r3, #11
 8004c40:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4b52      	ldr	r3, [pc, #328]	; (8004d90 <HAL_RTC_GetTime+0x1a0>)
 8004c46:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4a:	0adb      	lsrs	r3, r3, #11
 8004c4c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	4a4f      	ldr	r2, [pc, #316]	; (8004d94 <HAL_RTC_GetTime+0x1a4>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	4a4a      	ldr	r2, [pc, #296]	; (8004d90 <HAL_RTC_GetTime+0x1a0>)
 8004c68:	fba2 1203 	umull	r1, r2, r2, r3
 8004c6c:	0ad2      	lsrs	r2, r2, #11
 8004c6e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004c72:	fb01 f202 	mul.w	r2, r1, r2
 8004c76:	1a9a      	subs	r2, r3, r2
 8004c78:	4b46      	ldr	r3, [pc, #280]	; (8004d94 <HAL_RTC_GetTime+0x1a4>)
 8004c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7e:	0959      	lsrs	r1, r3, #5
 8004c80:	460b      	mov	r3, r1
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a5b      	subs	r3, r3, r1
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	1ad1      	subs	r1, r2, r3
 8004c8a:	b2ca      	uxtb	r2, r1
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b17      	cmp	r3, #23
 8004c94:	d955      	bls.n	8004d42 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4a3f      	ldr	r2, [pc, #252]	; (8004d98 <HAL_RTC_GetTime+0x1a8>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004ca2:	6939      	ldr	r1, [r7, #16]
 8004ca4:	4b3c      	ldr	r3, [pc, #240]	; (8004d98 <HAL_RTC_GetTime+0x1a8>)
 8004ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8004caa:	091a      	lsrs	r2, r3, #4
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	1aca      	subs	r2, r1, r3
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fa42 	bl	8005146 <RTC_ReadAlarmCounter>
 8004cc2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d008      	beq.n	8004cde <HAL_RTC_GetTime+0xee>
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d904      	bls.n	8004cde <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e002      	b.n	8004ce4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	; (8004d9c <HAL_RTC_GetTime+0x1ac>)
 8004ce8:	fb02 f303 	mul.w	r3, r2, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004cf2:	69b9      	ldr	r1, [r7, #24]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f9ff 	bl	80050f8 <RTC_WriteTimeCounter>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e041      	b.n	8004d88 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d00c      	beq.n	8004d26 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	4413      	add	r3, r2
 8004d12:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004d14:	69f9      	ldr	r1, [r7, #28]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa2e 	bl	8005178 <RTC_WriteAlarmCounter>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e030      	b.n	8004d88 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004d26:	69f9      	ldr	r1, [r7, #28]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fa25 	bl	8005178 <RTC_WriteAlarmCounter>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e027      	b.n	8004d88 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004d38:	6979      	ldr	r1, [r7, #20]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 facd 	bl	80052da <RTC_DateUpdate>
 8004d40:	e003      	b.n	8004d4a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01a      	beq.n	8004d86 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fa86 	bl	8005266 <RTC_ByteToBcd2>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fa7d 	bl	8005266 <RTC_ByteToBcd2>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	789b      	ldrb	r3, [r3, #2]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fa74 	bl	8005266 <RTC_ByteToBcd2>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	461a      	mov	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3720      	adds	r7, #32
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	91a2b3c5 	.word	0x91a2b3c5
 8004d94:	88888889 	.word	0x88888889
 8004d98:	aaaaaaab 	.word	0xaaaaaaab
 8004d9c:	00015180 	.word	0x00015180

08004da0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_RTC_SetDate+0x24>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e097      	b.n	8004ef8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	7c1b      	ldrb	r3, [r3, #16]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_RTC_SetDate+0x34>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e091      	b.n	8004ef8 <HAL_RTC_SetDate+0x158>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10c      	bne.n	8004e00 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	78da      	ldrb	r2, [r3, #3]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	785a      	ldrb	r2, [r3, #1]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	789a      	ldrb	r2, [r3, #2]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	739a      	strb	r2, [r3, #14]
 8004dfe:	e01a      	b.n	8004e36 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	78db      	ldrb	r3, [r3, #3]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fa4b 	bl	80052a0 <RTC_Bcd2ToByte>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fa42 	bl	80052a0 <RTC_Bcd2ToByte>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	789b      	ldrb	r3, [r3, #2]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fa39 	bl	80052a0 <RTC_Bcd2ToByte>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	7bdb      	ldrb	r3, [r3, #15]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	7b59      	ldrb	r1, [r3, #13]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	7b9b      	ldrb	r3, [r3, #14]
 8004e44:	461a      	mov	r2, r3
 8004e46:	f000 fb23 	bl	8005490 <RTC_WeekDayNum>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	7b1a      	ldrb	r2, [r3, #12]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f91c 	bl	8005098 <RTC_ReadTimeCounter>
 8004e60:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <HAL_RTC_SetDate+0x160>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0adb      	lsrs	r3, r3, #11
 8004e6c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b18      	cmp	r3, #24
 8004e72:	d93a      	bls.n	8004eea <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4a23      	ldr	r2, [pc, #140]	; (8004f04 <HAL_RTC_SetDate+0x164>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	4a22      	ldr	r2, [pc, #136]	; (8004f08 <HAL_RTC_SetDate+0x168>)
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004e8a:	69f9      	ldr	r1, [r7, #28]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f933 	bl	80050f8 <RTC_WriteTimeCounter>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e027      	b.n	8004ef8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f94c 	bl	8005146 <RTC_ReadAlarmCounter>
 8004eae:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d018      	beq.n	8004eea <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d214      	bcs.n	8004eea <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004ec6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004eca:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004ecc:	69b9      	ldr	r1, [r7, #24]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f952 	bl	8005178 <RTC_WriteAlarmCounter>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2204      	movs	r2, #4
 8004ede:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e006      	b.n	8004ef8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	91a2b3c5 	.word	0x91a2b3c5
 8004f04:	aaaaaaab 	.word	0xaaaaaaab
 8004f08:	00015180 	.word	0x00015180

08004f0c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b089      	sub	sp, #36	; 0x24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	2100      	movs	r1, #0
 8004f22:	460a      	mov	r2, r1
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	460a      	mov	r2, r1
 8004f28:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_RTC_SetAlarm+0x2a>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e07d      	b.n	8005036 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	7c1b      	ldrb	r3, [r3, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_RTC_SetAlarm+0x3a>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e077      	b.n	8005036 <HAL_RTC_SetAlarm+0x12a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004f52:	f107 0314 	add.w	r3, r7, #20
 8004f56:	2200      	movs	r2, #0
 8004f58:	4619      	mov	r1, r3
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7ff fe48 	bl	8004bf0 <HAL_RTC_GetTime>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e065      	b.n	8005036 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004f6a:	7d3b      	ldrb	r3, [r7, #20]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004f72:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004f76:	7d7b      	ldrb	r3, [r7, #21]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a5b      	subs	r3, r3, r1
 8004f80:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004f82:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004f84:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004f86:	4413      	add	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d113      	bne.n	8004fb8 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004f9a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	785b      	ldrb	r3, [r3, #1]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	1a5b      	subs	r3, r3, r1
 8004faa:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004fac:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004fb2:	4413      	add	r3, r2
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	e01e      	b.n	8004ff6 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 f96f 	bl	80052a0 <RTC_Bcd2ToByte>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004fca:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f964 	bl	80052a0 <RTC_Bcd2ToByte>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4613      	mov	r3, r2
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004fe4:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	789b      	ldrb	r3, [r3, #2]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f958 	bl	80052a0 <RTC_Bcd2ToByte>
 8004ff0:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004ff2:	4423      	add	r3, r4
 8004ff4:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d205      	bcs.n	800500a <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005004:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005008:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800500a:	69f9      	ldr	r1, [r7, #28]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f8b3 	bl	8005178 <RTC_WriteAlarmCounter>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2204      	movs	r2, #4
 800501c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e006      	b.n	8005036 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}

0800503e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e01d      	b.n	8005090 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0208 	bic.w	r2, r2, #8
 8005062:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005064:	f7fd f9ea 	bl	800243c <HAL_GetTick>
 8005068:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800506a:	e009      	b.n	8005080 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800506c:	f7fd f9e6 	bl	800243c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800507a:	d901      	bls.n	8005080 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e007      	b.n	8005090 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ee      	beq.n	800506c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	827b      	strh	r3, [r7, #18]
 80050a4:	2300      	movs	r3, #0
 80050a6:	823b      	strh	r3, [r7, #16]
 80050a8:	2300      	movs	r3, #0
 80050aa:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80050c8:	8a7a      	ldrh	r2, [r7, #18]
 80050ca:	8a3b      	ldrh	r3, [r7, #16]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d008      	beq.n	80050e2 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80050d0:	8a3b      	ldrh	r3, [r7, #16]
 80050d2:	041a      	lsls	r2, r3, #16
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e004      	b.n	80050ec <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80050e2:	8a7b      	ldrh	r3, [r7, #18]
 80050e4:	041a      	lsls	r2, r3, #16
 80050e6:	89fb      	ldrh	r3, [r7, #14]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80050ec:	697b      	ldr	r3, [r7, #20]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f85d 	bl	80051c6 <RTC_EnterInitMode>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
 8005116:	e011      	b.n	800513c <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	0c12      	lsrs	r2, r2, #16
 8005120:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	b292      	uxth	r2, r2
 800512a:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f872 	bl	8005216 <RTC_ExitInitMode>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	81fb      	strh	r3, [r7, #14]
 8005152:	2300      	movs	r3, #0
 8005154:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005166:	89fb      	ldrh	r3, [r7, #14]
 8005168:	041a      	lsls	r2, r3, #16
 800516a:	89bb      	ldrh	r3, [r7, #12]
 800516c:	4313      	orrs	r3, r2
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f81d 	bl	80051c6 <RTC_EnterInitMode>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
 8005196:	e011      	b.n	80051bc <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	0c12      	lsrs	r2, r2, #16
 80051a0:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	b292      	uxth	r2, r2
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f832 	bl	8005216 <RTC_ExitInitMode>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80051d2:	f7fd f933 	bl	800243c <HAL_GetTick>
 80051d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051d8:	e009      	b.n	80051ee <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80051da:	f7fd f92f 	bl	800243c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e8:	d901      	bls.n	80051ee <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e00f      	b.n	800520e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ee      	beq.n	80051da <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0210 	orr.w	r2, r2, #16
 800520a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0210 	bic.w	r2, r2, #16
 8005230:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005232:	f7fd f903 	bl	800243c <HAL_GetTick>
 8005236:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005238:	e009      	b.n	800524e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800523a:	f7fd f8ff 	bl	800243c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005248:	d901      	bls.n	800524e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e007      	b.n	800525e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ee      	beq.n	800523a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	4603      	mov	r3, r0
 800526e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005274:	e005      	b.n	8005282 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	3b0a      	subs	r3, #10
 8005280:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	2b09      	cmp	r3, #9
 8005286:	d8f6      	bhi.n	8005276 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	b2da      	uxtb	r2, r3
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	4313      	orrs	r3, r2
 8005294:	b2db      	uxtb	r3, r3
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	091b      	lsrs	r3, r3, #4
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	4413      	add	r3, r2
 80052ce:	b2db      	uxtb	r3, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b086      	sub	sp, #24
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7bdb      	ldrb	r3, [r3, #15]
 80052f8:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7b5b      	ldrb	r3, [r3, #13]
 80052fe:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	7b9b      	ldrb	r3, [r3, #14]
 8005304:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	e06f      	b.n	80053ec <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d011      	beq.n	8005336 <RTC_DateUpdate+0x5c>
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d00e      	beq.n	8005336 <RTC_DateUpdate+0x5c>
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b05      	cmp	r3, #5
 800531c:	d00b      	beq.n	8005336 <RTC_DateUpdate+0x5c>
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b07      	cmp	r3, #7
 8005322:	d008      	beq.n	8005336 <RTC_DateUpdate+0x5c>
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b08      	cmp	r3, #8
 8005328:	d005      	beq.n	8005336 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b0a      	cmp	r3, #10
 800532e:	d002      	beq.n	8005336 <RTC_DateUpdate+0x5c>
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d117      	bne.n	8005366 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b1e      	cmp	r3, #30
 800533a:	d803      	bhi.n	8005344 <RTC_DateUpdate+0x6a>
      {
        day++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005342:	e050      	b.n	80053e6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d005      	beq.n	8005356 <RTC_DateUpdate+0x7c>
        {
          month++;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3301      	adds	r3, #1
 800534e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005350:	2301      	movs	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005354:	e047      	b.n	80053e6 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005356:	2301      	movs	r3, #1
 8005358:	613b      	str	r3, [r7, #16]
          day = 1U;
 800535a:	2301      	movs	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
          year++;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	3301      	adds	r3, #1
 8005362:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005364:	e03f      	b.n	80053e6 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d008      	beq.n	800537e <RTC_DateUpdate+0xa4>
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b06      	cmp	r3, #6
 8005370:	d005      	beq.n	800537e <RTC_DateUpdate+0xa4>
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b09      	cmp	r3, #9
 8005376:	d002      	beq.n	800537e <RTC_DateUpdate+0xa4>
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b0b      	cmp	r3, #11
 800537c:	d10c      	bne.n	8005398 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b1d      	cmp	r3, #29
 8005382:	d803      	bhi.n	800538c <RTC_DateUpdate+0xb2>
      {
        day++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800538a:	e02c      	b.n	80053e6 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	3301      	adds	r3, #1
 8005390:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005392:	2301      	movs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005396:	e026      	b.n	80053e6 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d123      	bne.n	80053e6 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b1b      	cmp	r3, #27
 80053a2:	d803      	bhi.n	80053ac <RTC_DateUpdate+0xd2>
      {
        day++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e01c      	b.n	80053e6 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b1c      	cmp	r3, #28
 80053b0:	d111      	bne.n	80053d6 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f838 	bl	800542c <RTC_IsLeapYear>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <RTC_DateUpdate+0xf0>
        {
          day++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e00d      	b.n	80053e6 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3301      	adds	r3, #1
 80053ce:	613b      	str	r3, [r7, #16]
          day = 1U;
 80053d0:	2301      	movs	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e007      	b.n	80053e6 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b1d      	cmp	r3, #29
 80053da:	d104      	bne.n	80053e6 <RTC_DateUpdate+0x10c>
      {
        month++;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	3301      	adds	r3, #1
 80053e0:	613b      	str	r3, [r7, #16]
        day = 1U;
 80053e2:	2301      	movs	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60bb      	str	r3, [r7, #8]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d38b      	bcc.n	800530c <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	4619      	mov	r1, r3
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f000 f83a 	bl	8005490 <RTC_WeekDayNum>
 800541c:	4603      	mov	r3, r0
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	731a      	strb	r2, [r3, #12]
}
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	e01d      	b.n	8005482 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	4a10      	ldr	r2, [pc, #64]	; (800548c <RTC_IsLeapYear+0x60>)
 800544a:	fba2 1203 	umull	r1, r2, r2, r3
 800544e:	0952      	lsrs	r2, r2, #5
 8005450:	2164      	movs	r1, #100	; 0x64
 8005452:	fb01 f202 	mul.w	r2, r1, r2
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800545e:	2301      	movs	r3, #1
 8005460:	e00f      	b.n	8005482 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	4a09      	ldr	r2, [pc, #36]	; (800548c <RTC_IsLeapYear+0x60>)
 8005466:	fba2 1203 	umull	r1, r2, r2, r3
 800546a:	09d2      	lsrs	r2, r2, #7
 800546c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005470:	fb01 f202 	mul.w	r2, r1, r2
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005480:	2300      	movs	r3, #0
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	51eb851f 	.word	0x51eb851f

08005490 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
 800549c:	4613      	mov	r3, r2
 800549e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80054ae:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d82d      	bhi.n	8005512 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	4613      	mov	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4413      	add	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <RTC_WeekDayNum+0xe4>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	085a      	lsrs	r2, r3, #1
 80054ca:	78bb      	ldrb	r3, [r7, #2]
 80054cc:	441a      	add	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	441a      	add	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	441a      	add	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	3b01      	subs	r3, #1
 80054de:	4926      	ldr	r1, [pc, #152]	; (8005578 <RTC_WeekDayNum+0xe8>)
 80054e0:	fba1 1303 	umull	r1, r3, r1, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	4922      	ldr	r1, [pc, #136]	; (8005578 <RTC_WeekDayNum+0xe8>)
 80054ee:	fba1 1303 	umull	r1, r3, r1, r3
 80054f2:	09db      	lsrs	r3, r3, #7
 80054f4:	4413      	add	r3, r2
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	4b20      	ldr	r3, [pc, #128]	; (800557c <RTC_WeekDayNum+0xec>)
 80054fa:	fba3 1302 	umull	r1, r3, r3, r2
 80054fe:	1ad1      	subs	r1, r2, r3
 8005500:	0849      	lsrs	r1, r1, #1
 8005502:	440b      	add	r3, r1
 8005504:	0899      	lsrs	r1, r3, #2
 8005506:	460b      	mov	r3, r1
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	1a5b      	subs	r3, r3, r1
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e029      	b.n	8005566 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <RTC_WeekDayNum+0xe4>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	085a      	lsrs	r2, r3, #1
 8005526:	78bb      	ldrb	r3, [r7, #2]
 8005528:	441a      	add	r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	441a      	add	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4910      	ldr	r1, [pc, #64]	; (8005578 <RTC_WeekDayNum+0xe8>)
 8005538:	fba1 1303 	umull	r1, r3, r1, r3
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	490d      	ldr	r1, [pc, #52]	; (8005578 <RTC_WeekDayNum+0xe8>)
 8005544:	fba1 1303 	umull	r1, r3, r1, r3
 8005548:	09db      	lsrs	r3, r3, #7
 800554a:	4413      	add	r3, r2
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <RTC_WeekDayNum+0xec>)
 8005550:	fba3 1302 	umull	r1, r3, r3, r2
 8005554:	1ad1      	subs	r1, r2, r3
 8005556:	0849      	lsrs	r1, r1, #1
 8005558:	440b      	add	r3, r1
 800555a:	0899      	lsrs	r1, r3, #2
 800555c:	460b      	mov	r3, r1
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	1a5b      	subs	r3, r3, r1
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	b2db      	uxtb	r3, r3
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	38e38e39 	.word	0x38e38e39
 8005578:	51eb851f 	.word	0x51eb851f
 800557c:	24924925 	.word	0x24924925

08005580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e076      	b.n	8005680 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d108      	bne.n	80055ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a2:	d009      	beq.n	80055b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]
 80055aa:	e005      	b.n	80055b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fc fc80 	bl	8001ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	ea42 0103 	orr.w	r1, r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	0c1a      	lsrs	r2, r3, #16
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f002 0204 	and.w	r2, r2, #4
 800565e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e041      	b.n	800571e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fc fc6c 	bl	8001f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4619      	mov	r1, r3
 80056c6:	4610      	mov	r0, r2
 80056c8:	f000 fdb2 	bl	8006230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e041      	b.n	80057bc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f839 	bl	80057c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f000 fd63 	bl	8006230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <HAL_TIM_OC_Start_IT+0x28>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	e022      	b.n	8005846 <HAL_TIM_OC_Start_IT+0x6e>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b04      	cmp	r3, #4
 8005804:	d109      	bne.n	800581a <HAL_TIM_OC_Start_IT+0x42>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	bf14      	ite	ne
 8005812:	2301      	movne	r3, #1
 8005814:	2300      	moveq	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	e015      	b.n	8005846 <HAL_TIM_OC_Start_IT+0x6e>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d109      	bne.n	8005834 <HAL_TIM_OC_Start_IT+0x5c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e008      	b.n	8005846 <HAL_TIM_OC_Start_IT+0x6e>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e0bd      	b.n	80059ca <HAL_TIM_OC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <HAL_TIM_OC_Start_IT+0x86>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800585c:	e013      	b.n	8005886 <HAL_TIM_OC_Start_IT+0xae>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b04      	cmp	r3, #4
 8005862:	d104      	bne.n	800586e <HAL_TIM_OC_Start_IT+0x96>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800586c:	e00b      	b.n	8005886 <HAL_TIM_OC_Start_IT+0xae>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b08      	cmp	r3, #8
 8005872:	d104      	bne.n	800587e <HAL_TIM_OC_Start_IT+0xa6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800587c:	e003      	b.n	8005886 <HAL_TIM_OC_Start_IT+0xae>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b0c      	cmp	r3, #12
 800588a:	d841      	bhi.n	8005910 <HAL_TIM_OC_Start_IT+0x138>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <HAL_TIM_OC_Start_IT+0xbc>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058c9 	.word	0x080058c9
 8005898:	08005911 	.word	0x08005911
 800589c:	08005911 	.word	0x08005911
 80058a0:	08005911 	.word	0x08005911
 80058a4:	080058db 	.word	0x080058db
 80058a8:	08005911 	.word	0x08005911
 80058ac:	08005911 	.word	0x08005911
 80058b0:	08005911 	.word	0x08005911
 80058b4:	080058ed 	.word	0x080058ed
 80058b8:	08005911 	.word	0x08005911
 80058bc:	08005911 	.word	0x08005911
 80058c0:	08005911 	.word	0x08005911
 80058c4:	080058ff 	.word	0x080058ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0202 	orr.w	r2, r2, #2
 80058d6:	60da      	str	r2, [r3, #12]
      break;
 80058d8:	e01d      	b.n	8005916 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0204 	orr.w	r2, r2, #4
 80058e8:	60da      	str	r2, [r3, #12]
      break;
 80058ea:	e014      	b.n	8005916 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	60da      	str	r2, [r3, #12]
      break;
 80058fc:	e00b      	b.n	8005916 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0210 	orr.w	r2, r2, #16
 800590c:	60da      	str	r2, [r3, #12]
      break;
 800590e:	e002      	b.n	8005916 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      break;
 8005914:	bf00      	nop
  }

  if (status == HAL_OK)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d155      	bne.n	80059c8 <HAL_TIM_OC_Start_IT+0x1f0>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 ff3f 	bl	80067a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a29      	ldr	r2, [pc, #164]	; (80059d4 <HAL_TIM_OC_Start_IT+0x1fc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIM_OC_Start_IT+0x166>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <HAL_TIM_OC_Start_IT+0x200>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d101      	bne.n	8005942 <HAL_TIM_OC_Start_IT+0x16a>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <HAL_TIM_OC_Start_IT+0x16c>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005956:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <HAL_TIM_OC_Start_IT+0x1fc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d018      	beq.n	8005994 <HAL_TIM_OC_Start_IT+0x1bc>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1c      	ldr	r2, [pc, #112]	; (80059d8 <HAL_TIM_OC_Start_IT+0x200>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d013      	beq.n	8005994 <HAL_TIM_OC_Start_IT+0x1bc>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d00e      	beq.n	8005994 <HAL_TIM_OC_Start_IT+0x1bc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a18      	ldr	r2, [pc, #96]	; (80059dc <HAL_TIM_OC_Start_IT+0x204>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d009      	beq.n	8005994 <HAL_TIM_OC_Start_IT+0x1bc>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <HAL_TIM_OC_Start_IT+0x208>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_TIM_OC_Start_IT+0x1bc>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_TIM_OC_Start_IT+0x20c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d111      	bne.n	80059b8 <HAL_TIM_OC_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d010      	beq.n	80059c8 <HAL_TIM_OC_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0201 	orr.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b6:	e007      	b.n	80059c8 <HAL_TIM_OC_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40013400 	.word	0x40013400
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00

080059e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e041      	b.n	8005a7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f839 	bl	8005a86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f000 fc02 	bl	8006230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <HAL_TIM_PWM_Start+0x24>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	bf14      	ite	ne
 8005ab4:	2301      	movne	r3, #1
 8005ab6:	2300      	moveq	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	e022      	b.n	8005b02 <HAL_TIM_PWM_Start+0x6a>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d109      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x3e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	bf14      	ite	ne
 8005ace:	2301      	movne	r3, #1
 8005ad0:	2300      	moveq	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	e015      	b.n	8005b02 <HAL_TIM_PWM_Start+0x6a>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d109      	bne.n	8005af0 <HAL_TIM_PWM_Start+0x58>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e008      	b.n	8005b02 <HAL_TIM_PWM_Start+0x6a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e072      	b.n	8005bf0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_PWM_Start+0x82>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b18:	e013      	b.n	8005b42 <HAL_TIM_PWM_Start+0xaa>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_PWM_Start+0x92>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b28:	e00b      	b.n	8005b42 <HAL_TIM_PWM_Start+0xaa>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_PWM_Start+0xa2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b38:	e003      	b.n	8005b42 <HAL_TIM_PWM_Start+0xaa>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2201      	movs	r2, #1
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fe2c 	bl	80067a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a28      	ldr	r2, [pc, #160]	; (8005bf8 <HAL_TIM_PWM_Start+0x160>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_TIM_PWM_Start+0xcc>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a27      	ldr	r2, [pc, #156]	; (8005bfc <HAL_TIM_PWM_Start+0x164>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_PWM_Start+0xd0>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <HAL_TIM_PWM_Start+0xd2>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <HAL_TIM_PWM_Start+0x160>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d018      	beq.n	8005bba <HAL_TIM_PWM_Start+0x122>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_TIM_PWM_Start+0x164>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIM_PWM_Start+0x122>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIM_PWM_Start+0x122>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <HAL_TIM_PWM_Start+0x168>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIM_PWM_Start+0x122>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <HAL_TIM_PWM_Start+0x16c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIM_PWM_Start+0x122>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <HAL_TIM_PWM_Start+0x170>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d111      	bne.n	8005bde <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	d010      	beq.n	8005bee <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bdc:	e007      	b.n	8005bee <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40013400 	.word	0x40013400
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00

08005c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d122      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d11b      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0202 	mvn.w	r2, #2
 8005c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fad2 	bl	80061f8 <HAL_TIM_IC_CaptureCallback>
 8005c54:	e005      	b.n	8005c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fb feba 	bl	80019d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fad4 	bl	800620a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d122      	bne.n	8005cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d11b      	bne.n	8005cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0204 	mvn.w	r2, #4
 8005c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 faa8 	bl	80061f8 <HAL_TIM_IC_CaptureCallback>
 8005ca8:	e005      	b.n	8005cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb fe90 	bl	80019d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 faaa 	bl	800620a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d122      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d11b      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0208 	mvn.w	r2, #8
 8005ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa7e 	bl	80061f8 <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e005      	b.n	8005d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb fe66 	bl	80019d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa80 	bl	800620a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d122      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d11b      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0210 	mvn.w	r2, #16
 8005d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa54 	bl	80061f8 <HAL_TIM_IC_CaptureCallback>
 8005d50:	e005      	b.n	8005d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fb fe3c 	bl	80019d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fa56 	bl	800620a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10e      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d107      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0201 	mvn.w	r2, #1
 8005d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa2b 	bl	80061e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d10e      	bne.n	8005dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da8:	2b80      	cmp	r3, #128	; 0x80
 8005daa:	d107      	bne.n	8005dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fde0 	bl	800697c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d10e      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d107      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa1a 	bl	800621c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d10e      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d107      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0220 	mvn.w	r2, #32
 8005e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fdab 	bl	800696a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e048      	b.n	8005ecc <HAL_TIM_OC_ConfigChannel+0xb0>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b0c      	cmp	r3, #12
 8005e46:	d839      	bhi.n	8005ebc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e85 	.word	0x08005e85
 8005e54:	08005ebd 	.word	0x08005ebd
 8005e58:	08005ebd 	.word	0x08005ebd
 8005e5c:	08005ebd 	.word	0x08005ebd
 8005e60:	08005e93 	.word	0x08005e93
 8005e64:	08005ebd 	.word	0x08005ebd
 8005e68:	08005ebd 	.word	0x08005ebd
 8005e6c:	08005ebd 	.word	0x08005ebd
 8005e70:	08005ea1 	.word	0x08005ea1
 8005e74:	08005ebd 	.word	0x08005ebd
 8005e78:	08005ebd 	.word	0x08005ebd
 8005e7c:	08005ebd 	.word	0x08005ebd
 8005e80:	08005eaf 	.word	0x08005eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fa4a 	bl	8006324 <TIM_OC1_SetConfig>
      break;
 8005e90:	e017      	b.n	8005ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fab3 	bl	8006404 <TIM_OC2_SetConfig>
      break;
 8005e9e:	e010      	b.n	8005ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fb20 	bl	80064ec <TIM_OC3_SetConfig>
      break;
 8005eac:	e009      	b.n	8005ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fb8d 	bl	80065d4 <TIM_OC4_SetConfig>
      break;
 8005eba:	e002      	b.n	8005ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e0ae      	b.n	8006050 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	f200 809f 	bhi.w	8006040 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f3d 	.word	0x08005f3d
 8005f0c:	08006041 	.word	0x08006041
 8005f10:	08006041 	.word	0x08006041
 8005f14:	08006041 	.word	0x08006041
 8005f18:	08005f7d 	.word	0x08005f7d
 8005f1c:	08006041 	.word	0x08006041
 8005f20:	08006041 	.word	0x08006041
 8005f24:	08006041 	.word	0x08006041
 8005f28:	08005fbf 	.word	0x08005fbf
 8005f2c:	08006041 	.word	0x08006041
 8005f30:	08006041 	.word	0x08006041
 8005f34:	08006041 	.word	0x08006041
 8005f38:	08005fff 	.word	0x08005fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 f9ee 	bl	8006324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0208 	orr.w	r2, r2, #8
 8005f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0204 	bic.w	r2, r2, #4
 8005f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6999      	ldr	r1, [r3, #24]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	619a      	str	r2, [r3, #24]
      break;
 8005f7a:	e064      	b.n	8006046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fa3e 	bl	8006404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6999      	ldr	r1, [r3, #24]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	619a      	str	r2, [r3, #24]
      break;
 8005fbc:	e043      	b.n	8006046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fa91 	bl	80064ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0208 	orr.w	r2, r2, #8
 8005fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0204 	bic.w	r2, r2, #4
 8005fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69d9      	ldr	r1, [r3, #28]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	61da      	str	r2, [r3, #28]
      break;
 8005ffc:	e023      	b.n	8006046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fae5 	bl	80065d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69d9      	ldr	r1, [r3, #28]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	021a      	lsls	r2, r3, #8
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	61da      	str	r2, [r3, #28]
      break;
 800603e:	e002      	b.n	8006046 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	75fb      	strb	r3, [r7, #23]
      break;
 8006044:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800604e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_TIM_ConfigClockSource+0x1c>
 8006070:	2302      	movs	r3, #2
 8006072:	e0b4      	b.n	80061de <HAL_TIM_ConfigClockSource+0x186>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800609a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ac:	d03e      	beq.n	800612c <HAL_TIM_ConfigClockSource+0xd4>
 80060ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b2:	f200 8087 	bhi.w	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
 80060b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ba:	f000 8086 	beq.w	80061ca <HAL_TIM_ConfigClockSource+0x172>
 80060be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c2:	d87f      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
 80060c4:	2b70      	cmp	r3, #112	; 0x70
 80060c6:	d01a      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0xa6>
 80060c8:	2b70      	cmp	r3, #112	; 0x70
 80060ca:	d87b      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
 80060cc:	2b60      	cmp	r3, #96	; 0x60
 80060ce:	d050      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x11a>
 80060d0:	2b60      	cmp	r3, #96	; 0x60
 80060d2:	d877      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
 80060d4:	2b50      	cmp	r3, #80	; 0x50
 80060d6:	d03c      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0xfa>
 80060d8:	2b50      	cmp	r3, #80	; 0x50
 80060da:	d873      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d058      	beq.n	8006192 <HAL_TIM_ConfigClockSource+0x13a>
 80060e0:	2b40      	cmp	r3, #64	; 0x40
 80060e2:	d86f      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
 80060e4:	2b30      	cmp	r3, #48	; 0x30
 80060e6:	d064      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x15a>
 80060e8:	2b30      	cmp	r3, #48	; 0x30
 80060ea:	d86b      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d060      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x15a>
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d867      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d05c      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x15a>
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d05a      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x15a>
 80060fc:	e062      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800610e:	f000 fb2c 	bl	800676a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	609a      	str	r2, [r3, #8]
      break;
 800612a:	e04f      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800613c:	f000 fb15 	bl	800676a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800614e:	609a      	str	r2, [r3, #8]
      break;
 8006150:	e03c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800615e:	461a      	mov	r2, r3
 8006160:	f000 fa8c 	bl	800667c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2150      	movs	r1, #80	; 0x50
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fae3 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8006170:	e02c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800617e:	461a      	mov	r2, r3
 8006180:	f000 faaa 	bl	80066d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2160      	movs	r1, #96	; 0x60
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fad3 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8006190:	e01c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800619e:	461a      	mov	r2, r3
 80061a0:	f000 fa6c 	bl	800667c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2140      	movs	r1, #64	; 0x40
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fac3 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 80061b0:	e00c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f000 faba 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 80061c2:	e003      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
      break;
 80061c8:	e000      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
	...

08006230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a33      	ldr	r2, [pc, #204]	; (8006310 <TIM_Base_SetConfig+0xe0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a32      	ldr	r2, [pc, #200]	; (8006314 <TIM_Base_SetConfig+0xe4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00f      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d00b      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a2f      	ldr	r2, [pc, #188]	; (8006318 <TIM_Base_SetConfig+0xe8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a2e      	ldr	r2, [pc, #184]	; (800631c <TIM_Base_SetConfig+0xec>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a2d      	ldr	r2, [pc, #180]	; (8006320 <TIM_Base_SetConfig+0xf0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d108      	bne.n	8006282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a22      	ldr	r2, [pc, #136]	; (8006310 <TIM_Base_SetConfig+0xe0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <TIM_Base_SetConfig+0x82>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a21      	ldr	r2, [pc, #132]	; (8006314 <TIM_Base_SetConfig+0xe4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00f      	beq.n	80062b2 <TIM_Base_SetConfig+0x82>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006298:	d00b      	beq.n	80062b2 <TIM_Base_SetConfig+0x82>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a1e      	ldr	r2, [pc, #120]	; (8006318 <TIM_Base_SetConfig+0xe8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d007      	beq.n	80062b2 <TIM_Base_SetConfig+0x82>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a1d      	ldr	r2, [pc, #116]	; (800631c <TIM_Base_SetConfig+0xec>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_Base_SetConfig+0x82>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <TIM_Base_SetConfig+0xf0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d108      	bne.n	80062c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a09      	ldr	r2, [pc, #36]	; (8006310 <TIM_Base_SetConfig+0xe0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_Base_SetConfig+0xc8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a08      	ldr	r2, [pc, #32]	; (8006314 <TIM_Base_SetConfig+0xe4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d103      	bne.n	8006300 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	615a      	str	r2, [r3, #20]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	40012c00 	.word	0x40012c00
 8006314:	40013400 	.word	0x40013400
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00

08006324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f023 0201 	bic.w	r2, r3, #1
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0302 	bic.w	r3, r3, #2
 800636c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a20      	ldr	r2, [pc, #128]	; (80063fc <TIM_OC1_SetConfig+0xd8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_OC1_SetConfig+0x64>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <TIM_OC1_SetConfig+0xdc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d10c      	bne.n	80063a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f023 0308 	bic.w	r3, r3, #8
 800638e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 0304 	bic.w	r3, r3, #4
 80063a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a15      	ldr	r2, [pc, #84]	; (80063fc <TIM_OC1_SetConfig+0xd8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_OC1_SetConfig+0x8e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a14      	ldr	r2, [pc, #80]	; (8006400 <TIM_OC1_SetConfig+0xdc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d111      	bne.n	80063d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	621a      	str	r2, [r3, #32]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40012c00 	.word	0x40012c00
 8006400:	40013400 	.word	0x40013400

08006404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f023 0210 	bic.w	r2, r3, #16
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0320 	bic.w	r3, r3, #32
 800644e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <TIM_OC2_SetConfig+0xe0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_OC2_SetConfig+0x68>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a20      	ldr	r2, [pc, #128]	; (80064e8 <TIM_OC2_SetConfig+0xe4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d10d      	bne.n	8006488 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006486:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <TIM_OC2_SetConfig+0xe0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_OC2_SetConfig+0x94>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <TIM_OC2_SetConfig+0xe4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d113      	bne.n	80064c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800649e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40013400 	.word	0x40013400

080064ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a21      	ldr	r2, [pc, #132]	; (80065cc <TIM_OC3_SetConfig+0xe0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <TIM_OC3_SetConfig+0x66>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <TIM_OC3_SetConfig+0xe4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10d      	bne.n	800656e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a16      	ldr	r2, [pc, #88]	; (80065cc <TIM_OC3_SetConfig+0xe0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_OC3_SetConfig+0x92>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <TIM_OC3_SetConfig+0xe4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d113      	bne.n	80065a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800658c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400

080065d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800661e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	031b      	lsls	r3, r3, #12
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a11      	ldr	r2, [pc, #68]	; (8006674 <TIM_OC4_SetConfig+0xa0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_OC4_SetConfig+0x68>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a10      	ldr	r2, [pc, #64]	; (8006678 <TIM_OC4_SetConfig+0xa4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d109      	bne.n	8006650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	019b      	lsls	r3, r3, #6
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40013400 	.word	0x40013400

0800667c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0201 	bic.w	r2, r3, #1
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 030a 	bic.w	r3, r3, #10
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	621a      	str	r2, [r3, #32]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f023 0210 	bic.w	r2, r3, #16
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	031b      	lsls	r3, r3, #12
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006714:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	621a      	str	r2, [r3, #32]
}
 800672c:	bf00      	nop
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	f043 0307 	orr.w	r3, r3, #7
 8006758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	609a      	str	r2, [r3, #8]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr

0800676a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800676a:	b480      	push	{r7}
 800676c:	b087      	sub	sp, #28
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006784:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	021a      	lsls	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	431a      	orrs	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4313      	orrs	r3, r2
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	609a      	str	r2, [r3, #8]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2201      	movs	r2, #1
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1a      	ldr	r2, [r3, #32]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	43db      	mvns	r3, r3
 80067ca:	401a      	ands	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1a      	ldr	r2, [r3, #32]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	fa01 f303 	lsl.w	r3, r1, r3
 80067e0:	431a      	orrs	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006804:	2302      	movs	r3, #2
 8006806:	e050      	b.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a19      	ldr	r2, [pc, #100]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685e:	d00e      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a15      	ldr	r2, [pc, #84]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a12      	ldr	r2, [pc, #72]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d10c      	bne.n	8006898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4313      	orrs	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr
 80068b4:	40012c00 	.word	0x40012c00
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00

080068c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e03d      	b.n	8006960 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr

0800697c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr

0800698e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b082      	sub	sp, #8
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e042      	b.n	8006a26 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fb fbf3 	bl	80021a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2224      	movs	r2, #36	; 0x24
 80069be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f82c 	bl	8006a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a6a:	f023 030c 	bic.w	r3, r3, #12
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	430b      	orrs	r3, r1
 8006a76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2c      	ldr	r2, [pc, #176]	; (8006b44 <UART_SetConfig+0x114>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d103      	bne.n	8006aa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a98:	f7fd fdc6 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	e002      	b.n	8006aa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fd fdae 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009a      	lsls	r2, r3, #2
 8006ab0:	441a      	add	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abc:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <UART_SetConfig+0x118>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	0119      	lsls	r1, r3, #4
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009a      	lsls	r2, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <UART_SetConfig+0x118>)
 8006ade:	fba3 0302 	umull	r0, r3, r3, r2
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	2064      	movs	r0, #100	; 0x64
 8006ae6:	fb00 f303 	mul.w	r3, r0, r3
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	3332      	adds	r3, #50	; 0x32
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <UART_SetConfig+0x118>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006afc:	4419      	add	r1, r3
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009a      	lsls	r2, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <UART_SetConfig+0x118>)
 8006b16:	fba3 0302 	umull	r0, r3, r3, r2
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	2064      	movs	r0, #100	; 0x64
 8006b1e:	fb00 f303 	mul.w	r3, r0, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	3332      	adds	r3, #50	; 0x32
 8006b28:	4a07      	ldr	r2, [pc, #28]	; (8006b48 <UART_SetConfig+0x118>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	440a      	add	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40013800 	.word	0x40013800
 8006b48:	51eb851f 	.word	0x51eb851f

08006b4c <memset>:
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4402      	add	r2, r0
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d100      	bne.n	8006b56 <memset+0xa>
 8006b54:	4770      	bx	lr
 8006b56:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5a:	e7f9      	b.n	8006b50 <memset+0x4>

08006b5c <__libc_init_array>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	2600      	movs	r6, #0
 8006b60:	4d0c      	ldr	r5, [pc, #48]	; (8006b94 <__libc_init_array+0x38>)
 8006b62:	4c0d      	ldr	r4, [pc, #52]	; (8006b98 <__libc_init_array+0x3c>)
 8006b64:	1b64      	subs	r4, r4, r5
 8006b66:	10a4      	asrs	r4, r4, #2
 8006b68:	42a6      	cmp	r6, r4
 8006b6a:	d109      	bne.n	8006b80 <__libc_init_array+0x24>
 8006b6c:	f000 f81a 	bl	8006ba4 <_init>
 8006b70:	2600      	movs	r6, #0
 8006b72:	4d0a      	ldr	r5, [pc, #40]	; (8006b9c <__libc_init_array+0x40>)
 8006b74:	4c0a      	ldr	r4, [pc, #40]	; (8006ba0 <__libc_init_array+0x44>)
 8006b76:	1b64      	subs	r4, r4, r5
 8006b78:	10a4      	asrs	r4, r4, #2
 8006b7a:	42a6      	cmp	r6, r4
 8006b7c:	d105      	bne.n	8006b8a <__libc_init_array+0x2e>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b84:	4798      	blx	r3
 8006b86:	3601      	adds	r6, #1
 8006b88:	e7ee      	b.n	8006b68 <__libc_init_array+0xc>
 8006b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8e:	4798      	blx	r3
 8006b90:	3601      	adds	r6, #1
 8006b92:	e7f2      	b.n	8006b7a <__libc_init_array+0x1e>
 8006b94:	08006bfc 	.word	0x08006bfc
 8006b98:	08006bfc 	.word	0x08006bfc
 8006b9c:	08006bfc 	.word	0x08006bfc
 8006ba0:	08006c00 	.word	0x08006c00

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
